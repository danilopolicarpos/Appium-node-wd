"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.inspectObject = inspectObject;
exports.parseCapsForInnerDriver = parseCapsForInnerDriver;
exports.insertAppiumPrefixes = insertAppiumPrefixes;
exports.getPackageVersion = getPackageVersion;
exports.pullSettings = pullSettings;
exports.rootDir = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

var _appiumBaseDriver = require("appium-base-driver");

var _findRoot = _interopRequireDefault(require("find-root"));

const W3C_APPIUM_PREFIX = 'appium';

function inspectObject(args) {
  function getValueArray(obj, indent = '  ') {
    if (!_lodash.default.isObject(obj)) {
      return [obj];
    }

    let strArr = ['{'];

    for (let [arg, value] of _lodash.default.toPairs(obj)) {
      if (!_lodash.default.isObject(value)) {
        strArr.push(`${indent}  ${arg}: ${value}`);
      } else {
        value = getValueArray(value, `${indent}  `);
        strArr.push(`${indent}  ${arg}: ${value.shift()}`);
        strArr.push(...value);
      }
    }

    strArr.push(`${indent}}`);
    return strArr;
  }

  for (let [arg, value] of _lodash.default.toPairs(args)) {
    value = getValueArray(value);

    _logger.default.info(`  ${arg}: ${value.shift()}`);

    for (let val of value) {
      _logger.default.info(val);
    }
  }
}

function parseCapsForInnerDriver(jsonwpCapabilities, w3cCapabilities, constraints = {}, defaultCapabilities = {}) {
  const hasW3CCaps = _lodash.default.isPlainObject(w3cCapabilities) && (_lodash.default.has(w3cCapabilities, 'alwaysMatch') || _lodash.default.has(w3cCapabilities, 'firstMatch'));

  const hasJSONWPCaps = _lodash.default.isPlainObject(jsonwpCapabilities);

  let protocol = null;
  let desiredCaps = {};
  let processedW3CCapabilities = null;
  let processedJsonwpCapabilities = null;

  if (!hasJSONWPCaps && !hasW3CCaps) {
    return {
      protocol: _appiumBaseDriver.BaseDriver.DRIVER_PROTOCOL.W3C,
      error: new Error('Either JSONWP or W3C capabilities should be provided')
    };
  }

  const {
    W3C,
    MJSONWP
  } = _appiumBaseDriver.BaseDriver.DRIVER_PROTOCOL;
  jsonwpCapabilities = _lodash.default.cloneDeep(jsonwpCapabilities);
  w3cCapabilities = _lodash.default.cloneDeep(w3cCapabilities);
  defaultCapabilities = _lodash.default.cloneDeep(defaultCapabilities);

  if (!_lodash.default.isEmpty(defaultCapabilities)) {
    if (hasW3CCaps) {
      const {
        firstMatch = [],
        alwaysMatch = {}
      } = w3cCapabilities;

      for (const [defaultCapKey, defaultCapValue] of _lodash.default.toPairs(defaultCapabilities)) {
        let isCapAlreadySet = false;

        for (const firstMatchEntry of firstMatch) {
          if (_lodash.default.has(removeW3CPrefixes(firstMatchEntry), removeW3CPrefix(defaultCapKey))) {
            isCapAlreadySet = true;
            break;
          }
        }

        isCapAlreadySet = isCapAlreadySet || _lodash.default.has(removeW3CPrefixes(alwaysMatch), removeW3CPrefix(defaultCapKey));

        if (isCapAlreadySet) {
          continue;
        }

        if (_lodash.default.isEmpty(firstMatch)) {
          w3cCapabilities.firstMatch = [{
            [defaultCapKey]: defaultCapValue
          }];
        } else {
          firstMatch[0][defaultCapKey] = defaultCapValue;
        }
      }
    }

    if (hasJSONWPCaps) {
      jsonwpCapabilities = Object.assign({}, removeW3CPrefixes(defaultCapabilities), jsonwpCapabilities);
    }
  }

  if (hasJSONWPCaps) {
    protocol = MJSONWP;
    desiredCaps = jsonwpCapabilities;
    processedJsonwpCapabilities = removeW3CPrefixes({ ...desiredCaps
    });
  }

  if (hasW3CCaps) {
    protocol = W3C;
    let isFixingNeededForW3cCaps = false;

    try {
      desiredCaps = (0, _appiumBaseDriver.processCapabilities)(w3cCapabilities, constraints, true);
    } catch (error) {
      if (!hasJSONWPCaps) {
        return {
          desiredCaps,
          processedJsonwpCapabilities,
          processedW3CCapabilities,
          protocol,
          error
        };
      }

      _logger.default.info(`Could not parse W3C capabilities: ${error.message}`);

      isFixingNeededForW3cCaps = true;
    }

    if (hasJSONWPCaps && !isFixingNeededForW3cCaps) {
      const differingKeys = _lodash.default.difference(_lodash.default.keys(processedJsonwpCapabilities), _lodash.default.keys(removeW3CPrefixes(desiredCaps)));

      if (!_lodash.default.isEmpty(differingKeys)) {
        _logger.default.info(`The following capabilities were provided in the JSONWP desired capabilities that are missing ` + `in W3C capabilities: ${JSON.stringify(differingKeys)}`);

        isFixingNeededForW3cCaps = true;
      }
    }

    if (isFixingNeededForW3cCaps && hasJSONWPCaps) {
      _logger.default.info('Trying to fix W3C capabilities by merging them with JSONWP caps');

      w3cCapabilities = fixW3cCapabilities(w3cCapabilities, jsonwpCapabilities);

      try {
        desiredCaps = (0, _appiumBaseDriver.processCapabilities)(w3cCapabilities, constraints, true);
      } catch (error) {
        _logger.default.warn(`Could not parse fixed W3C capabilities: ${error.message}. Falling back to JSONWP protocol`);

        return {
          desiredCaps: processedJsonwpCapabilities,
          processedJsonwpCapabilities,
          processedW3CCapabilities: null,
          protocol: MJSONWP
        };
      }
    }

    processedW3CCapabilities = {
      alwaysMatch: { ...insertAppiumPrefixes(desiredCaps)
      },
      firstMatch: [{}]
    };
  }

  return {
    desiredCaps,
    processedJsonwpCapabilities,
    processedW3CCapabilities,
    protocol
  };
}

function fixW3cCapabilities(w3cCaps, jsonwpCaps) {
  const result = {
    firstMatch: w3cCaps.firstMatch || [],
    alwaysMatch: w3cCaps.alwaysMatch || {}
  };

  const keysToInsert = _lodash.default.keys(jsonwpCaps);

  const removeMatchingKeys = match => {
    _lodash.default.pull(keysToInsert, match);

    const colonIndex = match.indexOf(':');

    if (colonIndex >= 0 && match.length > colonIndex) {
      _lodash.default.pull(keysToInsert, match.substring(colonIndex + 1));
    }

    if (keysToInsert.includes(`${W3C_APPIUM_PREFIX}:${match}`)) {
      _lodash.default.pull(keysToInsert, `${W3C_APPIUM_PREFIX}:${match}`);
    }
  };

  for (const firstMatchEntry of result.firstMatch) {
    for (const pair of _lodash.default.toPairs(firstMatchEntry)) {
      removeMatchingKeys(pair[0]);
    }
  }

  for (const pair of _lodash.default.toPairs(result.alwaysMatch)) {
    removeMatchingKeys(pair[0]);
  }

  for (const key of keysToInsert) {
    result.alwaysMatch[key] = jsonwpCaps[key];
  }

  return result;
}

function insertAppiumPrefixes(caps) {
  const STANDARD_CAPS = ['browserName', 'browserVersion', 'platformName', 'acceptInsecureCerts', 'pageLoadStrategy', 'proxy', 'setWindowRect', 'timeouts', 'unhandledPromptBehavior'];
  let prefixedCaps = {};

  for (let [name, value] of _lodash.default.toPairs(caps)) {
    if (STANDARD_CAPS.includes(name) || name.includes(':')) {
      prefixedCaps[name] = value;
    } else {
      prefixedCaps[`${W3C_APPIUM_PREFIX}:${name}`] = value;
    }
  }

  return prefixedCaps;
}

function removeW3CPrefixes(caps) {
  if (!_lodash.default.isPlainObject(caps)) {
    return caps;
  }

  const fixedCaps = {};

  for (let [name, value] of _lodash.default.toPairs(caps)) {
    fixedCaps[removeW3CPrefix(name)] = value;
  }

  return fixedCaps;
}

function removeW3CPrefix(key) {
  const colonPos = key.indexOf(':');
  return colonPos > 0 && key.length > colonPos ? key.substring(colonPos + 1) : key;
}

function getPackageVersion(pkgName) {
  const pkgInfo = require(`${pkgName}/package.json`) || {};
  return pkgInfo.version;
}

function pullSettings(caps) {
  if (!_lodash.default.isPlainObject(caps) || _lodash.default.isEmpty(caps)) {
    return {};
  }

  const result = {};

  for (const [key, value] of _lodash.default.toPairs(caps)) {
    const match = /\bsettings\[(\S+)\]$/.exec(key);

    if (!match) {
      continue;
    }

    result[match[1]] = value;
    delete caps[key];
  }

  return result;
}

const rootDir = (0, _findRoot.default)(__dirname);
exports.rootDir = rootDir;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
