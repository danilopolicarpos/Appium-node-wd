"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("../logger"));

var _lodash = _interopRequireDefault(require("lodash"));

var _teen_process = require("teen_process");

var _shellQuote = require("shell-quote");

let commands = {};
exports.commands = commands;

commands.mobileShell = async function mobileShell(opts = {}) {
  if (!this.relaxedSecurityEnabled) {
    _logger.default.errorAndThrow(`Appium server must have relaxed security flag set in order to run any shell commands`);
  }

  const {
    command,
    args = [],
    timeout = 20000,
    includeStderr
  } = opts;

  if (!_lodash.default.isString(command)) {
    _logger.default.errorAndThrow(`The 'command' argument is mandatory'`);
  }

  const adbArgs = [...this.adb.executable.defaultArgs, 'shell', command, ...(_lodash.default.isArray(args) ? args : [args])];

  _logger.default.debug(`Running '${this.adb.executable.path} ${(0, _shellQuote.quote)(adbArgs)}'`);

  try {
    const {
      stdout,
      stderr
    } = await (0, _teen_process.exec)(this.adb.executable.path, adbArgs, {
      timeout
    });

    if (includeStderr) {
      return {
        stdout,
        stderr
      };
    }

    return stdout;
  } catch (err) {
    _logger.default.errorAndThrow(`Cannot execute the '${command}' shell command. ` + `Original error: ${err.message}. ` + `StdOut: ${err.stdout}. StdErr: ${err.stderr}`);
  }
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9zaGVsbC5qcyJdLCJuYW1lcyI6WyJjb21tYW5kcyIsIm1vYmlsZVNoZWxsIiwib3B0cyIsInJlbGF4ZWRTZWN1cml0eUVuYWJsZWQiLCJsb2ciLCJlcnJvckFuZFRocm93IiwiY29tbWFuZCIsImFyZ3MiLCJ0aW1lb3V0IiwiaW5jbHVkZVN0ZGVyciIsIl8iLCJpc1N0cmluZyIsImFkYkFyZ3MiLCJhZGIiLCJleGVjdXRhYmxlIiwiZGVmYXVsdEFyZ3MiLCJpc0FycmF5IiwiZGVidWciLCJwYXRoIiwic3Rkb3V0Iiwic3RkZXJyIiwiZXJyIiwibWVzc2FnZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQSxJQUFJQSxRQUFRLEdBQUcsRUFBZjs7O0FBRUFBLFFBQVEsQ0FBQ0MsV0FBVCxHQUF1QixlQUFlQSxXQUFmLENBQTRCQyxJQUFJLEdBQUcsRUFBbkMsRUFBdUM7QUFDNUQsTUFBSSxDQUFDLEtBQUtDLHNCQUFWLEVBQWtDO0FBQ2hDQyxvQkFBSUMsYUFBSixDQUFtQixzRkFBbkI7QUFDRDs7QUFFRCxRQUFNO0FBQ0pDLElBQUFBLE9BREk7QUFFSkMsSUFBQUEsSUFBSSxHQUFHLEVBRkg7QUFHSkMsSUFBQUEsT0FBTyxHQUFHLEtBSE47QUFJSkMsSUFBQUE7QUFKSSxNQUtGUCxJQUxKOztBQU9BLE1BQUksQ0FBQ1EsZ0JBQUVDLFFBQUYsQ0FBV0wsT0FBWCxDQUFMLEVBQTBCO0FBQ3hCRixvQkFBSUMsYUFBSixDQUFtQixzQ0FBbkI7QUFDRDs7QUFFRCxRQUFNTyxPQUFPLEdBQUcsQ0FDZCxHQUFHLEtBQUtDLEdBQUwsQ0FBU0MsVUFBVCxDQUFvQkMsV0FEVCxFQUVkLE9BRmMsRUFHZFQsT0FIYyxFQUlkLElBQUlJLGdCQUFFTSxPQUFGLENBQVVULElBQVYsSUFBa0JBLElBQWxCLEdBQXlCLENBQUNBLElBQUQsQ0FBN0IsQ0FKYyxDQUFoQjs7QUFNQUgsa0JBQUlhLEtBQUosQ0FBVyxZQUFXLEtBQUtKLEdBQUwsQ0FBU0MsVUFBVCxDQUFvQkksSUFBSyxJQUFHLHVCQUFNTixPQUFOLENBQWUsR0FBakU7O0FBQ0EsTUFBSTtBQUNGLFVBQU07QUFBQ08sTUFBQUEsTUFBRDtBQUFTQyxNQUFBQTtBQUFULFFBQW1CLE1BQU0sd0JBQUssS0FBS1AsR0FBTCxDQUFTQyxVQUFULENBQW9CSSxJQUF6QixFQUErQk4sT0FBL0IsRUFBd0M7QUFBQ0osTUFBQUE7QUFBRCxLQUF4QyxDQUEvQjs7QUFDQSxRQUFJQyxhQUFKLEVBQW1CO0FBQ2pCLGFBQU87QUFDTFUsUUFBQUEsTUFESztBQUVMQyxRQUFBQTtBQUZLLE9BQVA7QUFJRDs7QUFDRCxXQUFPRCxNQUFQO0FBQ0QsR0FURCxDQVNFLE9BQU9FLEdBQVAsRUFBWTtBQUNaakIsb0JBQUlDLGFBQUosQ0FBbUIsdUJBQXNCQyxPQUFRLG1CQUEvQixHQUNDLG1CQUFrQmUsR0FBRyxDQUFDQyxPQUFRLElBRC9CLEdBRUMsV0FBVUQsR0FBRyxDQUFDRixNQUFPLGFBQVlFLEdBQUcsQ0FBQ0QsTUFBTyxFQUYvRDtBQUdEO0FBQ0YsQ0FyQ0Q7O2VBd0NlcEIsUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBleGVjIH0gZnJvbSAndGVlbl9wcm9jZXNzJztcbmltcG9ydCB7IHF1b3RlIH0gZnJvbSAnc2hlbGwtcXVvdGUnO1xuXG5sZXQgY29tbWFuZHMgPSB7fTtcblxuY29tbWFuZHMubW9iaWxlU2hlbGwgPSBhc3luYyBmdW5jdGlvbiBtb2JpbGVTaGVsbCAob3B0cyA9IHt9KSB7XG4gIGlmICghdGhpcy5yZWxheGVkU2VjdXJpdHlFbmFibGVkKSB7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coYEFwcGl1bSBzZXJ2ZXIgbXVzdCBoYXZlIHJlbGF4ZWQgc2VjdXJpdHkgZmxhZyBzZXQgaW4gb3JkZXIgdG8gcnVuIGFueSBzaGVsbCBjb21tYW5kc2ApO1xuICB9XG5cbiAgY29uc3Qge1xuICAgIGNvbW1hbmQsXG4gICAgYXJncyA9IFtdLFxuICAgIHRpbWVvdXQgPSAyMDAwMCxcbiAgICBpbmNsdWRlU3RkZXJyLFxuICB9ID0gb3B0cztcblxuICBpZiAoIV8uaXNTdHJpbmcoY29tbWFuZCkpIHtcbiAgICBsb2cuZXJyb3JBbmRUaHJvdyhgVGhlICdjb21tYW5kJyBhcmd1bWVudCBpcyBtYW5kYXRvcnknYCk7XG4gIH1cblxuICBjb25zdCBhZGJBcmdzID0gW1xuICAgIC4uLnRoaXMuYWRiLmV4ZWN1dGFibGUuZGVmYXVsdEFyZ3MsXG4gICAgJ3NoZWxsJyxcbiAgICBjb21tYW5kLFxuICAgIC4uLihfLmlzQXJyYXkoYXJncykgPyBhcmdzIDogW2FyZ3NdKVxuICBdO1xuICBsb2cuZGVidWcoYFJ1bm5pbmcgJyR7dGhpcy5hZGIuZXhlY3V0YWJsZS5wYXRofSAke3F1b3RlKGFkYkFyZ3MpfSdgKTtcbiAgdHJ5IHtcbiAgICBjb25zdCB7c3Rkb3V0LCBzdGRlcnJ9ID0gYXdhaXQgZXhlYyh0aGlzLmFkYi5leGVjdXRhYmxlLnBhdGgsIGFkYkFyZ3MsIHt0aW1lb3V0fSk7XG4gICAgaWYgKGluY2x1ZGVTdGRlcnIpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0ZG91dCxcbiAgICAgICAgc3RkZXJyXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gc3Rkb3V0O1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBsb2cuZXJyb3JBbmRUaHJvdyhgQ2Fubm90IGV4ZWN1dGUgdGhlICcke2NvbW1hbmR9JyBzaGVsbCBjb21tYW5kLiBgICtcbiAgICAgICAgICAgICAgICAgICAgICBgT3JpZ2luYWwgZXJyb3I6ICR7ZXJyLm1lc3NhZ2V9LiBgICtcbiAgICAgICAgICAgICAgICAgICAgICBgU3RkT3V0OiAke2Vyci5zdGRvdXR9LiBTdGRFcnI6ICR7ZXJyLnN0ZGVycn1gKTtcbiAgfVxufTtcblxuZXhwb3J0IHsgY29tbWFuZHMgfTtcbmV4cG9ydCBkZWZhdWx0IGNvbW1hbmRzO1xuIl0sImZpbGUiOiJsaWIvY29tbWFuZHMvc2hlbGwuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
