"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

require("source-map-support/register");

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("../logger"));

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

async function unlinkFile(file) {
  if (await _appiumSupport.fs.exists(file)) {
    await _appiumSupport.fs.unlink(file);
  }
}

commands.endCoverage = async function endCoverage(intentToBroadcast, ecOnDevicePath) {
  let localFile = _appiumSupport.tempDir.path({
    prefix: 'appium',
    suffix: '.ec'
  });

  await unlinkFile(localFile);
  let b64data = '';

  try {
    await this.adb.rimraf(ecOnDevicePath);
    await this.adb.broadcastProcessEnd(intentToBroadcast, this.appProcess);
    await this.adb.pull(ecOnDevicePath, localFile);
    let data = await _appiumSupport.fs.readFile(localFile);
    b64data = Buffer.from(data).toString('base64');
    await unlinkFile(localFile);
  } catch (err) {
    _logger.default.debug(`Error ending test coverage: ${err.message}`);
  }

  return b64data;
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9jb3ZlcmFnZS5qcyJdLCJuYW1lcyI6WyJjb21tYW5kcyIsImhlbHBlcnMiLCJleHRlbnNpb25zIiwidW5saW5rRmlsZSIsImZpbGUiLCJmcyIsImV4aXN0cyIsInVubGluayIsImVuZENvdmVyYWdlIiwiaW50ZW50VG9Ccm9hZGNhc3QiLCJlY09uRGV2aWNlUGF0aCIsImxvY2FsRmlsZSIsInRlbXBEaXIiLCJwYXRoIiwicHJlZml4Iiwic3VmZml4IiwiYjY0ZGF0YSIsImFkYiIsInJpbXJhZiIsImJyb2FkY2FzdFByb2Nlc3NFbmQiLCJhcHBQcm9jZXNzIiwicHVsbCIsImRhdGEiLCJyZWFkRmlsZSIsIkJ1ZmZlciIsImZyb20iLCJ0b1N0cmluZyIsImVyciIsImxvZyIsImRlYnVnIiwibWVzc2FnZSIsIk9iamVjdCIsImFzc2lnbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFHQSxJQUFJQSxRQUFRLEdBQUcsRUFBZjtBQUFBLElBQW1CQyxPQUFPLEdBQUcsRUFBN0I7QUFBQSxJQUFpQ0MsVUFBVSxHQUFHLEVBQTlDOzs7O0FBRUEsZUFBZUMsVUFBZixDQUEyQkMsSUFBM0IsRUFBaUM7QUFDL0IsTUFBSSxNQUFNQyxrQkFBR0MsTUFBSCxDQUFVRixJQUFWLENBQVYsRUFBMkI7QUFDekIsVUFBTUMsa0JBQUdFLE1BQUgsQ0FBVUgsSUFBVixDQUFOO0FBQ0Q7QUFDRjs7QUFFREosUUFBUSxDQUFDUSxXQUFULEdBQXVCLGVBQWVBLFdBQWYsQ0FBNEJDLGlCQUE1QixFQUErQ0MsY0FBL0MsRUFBK0Q7QUFDcEYsTUFBSUMsU0FBUyxHQUFHQyx1QkFBUUMsSUFBUixDQUFhO0FBQUNDLElBQUFBLE1BQU0sRUFBRSxRQUFUO0FBQW1CQyxJQUFBQSxNQUFNLEVBQUU7QUFBM0IsR0FBYixDQUFoQjs7QUFDQSxRQUFNWixVQUFVLENBQUNRLFNBQUQsQ0FBaEI7QUFFQSxNQUFJSyxPQUFPLEdBQUcsRUFBZDs7QUFDQSxNQUFJO0FBRUYsVUFBTSxLQUFLQyxHQUFMLENBQVNDLE1BQVQsQ0FBZ0JSLGNBQWhCLENBQU47QUFFQSxVQUFNLEtBQUtPLEdBQUwsQ0FBU0UsbUJBQVQsQ0FBNkJWLGlCQUE3QixFQUFnRCxLQUFLVyxVQUFyRCxDQUFOO0FBRUEsVUFBTSxLQUFLSCxHQUFMLENBQVNJLElBQVQsQ0FBY1gsY0FBZCxFQUE4QkMsU0FBOUIsQ0FBTjtBQUNBLFFBQUlXLElBQUksR0FBRyxNQUFNakIsa0JBQUdrQixRQUFILENBQVlaLFNBQVosQ0FBakI7QUFDQUssSUFBQUEsT0FBTyxHQUFHUSxNQUFNLENBQUNDLElBQVAsQ0FBWUgsSUFBWixFQUFrQkksUUFBbEIsQ0FBMkIsUUFBM0IsQ0FBVjtBQUNBLFVBQU12QixVQUFVLENBQUNRLFNBQUQsQ0FBaEI7QUFDRCxHQVZELENBVUUsT0FBT2dCLEdBQVAsRUFBWTtBQUNaQyxvQkFBSUMsS0FBSixDQUFXLCtCQUE4QkYsR0FBRyxDQUFDRyxPQUFRLEVBQXJEO0FBQ0Q7O0FBQ0QsU0FBT2QsT0FBUDtBQUNELENBbkJEOztBQXNCQWUsTUFBTSxDQUFDQyxNQUFQLENBQWM5QixVQUFkLEVBQTBCRixRQUExQixFQUFvQ0MsT0FBcEM7ZUFFZUMsVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZzLCB0ZW1wRGlyIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXInO1xuXG5cbmxldCBjb21tYW5kcyA9IHt9LCBoZWxwZXJzID0ge30sIGV4dGVuc2lvbnMgPSB7fTtcblxuYXN5bmMgZnVuY3Rpb24gdW5saW5rRmlsZSAoZmlsZSkge1xuICBpZiAoYXdhaXQgZnMuZXhpc3RzKGZpbGUpKSB7XG4gICAgYXdhaXQgZnMudW5saW5rKGZpbGUpO1xuICB9XG59XG5cbmNvbW1hbmRzLmVuZENvdmVyYWdlID0gYXN5bmMgZnVuY3Rpb24gZW5kQ292ZXJhZ2UgKGludGVudFRvQnJvYWRjYXN0LCBlY09uRGV2aWNlUGF0aCkge1xuICBsZXQgbG9jYWxGaWxlID0gdGVtcERpci5wYXRoKHtwcmVmaXg6ICdhcHBpdW0nLCBzdWZmaXg6ICcuZWMnfSk7XG4gIGF3YWl0IHVubGlua0ZpbGUobG9jYWxGaWxlKTtcblxuICBsZXQgYjY0ZGF0YSA9ICcnO1xuICB0cnkge1xuICAgIC8vIGVuc3VyZSB0aGUgZWMgd2UncmUgcHVsbGluZyBpcyBuZXdseSBjcmVhdGVkIGFzIGEgcmVzdWx0IG9mIHRoZSBpbnRlbnQuXG4gICAgYXdhaXQgdGhpcy5hZGIucmltcmFmKGVjT25EZXZpY2VQYXRoKTtcblxuICAgIGF3YWl0IHRoaXMuYWRiLmJyb2FkY2FzdFByb2Nlc3NFbmQoaW50ZW50VG9Ccm9hZGNhc3QsIHRoaXMuYXBwUHJvY2Vzcyk7XG5cbiAgICBhd2FpdCB0aGlzLmFkYi5wdWxsKGVjT25EZXZpY2VQYXRoLCBsb2NhbEZpbGUpO1xuICAgIGxldCBkYXRhID0gYXdhaXQgZnMucmVhZEZpbGUobG9jYWxGaWxlKTtcbiAgICBiNjRkYXRhID0gQnVmZmVyLmZyb20oZGF0YSkudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICAgIGF3YWl0IHVubGlua0ZpbGUobG9jYWxGaWxlKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nLmRlYnVnKGBFcnJvciBlbmRpbmcgdGVzdCBjb3ZlcmFnZTogJHtlcnIubWVzc2FnZX1gKTtcbiAgfVxuICByZXR1cm4gYjY0ZGF0YTtcbn07XG5cblxuT2JqZWN0LmFzc2lnbihleHRlbnNpb25zLCBjb21tYW5kcywgaGVscGVycyk7XG5leHBvcnQgeyBjb21tYW5kcywgaGVscGVycyB9O1xuZXhwb3J0IGRlZmF1bHQgZXh0ZW5zaW9ucztcbiJdLCJmaWxlIjoibGliL2NvbW1hbmRzL2NvdmVyYWdlLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
