"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_ADB_PORT = exports.ADB = exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _os = _interopRequireDefault(require("os"));

var _path = _interopRequireDefault(require("path"));

var _index = _interopRequireDefault(require("./tools/index.js"));

var _helpers = require("./helpers");

const DEFAULT_ADB_PORT = 5037;
exports.DEFAULT_ADB_PORT = DEFAULT_ADB_PORT;

const JAR_PATH = _path.default.resolve(_helpers.rootDir, 'jars');

const DEFAULT_OPTS = {
  sdkRoot: null,
  udid: null,
  appDeviceReadyTimeout: null,
  useKeystore: null,
  keystorePath: null,
  keystorePassword: null,
  keyAlias: null,
  keyPassword: null,
  executable: {
    path: 'adb',
    defaultArgs: []
  },
  tmpDir: _os.default.tmpdir(),
  curDeviceId: null,
  emulatorPort: null,
  logcat: null,
  binaries: {},
  instrumentProc: null,
  suppressKillServer: null,
  jars: {},
  helperJarPath: JAR_PATH,
  adbPort: DEFAULT_ADB_PORT,
  adbExecTimeout: _helpers.DEFAULT_ADB_EXEC_TIMEOUT,
  remoteAppsCacheLimit: 10,
  buildToolsVersion: null
};

class ADB {
  constructor(opts = {}) {
    if (_lodash.default.isUndefined(opts.sdkRoot)) {
      opts.sdkRoot = process.env.ANDROID_HOME || process.env.ANDROID_SDK_ROOT || '';
    }

    Object.assign(this, opts);

    _lodash.default.defaultsDeep(this, _lodash.default.cloneDeep(DEFAULT_OPTS));

    if (opts.remoteAdbHost) {
      this.executable.defaultArgs.push('-H', opts.remoteAdbHost);
    }

    if (opts.remoteAdbPort) {
      this.adbPort = opts.remoteAdbPort;
    }

    this.executable.defaultArgs.push('-P', this.adbPort);
    this.initJars();
  }

  initJars() {
    const tempJars = ['move_manifest.jar', 'sign.jar', 'appium_apk_tools.jar', 'unsign.jar', 'verify.jar'];

    for (const jarName of tempJars) {
      this.jars[jarName] = _path.default.resolve(JAR_PATH, jarName);
    }
  }

}

exports.ADB = ADB;

ADB.createADB = async function createADB(opts) {
  let adb = new ADB(opts);
  await adb.getAdbWithCorrectAdbPath();
  return adb;
};

for (const [fnName, fn] of _lodash.default.toPairs(_index.default)) {
  ADB.prototype[fnName] = fn;
}

var _default = ADB;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9hZGIuanMiXSwibmFtZXMiOlsiREVGQVVMVF9BREJfUE9SVCIsIkpBUl9QQVRIIiwicGF0aCIsInJlc29sdmUiLCJyb290RGlyIiwiREVGQVVMVF9PUFRTIiwic2RrUm9vdCIsInVkaWQiLCJhcHBEZXZpY2VSZWFkeVRpbWVvdXQiLCJ1c2VLZXlzdG9yZSIsImtleXN0b3JlUGF0aCIsImtleXN0b3JlUGFzc3dvcmQiLCJrZXlBbGlhcyIsImtleVBhc3N3b3JkIiwiZXhlY3V0YWJsZSIsImRlZmF1bHRBcmdzIiwidG1wRGlyIiwib3MiLCJ0bXBkaXIiLCJjdXJEZXZpY2VJZCIsImVtdWxhdG9yUG9ydCIsImxvZ2NhdCIsImJpbmFyaWVzIiwiaW5zdHJ1bWVudFByb2MiLCJzdXBwcmVzc0tpbGxTZXJ2ZXIiLCJqYXJzIiwiaGVscGVySmFyUGF0aCIsImFkYlBvcnQiLCJhZGJFeGVjVGltZW91dCIsIkRFRkFVTFRfQURCX0VYRUNfVElNRU9VVCIsInJlbW90ZUFwcHNDYWNoZUxpbWl0IiwiYnVpbGRUb29sc1ZlcnNpb24iLCJBREIiLCJjb25zdHJ1Y3RvciIsIm9wdHMiLCJfIiwiaXNVbmRlZmluZWQiLCJwcm9jZXNzIiwiZW52IiwiQU5EUk9JRF9IT01FIiwiQU5EUk9JRF9TREtfUk9PVCIsIk9iamVjdCIsImFzc2lnbiIsImRlZmF1bHRzRGVlcCIsImNsb25lRGVlcCIsInJlbW90ZUFkYkhvc3QiLCJwdXNoIiwicmVtb3RlQWRiUG9ydCIsImluaXRKYXJzIiwidGVtcEphcnMiLCJqYXJOYW1lIiwiY3JlYXRlQURCIiwiYWRiIiwiZ2V0QWRiV2l0aENvcnJlY3RBZGJQYXRoIiwiZm5OYW1lIiwiZm4iLCJ0b1BhaXJzIiwibWV0aG9kcyIsInByb3RvdHlwZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQSxNQUFNQSxnQkFBZ0IsR0FBRyxJQUF6Qjs7O0FBQ0EsTUFBTUMsUUFBUSxHQUFHQyxj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VjtBQUNBLFFBQU1rQixHQUFHLENBQUNDLHdCQUFKLEVBQU47QUFDQSxTQUFPRCxHQUFQO0FBQ0QsQ0FKRDs7QUFPQSxLQUFLLE1BQU0sQ0FBQ0UsTUFBRCxFQUFTQyxFQUFULENBQVgsSUFBMkJwQixnQkFBRXFCLE9BQUYsQ0FBVUMsY0FBVixDQUEzQixFQUErQztBQUM3Q3pCLEVBQUFBLEdBQUcsQ0FBQzBCLFNBQUosQ0FBY0osTUFBZCxJQUF3QkMsRUFBeEI7QUFDRDs7ZUFFY3ZCLEciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IG9zIGZyb20gJ29zJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IG1ldGhvZHMgZnJvbSAnLi90b29scy9pbmRleC5qcyc7XG5pbXBvcnQgeyByb290RGlyLCBERUZBVUxUX0FEQl9FWEVDX1RJTUVPVVQgfSBmcm9tICcuL2hlbHBlcnMnO1xuXG5jb25zdCBERUZBVUxUX0FEQl9QT1JUID0gNTAzNztcbmNvbnN0IEpBUl9QQVRIID0gcGF0aC5yZXNvbHZlKHJvb3REaXIsICdqYXJzJyk7XG5jb25zdCBERUZBVUxUX09QVFMgPSB7XG4gIHNka1Jvb3Q6IG51bGwsXG4gIHVkaWQ6IG51bGwsXG4gIGFwcERldmljZVJlYWR5VGltZW91dDogbnVsbCxcbiAgdXNlS2V5c3RvcmU6IG51bGwsXG4gIGtleXN0b3JlUGF0aDogbnVsbCxcbiAga2V5c3RvcmVQYXNzd29yZDogbnVsbCxcbiAga2V5QWxpYXM6IG51bGwsXG4gIGtleVBhc3N3b3JkOiBudWxsLFxuICBleGVjdXRhYmxlOiB7cGF0aDogJ2FkYicsIGRlZmF1bHRBcmdzOiBbXX0sXG4gIHRtcERpcjogb3MudG1wZGlyKCksXG4gIGN1ckRldmljZUlkOiBudWxsLFxuICBlbXVsYXRvclBvcnQ6IG51bGwsXG4gIGxvZ2NhdDogbnVsbCxcbiAgYmluYXJpZXM6IHt9LFxuICBpbnN0cnVtZW50UHJvYzogbnVsbCxcbiAgc3VwcHJlc3NLaWxsU2VydmVyOiBudWxsLFxuICBqYXJzOiB7fSxcbiAgaGVscGVySmFyUGF0aDogSkFSX1BBVEgsXG4gIGFkYlBvcnQ6IERFRkFVTFRfQURCX1BPUlQsXG4gIGFkYkV4ZWNUaW1lb3V0OiBERUZBVUxUX0FEQl9FWEVDX1RJTUVPVVQsXG4gIHJlbW90ZUFwcHNDYWNoZUxpbWl0OiAxMCxcbiAgYnVpbGRUb29sc1ZlcnNpb246IG51bGwsXG59O1xuXG5jbGFzcyBBREIge1xuICBjb25zdHJ1Y3RvciAob3B0cyA9IHt9KSB7XG4gICAgaWYgKF8uaXNVbmRlZmluZWQob3B0cy5zZGtSb290KSkge1xuICAgICAgb3B0cy5zZGtSb290ID0gcHJvY2Vzcy5lbnYuQU5EUk9JRF9IT01FIHx8IHByb2Nlc3MuZW52LkFORFJPSURfU0RLX1JPT1QgfHwgJyc7XG4gICAgfVxuXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBvcHRzKTtcbiAgICBfLmRlZmF1bHRzRGVlcCh0aGlzLCBfLmNsb25lRGVlcChERUZBVUxUX09QVFMpKTtcblxuICAgIGlmIChvcHRzLnJlbW90ZUFkYkhvc3QpIHtcbiAgICAgIHRoaXMuZXhlY3V0YWJsZS5kZWZhdWx0QXJncy5wdXNoKCctSCcsIG9wdHMucmVtb3RlQWRiSG9zdCk7XG4gICAgfVxuICAgIC8vIFRPRE8gZmlndXJlIG91dCB3aHkgd2UgaGF2ZSB0aGlzIG9wdGlvbiBhcyBpdCBkb2VzIG5vdCBhcHBlYXIgdG8gYmVcbiAgICAvLyB1c2VkIGFueXdoZXJlLiBQcm9iYWJseSBkZXByZWNhdGUgaW4gZmF2b3Igb2Ygc2ltcGxlIG9wdHMuYWRiUG9ydFxuICAgIGlmIChvcHRzLnJlbW90ZUFkYlBvcnQpIHtcbiAgICAgIHRoaXMuYWRiUG9ydCA9IG9wdHMucmVtb3RlQWRiUG9ydDtcbiAgICB9XG4gICAgdGhpcy5leGVjdXRhYmxlLmRlZmF1bHRBcmdzLnB1c2goJy1QJywgdGhpcy5hZGJQb3J0KTtcblxuICAgIHRoaXMuaW5pdEphcnMoKTtcbiAgfVxuXG4gIGluaXRKYXJzICgpIHtcbiAgICBjb25zdCB0ZW1wSmFycyA9IFtcbiAgICAgICdtb3ZlX21hbmlmZXN0LmphcicsICdzaWduLmphcicsICdhcHBpdW1fYXBrX3Rvb2xzLmphcicsXG4gICAgICAndW5zaWduLmphcicsICd2ZXJpZnkuamFyJyxcbiAgICBdO1xuICAgIGZvciAoY29uc3QgamFyTmFtZSBvZiB0ZW1wSmFycykge1xuICAgICAgdGhpcy5qYXJzW2phck5hbWVdID0gcGF0aC5yZXNvbHZlKEpBUl9QQVRILCBqYXJOYW1lKTtcbiAgICB9XG4gIH1cbn1cblxuQURCLmNyZWF0ZUFEQiA9IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUFEQiAob3B0cykge1xuICBsZXQgYWRiID0gbmV3IEFEQihvcHRzKTtcbiAgYXdhaXQgYWRiLmdldEFkYldpdGhDb3JyZWN0QWRiUGF0aCgpO1xuICByZXR1cm4gYWRiO1xufTtcblxuLy8gYWRkIGFsbCB0aGUgbWV0aG9kcyB0byB0aGUgQURCIHByb3RvdHlwZVxuZm9yIChjb25zdCBbZm5OYW1lLCBmbl0gb2YgXy50b1BhaXJzKG1ldGhvZHMpKSB7XG4gIEFEQi5wcm90b3R5cGVbZm5OYW1lXSA9IGZuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBBREI7XG5leHBvcnQgeyBBREIsIERFRkFVTFRfQURCX1BPUlQgfTtcbiJdLCJmaWxlIjoibGliL2FkYi5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiJ9
