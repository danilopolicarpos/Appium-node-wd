"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _teen_process = require("teen_process");

var _logger = _interopRequireDefault(require("../logger.js"));

var _helpers = require("../helpers.js");

var _appiumSupport = require("appium-support");

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _xmldom = _interopRequireDefault(require("xmldom"));

var _xpath = _interopRequireDefault(require("xpath"));

var _shellQuote = require("shell-quote");

let manifestMethods = {};

manifestMethods.processFromManifest = async function processFromManifest(localApk) {
  await this.initAapt();

  _logger.default.info('Retrieving process from manifest');

  let args = ['dump', 'xmltree', localApk, 'AndroidManifest.xml'];
  let {
    stdout
  } = await (0, _teen_process.exec)(this.binaries.aapt, args);
  let result = null;
  let lines = stdout.split('\n');
  let applicationRegex = new RegExp(/\s+E: application \(line=\d+\).*/);
  let applicationFound = false;
  let attributeRegex = new RegExp(/\s+A: .+/);
  let processRegex = new RegExp(/\s+A: android:process\(0x01010011\)="([^"]+).*"/);

  for (let line of lines) {
    if (!applicationFound) {
      if (applicationRegex.test(line)) {
        applicationFound = true;
      }
    } else {
      let notAttribute = !attributeRegex.test(line);

      if (notAttribute) {
        break;
      }

      let process = processRegex.exec(line);

      if (process && process.length > 1) {
        result = process[1];

        if (result.length > 15) {
          result = result.substr(result.length - 15);
        }

        break;
      }
    }
  }

  return result;
};

async function extractApkInfoWithApkTools(localApk, aaptPath, jarPath, tmpRoot) {
  _logger.default.info('Extracting package and launch activity from manifest');

  let args = ['dump', 'badging', localApk];
  let stdout = (await (0, _teen_process.exec)(aaptPath, args)).stdout;
  let apkPackage = new RegExp(/package: name='([^']+)'/g).exec(stdout);

  if (!apkPackage || apkPackage.length < 2) {
    throw new Error(`Cannot parse package name from ` + `'${_lodash.default.join([aaptPath, 'dump', 'badging', '"' + localApk + '"'], ' ')}' command  output`);
  }

  apkPackage = apkPackage[1];
  let apkActivity = new RegExp(/launchable-activity: name='([^']+)'/g).exec(stdout);

  if (apkActivity && apkActivity.length >= 2) {
    apkActivity = apkActivity[1];
    return {
      apkPackage,
      apkActivity
    };
  }

  let outputPath = _path.default.resolve(tmpRoot, apkPackage);

  let getLaunchActivity = ['-jar', jarPath, 'printLaunchActivity', localApk, outputPath];
  const output = await (0, _teen_process.exec)('java', getLaunchActivity);

  if (output.stderr) {
    throw new Error(`Cannot parse launchActivity from manifest: ${output.stderr}`);
  }

  stdout = output.stdout;
  let act = new RegExp(/Launch activity parsed:([^']+)/g).exec(stdout);

  if (act && act.length >= 2) {
    apkActivity = act[1];
    return {
      apkPackage,
      apkActivity
    };
  }

  throw new Error(`Cannot parse main activity name from '${stdout}' command  output`);
}

async function extractApkInfoWithApkanalyzer(localApk, apkanalyzerPath) {
  const args = ['-h', 'manifest', 'print', localApk];

  _logger.default.debug(`Starting '${apkanalyzerPath}' with args ${JSON.stringify(args)}`);

  const manifestXml = (await (0, _teen_process.exec)(apkanalyzerPath, args, {
    shell: true,
    cwd: _path.default.dirname(apkanalyzerPath)
  })).stdout;
  const doc = new _xmldom.default.DOMParser().parseFromString(manifestXml);

  const apkPackageAttribute = _xpath.default.select1('//manifest/@package', doc);

  if (!apkPackageAttribute) {
    throw new Error(`Cannot parse package name from ${manifestXml}`);
  }

  const apkPackage = apkPackageAttribute.value;

  const apkActivityAttribute = _xpath.default.select1("//application/*[starts-with(name(), 'activity') " + "and .//action[@*[local-name()='name' and .='android.intent.action.MAIN']] " + "and .//category[@*[local-name()='name' and .='android.intent.category.LAUNCHER']]]" + "/@*[local-name()='name']", doc);

  if (!apkActivityAttribute) {
    throw new Error(`Cannot parse main activity name from ${manifestXml}`);
  }

  const apkActivity = apkActivityAttribute.value;
  return {
    apkPackage,
    apkActivity
  };
}

manifestMethods.packageAndLaunchActivityFromManifest = async function packageAndLaunchActivityFromManifest(appPath) {
  if (appPath.endsWith(_helpers.APKS_EXTENSION)) {
    appPath = await this.extractBaseApk(appPath);
  }

  const apkInfoGetters = [async () => {
    const apkanalyzerPath = await (0, _helpers.getApkanalyzerForOs)(this);
    return await extractApkInfoWithApkanalyzer(appPath, apkanalyzerPath);
  }, async () => {
    await this.initAapt();
    return await extractApkInfoWithApkTools(appPath, this.binaries.aapt, this.jars['appium_apk_tools.jar'], this.tmpDir);
  }];
  let savedError;

  for (const infoGetter of apkInfoGetters) {
    try {
      const {
        apkPackage,
        apkActivity
      } = await infoGetter();

      _logger.default.info(`Package name: '${apkPackage}'`);

      _logger.default.info(`Main activity name: '${apkActivity}'`);

      return {
        apkPackage,
        apkActivity
      };
    } catch (e) {
      if (infoGetter !== _lodash.default.last(apkInfoGetters)) {
        _logger.default.info(`Using the alternative activity name detection method because of: ${e.message}`);
      }

      savedError = e;
    }
  }

  throw new Error(`packageAndLaunchActivityFromManifest failed. Original error: ${savedError.message}` + (savedError.stderr ? `; StdErr: ${savedError.stderr}` : ''));
};

manifestMethods.targetSdkVersionFromManifest = async function targetSdkVersionFromManifest(appPath) {
  await this.initAapt();

  if (appPath.endsWith(_helpers.APKS_EXTENSION)) {
    appPath = await this.extractBaseApk(appPath);
  }

  _logger.default.info('Extracting package and launch activity from manifest');

  let args = ['dump', 'badging', appPath];
  let output;

  try {
    let {
      stdout
    } = await (0, _teen_process.exec)(this.binaries.aapt, args);
    output = stdout;
  } catch (e) {
    throw new Error(`fetching targetSdkVersion from local APK failed. Original error: ${e.message}`);
  }

  let targetSdkVersion = new RegExp(/targetSdkVersion:'([^']+)'/g).exec(output);

  if (!targetSdkVersion) {
    throw new Error(`targetSdkVersion is not specified in the application.`);
  }

  return parseInt(targetSdkVersion[1], 10);
};

manifestMethods.targetSdkVersionUsingPKG = async function targetSdkVersionUsingPKG(pkg, cmdOutput = null) {
  let stdout = cmdOutput || (await this.shell(['dumpsys', 'package', pkg]));
  let targetSdkVersion = new RegExp(/targetSdk=([^\s\s]+)/g).exec(stdout);

  if (targetSdkVersion && targetSdkVersion.length >= 2) {
    targetSdkVersion = targetSdkVersion[1];
  } else {
    targetSdkVersion = 0;
  }

  return parseInt(targetSdkVersion, 10);
};

manifestMethods.compileManifest = async function compileManifest(manifest, manifestPackage, targetPackage) {
  const {
    platform,
    platformPath
  } = await (0, _helpers.getAndroidPlatformAndPath)();

  if (!platform) {
    throw new Error('Cannot compile the manifest. The required platform does not exist (API level >= 17)');
  }

  const resultPath = `${manifest}.apk`;
  const args = ['package', '-M', manifest, '--rename-manifest-package', manifestPackage, '--rename-instrumentation-target-package', targetPackage, '-I', _path.default.resolve(platformPath, 'android.jar'), '-F', resultPath, '-f'];

  try {
    await this.initAapt();

    _logger.default.debug(`Compiling the manifest: ${this.binaries.aapt} ${(0, _shellQuote.quote)(args)}`);

    await (0, _teen_process.exec)(this.binaries.aapt, args);

    _logger.default.debug(`Compiled the manifest at '${resultPath}'`);
  } catch (err) {
    throw new Error(`Cannot compile the manifest. Original error: ${err.message}`);
  }
};

manifestMethods.insertManifest = async function insertManifest(manifest, srcApk, dstApk) {
  _logger.default.debug(`Inserting manifest, src: ${srcApk} dst: ${dstApk}`);

  await this.initAapt();
  await (0, _helpers.unzipFile)(`${manifest}.apk`);
  await _appiumSupport.fs.copyFile(srcApk, dstApk);

  _logger.default.debug('Testing new tmp apk');

  await _appiumSupport.zip.assertValidZip(dstApk);

  _logger.default.debug('Moving manifest');

  try {
    await (0, _teen_process.exec)(this.binaries.aapt, ['remove', dstApk, _path.default.basename(manifest)]);
  } catch (ign) {}

  await (0, _teen_process.exec)(this.binaries.aapt, ['add', dstApk, _path.default.basename(manifest)], {
    cwd: _path.default.dirname(manifest)
  });

  _logger.default.debug('Inserted manifest.');
};

manifestMethods.hasInternetPermissionFromManifest = async function hasInternetPermissionFromManifest(appPath) {
  await this.initAapt();

  if (appPath.endsWith(_helpers.APKS_EXTENSION)) {
    appPath = await this.extractBaseApk(appPath);
  }

  _logger.default.debug(`Checking if '${appPath}' requires internet access permission in the manifest`);

  try {
    let {
      stdout
    } = await (0, _teen_process.exec)(this.binaries.aapt, ['dump', 'badging', appPath]);
    return new RegExp(/uses-permission:.*'android.permission.INTERNET'/).test(stdout);
  } catch (e) {
    throw new Error(`Cannot check if '${appPath}' requires internet access permission. ` + `Original error: ${e.message}`);
  }
};

manifestMethods.printManifestFromApk = async function printManifestFromApk(appPath, logLevel = 'debug') {
  await this.initAapt();

  if (appPath.endsWith(_helpers.APKS_EXTENSION)) {
    appPath = await this.extractBaseApk(appPath);
  }

  _logger.default[logLevel](`Extracting the manifest from '${appPath}'`);

  let out = false;
  const {
    stdout
  } = await (0, _teen_process.exec)(this.binaries.aapt, ['l', '-a', appPath]);

  for (const line of stdout.split('\n')) {
    if (!out && line.includes('Android manifest:')) {
      out = true;
    }

    if (out) {
      _logger.default[logLevel](line);
    }
  }
};

var _default = manifestMethods;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
