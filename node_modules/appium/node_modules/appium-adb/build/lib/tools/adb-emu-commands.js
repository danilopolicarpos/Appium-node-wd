"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("../logger.js"));

var _lodash = _interopRequireDefault(require("lodash"));

const PHONE_NUMBER_PATTERN = /^[+]?[(]?[0-9]*[)]?[-\s.]?[0-9]*[-\s.]?[0-9]{2,}$/im;
let emuMethods = {};
emuMethods.POWER_AC_STATES = {
  POWER_AC_ON: 'on',
  POWER_AC_OFF: 'off'
};
emuMethods.GSM_CALL_ACTIONS = {
  GSM_CALL: 'call',
  GSM_ACCEPT: 'accept',
  GSM_CANCEL: 'cancel',
  GSM_HOLD: 'hold'
};
emuMethods.GSM_VOICE_STATES = {
  GSM_VOICE_UNREGISTERED: 'unregistered',
  GSM_VOICE_HOME: 'home',
  GSM_VOICE_ROAMING: 'roaming',
  GSM_VOICE_SEARCHING: 'searching',
  GSM_VOICE_DENIED: 'denied',
  GSM_VOICE_OFF: 'off',
  GSM_VOICE_ON: 'on'
};
emuMethods.GSM_SIGNAL_STRENGTHS = [0, 1, 2, 3, 4];
emuMethods.NETWORK_SPEED = {
  GSM: 'gsm',
  SCSD: 'scsd',
  GPRS: 'gprs',
  EDGE: 'edge',
  UMTS: 'umts',
  HSDPA: 'hsdpa',
  LTE: 'lte',
  EVDO: 'evdo',
  FULL: 'full'
};

emuMethods.isEmulatorConnected = async function isEmulatorConnected() {
  let emulators = await this.getConnectedEmulators();
  return !!_lodash.default.find(emulators, x => x && x.udid === this.curDeviceId);
};

emuMethods.verifyEmulatorConnected = async function verifyEmulatorConnected() {
  if (!(await this.isEmulatorConnected())) {
    throw new Error(`The emulator "${this.curDeviceId}" was unexpectedly disconnected`);
  }
};

emuMethods.fingerprint = async function fingerprint(fingerprintId) {
  if (!fingerprintId) {
    throw new Error('Fingerprint id parameter must be defined');
  }

  let level = await this.getApiLevel();

  if (level < 23) {
    throw new Error(`Device API Level must be >= 23. Current Api level '${level}'`);
  }

  await this.adbExecEmu(['finger', 'touch', fingerprintId]);
};

emuMethods.rotate = async function rotate() {
  await this.adbExecEmu(['rotate']);
};

emuMethods.powerAC = async function powerAC(state = 'on') {
  if (_lodash.default.values(emuMethods.POWER_AC_STATES).indexOf(state) === -1) {
    throw new Error(`Wrong power AC state sent '${state}'. Supported values: ${_lodash.default.values(emuMethods.POWER_AC_STATES)}]`);
  }

  await this.adbExecEmu(['power', 'ac', state]);
};

emuMethods.powerCapacity = async function powerCapacity(percent = 100) {
  percent = parseInt(percent, 10);

  if (isNaN(percent) || percent < 0 || percent > 100) {
    throw new Error(`The percentage value should be valid integer between 0 and 100`);
  }

  await this.adbExecEmu(['power', 'capacity', percent]);
};

emuMethods.powerOFF = async function powerOFF() {
  await this.powerAC(emuMethods.POWER_AC_STATES.POWER_AC_OFF);
  await this.powerCapacity(0);
};

emuMethods.sendSMS = async function sendSMS(phoneNumber, message = '') {
  message = message.trim();

  if (message === '') {
    throw new Error('Sending an SMS requires a message');
  }

  phoneNumber = `${phoneNumber}`.replace(/\s*/, '');

  if (!PHONE_NUMBER_PATTERN.test(phoneNumber)) {
    throw new Error(`Invalid sendSMS phoneNumber param ${phoneNumber}`);
  }

  await this.adbExecEmu(['sms', 'send', phoneNumber, message]);
};

emuMethods.gsmCall = async function gsmCall(phoneNumber, action = '') {
  if (_lodash.default.values(emuMethods.GSM_CALL_ACTIONS).indexOf(action) === -1) {
    throw new Error(`Invalid gsm action param ${action}. Supported values: ${_lodash.default.values(emuMethods.GSM_CALL_ACTIONS)}`);
  }

  phoneNumber = `${phoneNumber}`.replace(/\s*/, '');

  if (!PHONE_NUMBER_PATTERN.test(phoneNumber)) {
    throw new Error(`Invalid gsmCall phoneNumber param ${phoneNumber}`);
  }

  await this.adbExecEmu(['gsm', action, phoneNumber]);
};

emuMethods.gsmSignal = async function gsmSignal(strength = 4) {
  strength = parseInt(strength, 10);

  if (emuMethods.GSM_SIGNAL_STRENGTHS.indexOf(strength) === -1) {
    throw new Error(`Invalid signal strength param ${strength}. Supported values: ${_lodash.default.values(emuMethods.GSM_SIGNAL_STRENGTHS)}`);
  }

  _logger.default.info('gsm signal-profile <strength> changes the reported strength on next (15s) update.');

  await this.adbExecEmu(['gsm', 'signal-profile', strength]);
};

emuMethods.gsmVoice = async function gsmVoice(state = 'on') {
  if (_lodash.default.values(emuMethods.GSM_VOICE_STATES).indexOf(state) === -1) {
    throw new Error(`Invalid gsm voice state param ${state}. Supported values: ${_lodash.default.values(emuMethods.GSM_VOICE_STATES)}`);
  }

  await this.adbExecEmu(['gsm', 'voice', state]);
};

emuMethods.networkSpeed = async function networkSpeed(speed = 'full') {
  if (_lodash.default.values(emuMethods.NETWORK_SPEED).indexOf(speed) === -1) {
    throw new Error(`Invalid network speed param ${speed}. Supported values: ${_lodash.default.values(emuMethods.NETWORK_SPEED)}`);
  }

  await this.adbExecEmu(['network', 'speed', speed]);
};

var _default = emuMethods;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
