"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FakeElement = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _lodash = _interopRequireDefault(require("lodash"));

var _xmldom = _interopRequireDefault(require("xmldom"));

class FakeElement {
  constructor(xmlNode, app) {
    this.app = app;
    this.node = xmlNode;
    this.nodeAttrs = {};
    this.type = this.node.tagName;
    this.attrs = {};
    this.css = {};
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = _lodash.default.values(this.node.attributes)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        let _step$value = _step.value,
            name = _step$value.name,
            value = _step$value.value;
        this.nodeAttrs[name] = value;
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    this.parseCss();
  }

  parseCss() {
    if (this.nodeAttrs.style) {
      let segments = this.nodeAttrs.style.split(";");
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = segments[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          let s = _step2.value;

          let _s$split = s.split(":"),
              _s$split2 = (0, _slicedToArray2.default)(_s$split, 2),
              prop = _s$split2[0],
              val = _s$split2[1];

          prop = prop.trim();
          val = val.trim();
          this.css[prop] = val;
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }
  }

  get tagName() {
    return this.node.tagName;
  }

  setAttr(k, v) {
    this.attrs[k] = v;
  }

  getAttr(k) {
    return this.attrs[k] || "";
  }

  isVisible() {
    return this.nodeAttrs.visible !== "false";
  }

  isEnabled() {
    return this.nodeAttrs.enabled !== "false";
  }

  isSelected() {
    return this.nodeAttrs.selected === "true";
  }

  getLocation() {
    return {
      x: parseFloat(this.nodeAttrs.left || 0),
      y: parseFloat(this.nodeAttrs.top || 0)
    };
  }

  getSize() {
    return {
      width: parseFloat(this.nodeAttrs.width || 0),
      height: parseFloat(this.nodeAttrs.height || 0)
    };
  }

  click() {
    let curClicks = this.getAttr('clicks') || 0;
    this.setAttr('clicks', curClicks + 1);
    let alertId = this.nodeAttrs.showAlert;

    if (alertId) {
      this.app.showAlert(alertId);
    }
  }

  equals(other) {
    return this.node === other.node;
  }

  hasPrompt() {
    return this.nodeAttrs.hasPrompt === "true";
  }

  getCss(prop) {
    if (_lodash.default.has(this.css, prop)) {
      return this.css[prop];
    }

    return null;
  }

  get xmlFragment() {
    let frag = new _xmldom.default.XMLSerializer().serializeToString(this.node);
    return new _xmldom.default.DOMParser().parseFromString(frag, "application/xml");
  }

}

exports.FakeElement = FakeElement;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9mYWtlLWVsZW1lbnQuanMiXSwibmFtZXMiOlsiRmFrZUVsZW1lbnQiLCJjb25zdHJ1Y3RvciIsInhtbE5vZGUiLCJhcHAiLCJub2RlIiwibm9kZUF0dHJzIiwidHlwZSIsInRhZ05hbWUiLCJhdHRycyIsImNzcyIsIl8iLCJ2YWx1ZXMiLCJhdHRyaWJ1dGVzIiwibmFtZSIsInZhbHVlIiwicGFyc2VDc3MiLCJzdHlsZSIsInNlZ21lbnRzIiwic3BsaXQiLCJzIiwicHJvcCIsInZhbCIsInRyaW0iLCJzZXRBdHRyIiwiayIsInYiLCJnZXRBdHRyIiwiaXNWaXNpYmxlIiwidmlzaWJsZSIsImlzRW5hYmxlZCIsImVuYWJsZWQiLCJpc1NlbGVjdGVkIiwic2VsZWN0ZWQiLCJnZXRMb2NhdGlvbiIsIngiLCJwYXJzZUZsb2F0IiwibGVmdCIsInkiLCJ0b3AiLCJnZXRTaXplIiwid2lkdGgiLCJoZWlnaHQiLCJjbGljayIsImN1ckNsaWNrcyIsImFsZXJ0SWQiLCJzaG93QWxlcnQiLCJlcXVhbHMiLCJvdGhlciIsImhhc1Byb21wdCIsImdldENzcyIsImhhcyIsInhtbEZyYWdtZW50IiwiZnJhZyIsIlhNTERvbSIsIlhNTFNlcmlhbGl6ZXIiLCJzZXJpYWxpemVUb1N0cmluZyIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFFQSxNQUFNQSxXQUFOLENBQWtCO0FBQ2hCQyxFQUFBQSxXQUFXLENBQUVDLE9BQUYsRUFBV0MsR0FBWCxFQUFnQjtBQUN6QixTQUFLQSxHQUFMLEdBQVdBLEdBQVg7QUFDQSxTQUFLQyxJQUFMLEdBQVlGLE9BQVo7QUFDQSxTQUFLRyxTQUFMLEdBQWlCLEVBQWpCO0FBQ0EsU0FBS0MsSUFBTCxHQUFZLEtBQUtGLElBQUwsQ0FBVUcsT0FBdEI7QUFDQSxTQUFLQyxLQUFMLEdBQWEsRUFBYjtBQUNBLFNBQUtDLEdBQUwsR0FBVyxFQUFYO0FBTnlCO0FBQUE7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O0FBQ0EsUUFBSUQsT0FBSixFQUFhO0FBQ1gsV0FBS3pDLEdBQUwsQ0FBUzBDLFNBQVQsQ0FBbUJELE9BQW5CO0FBQ0Q7QUFDRjs7QUFFREUsRUFBQUEsTUFBTSxDQUFFQyxLQUFGLEVBQVM7QUFDYixXQUFPLEtBQUszQyxJQUFMLEtBQWMyQyxLQUFLLENBQUMzQyxJQUEzQjtBQUNEOztBQUVENEMsRUFBQUEsU0FBUyxHQUFJO0FBQ1gsV0FBTyxLQUFLM0MsU0FBTCxDQUFlMkMsU0FBZixLQUE2QixNQUFwQztBQUNEOztBQUVEQyxFQUFBQSxNQUFNLENBQUU3QixJQUFGLEVBQVE7QUFDWixRQUFJVixnQkFBRXdDLEdBQUYsQ0FBTSxLQUFLekMsR0FBWCxFQUFnQlcsSUFBaEIsQ0FBSixFQUEyQjtBQUN6QixhQUFPLEtBQUtYLEdBQUwsQ0FBU1csSUFBVCxDQUFQO0FBQ0Q7O0FBQ0QsV0FBTyxJQUFQO0FBQ0Q7O0FBRUQsTUFBSStCLFdBQUosR0FBbUI7QUFDakIsUUFBSUMsSUFBSSxHQUFHLElBQUlDLGdCQUFPQyxhQUFYLEdBQTJCQyxpQkFBM0IsQ0FBNkMsS0FBS25ELElBQWxELENBQVg7QUFDQSxXQUFPLElBQUlpRCxnQkFBT0csU0FBWCxHQUF1QkMsZUFBdkIsQ0FBdUNMLElBQXZDLEVBQTZDLGlCQUE3QyxDQUFQO0FBQ0Q7O0FBM0ZlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBYTUxEb20gZnJvbSAneG1sZG9tJztcblxuY2xhc3MgRmFrZUVsZW1lbnQge1xuICBjb25zdHJ1Y3RvciAoeG1sTm9kZSwgYXBwKSB7XG4gICAgdGhpcy5hcHAgPSBhcHA7XG4gICAgdGhpcy5ub2RlID0geG1sTm9kZTtcbiAgICB0aGlzLm5vZGVBdHRycyA9IHt9O1xuICAgIHRoaXMudHlwZSA9IHRoaXMubm9kZS50YWdOYW1lO1xuICAgIHRoaXMuYXR0cnMgPSB7fTtcbiAgICB0aGlzLmNzcyA9IHt9O1xuICAgIGZvciAobGV0IHtuYW1lLCB2YWx1ZX0gb2YgXy52YWx1ZXModGhpcy5ub2RlLmF0dHJpYnV0ZXMpKSB7XG4gICAgICB0aGlzLm5vZGVBdHRyc1tuYW1lXSA9IHZhbHVlO1xuICAgIH1cbiAgICB0aGlzLnBhcnNlQ3NzKCk7XG4gIH1cblxuICBwYXJzZUNzcyAoKSB7XG4gICAgaWYgKHRoaXMubm9kZUF0dHJzLnN0eWxlKSB7XG4gICAgICBsZXQgc2VnbWVudHMgPSB0aGlzLm5vZGVBdHRycy5zdHlsZS5zcGxpdChcIjtcIik7XG4gICAgICBmb3IgKGxldCBzIG9mIHNlZ21lbnRzKSB7XG4gICAgICAgIGxldCBbcHJvcCwgdmFsXSA9IHMuc3BsaXQoXCI6XCIpO1xuICAgICAgICBwcm9wID0gcHJvcC50cmltKCk7XG4gICAgICAgIHZhbCA9IHZhbC50cmltKCk7XG4gICAgICAgIHRoaXMuY3NzW3Byb3BdID0gdmFsO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGdldCB0YWdOYW1lICgpIHtcbiAgICByZXR1cm4gdGhpcy5ub2RlLnRhZ05hbWU7XG4gIH1cblxuICBzZXRBdHRyIChrLCB2KSB7XG4gICAgdGhpcy5hdHRyc1trXSA9IHY7XG4gIH1cblxuICBnZXRBdHRyIChrKSB7XG4gICAgcmV0dXJuIHRoaXMuYXR0cnNba10gfHwgXCJcIjtcbiAgfVxuXG4gIGlzVmlzaWJsZSAoKSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZUF0dHJzLnZpc2libGUgIT09IFwiZmFsc2VcIjtcbiAgfVxuXG4gIGlzRW5hYmxlZCAoKSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZUF0dHJzLmVuYWJsZWQgIT09IFwiZmFsc2VcIjtcbiAgfVxuXG4gIGlzU2VsZWN0ZWQgKCkge1xuICAgIHJldHVybiB0aGlzLm5vZGVBdHRycy5zZWxlY3RlZCA9PT0gXCJ0cnVlXCI7XG4gIH1cblxuICBnZXRMb2NhdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IHBhcnNlRmxvYXQodGhpcy5ub2RlQXR0cnMubGVmdCB8fCAwKSxcbiAgICAgIHk6IHBhcnNlRmxvYXQodGhpcy5ub2RlQXR0cnMudG9wIHx8IDApXG4gICAgfTtcbiAgfVxuXG4gIGdldFNpemUgKCkge1xuICAgIHJldHVybiB7XG4gICAgICB3aWR0aDogcGFyc2VGbG9hdCh0aGlzLm5vZGVBdHRycy53aWR0aCB8fCAwKSxcbiAgICAgIGhlaWdodDogcGFyc2VGbG9hdCh0aGlzLm5vZGVBdHRycy5oZWlnaHQgfHwgMClcbiAgICB9O1xuICB9XG5cbiAgY2xpY2sgKCkge1xuICAgIGxldCBjdXJDbGlja3MgPSB0aGlzLmdldEF0dHIoJ2NsaWNrcycpIHx8IDA7XG4gICAgdGhpcy5zZXRBdHRyKCdjbGlja3MnLCBjdXJDbGlja3MgKyAxKTtcbiAgICBsZXQgYWxlcnRJZCA9IHRoaXMubm9kZUF0dHJzLnNob3dBbGVydDtcbiAgICBpZiAoYWxlcnRJZCkge1xuICAgICAgdGhpcy5hcHAuc2hvd0FsZXJ0KGFsZXJ0SWQpO1xuICAgIH1cbiAgfVxuXG4gIGVxdWFscyAob3RoZXIpIHtcbiAgICByZXR1cm4gdGhpcy5ub2RlID09PSBvdGhlci5ub2RlO1xuICB9XG5cbiAgaGFzUHJvbXB0ICgpIHtcbiAgICByZXR1cm4gdGhpcy5ub2RlQXR0cnMuaGFzUHJvbXB0ID09PSBcInRydWVcIjtcbiAgfVxuXG4gIGdldENzcyAocHJvcCkge1xuICAgIGlmIChfLmhhcyh0aGlzLmNzcywgcHJvcCkpIHtcbiAgICAgIHJldHVybiB0aGlzLmNzc1twcm9wXTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBnZXQgeG1sRnJhZ21lbnQgKCkge1xuICAgIGxldCBmcmFnID0gbmV3IFhNTERvbS5YTUxTZXJpYWxpemVyKCkuc2VyaWFsaXplVG9TdHJpbmcodGhpcy5ub2RlKTtcbiAgICByZXR1cm4gbmV3IFhNTERvbS5ET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcoZnJhZywgXCJhcHBsaWNhdGlvbi94bWxcIik7XG4gIH1cblxufVxuXG5leHBvcnQgeyBGYWtlRWxlbWVudCB9O1xuIl0sImZpbGUiOiJsaWIvZmFrZS1lbGVtZW50LmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIn0=
