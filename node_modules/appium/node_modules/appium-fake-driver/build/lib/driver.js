"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FakeDriver = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumBaseDriver = require("appium-base-driver");

var _fakeApp = require("./fake-app");

var _commands = _interopRequireDefault(require("./commands"));

class FakeDriver extends _appiumBaseDriver.BaseDriver {
  constructor() {
    super();
    this.appModel = null;
    this.curContext = 'NATIVE_APP';
    this.elMap = {};
    this.focusedElId = null;
    this.maxElId = 0;
    this.caps = {};
    this.desiredCapConstraints = {
      app: {
        presence: true,
        isString: true
      }
    };
  }

  createSession(desiredCaps, requiredCaps, capabilities, otherSessionData = []) {
    var _this = this,
        _superprop_callCreateSession = (..._args) => super.createSession(..._args);

    return (0, _asyncToGenerator2.default)(function* () {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = otherSessionData[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          let d = _step.value;

          if (d.isUnique) {
            throw new _appiumBaseDriver.errors.SessionNotCreatedError("Cannot start session; another " + "unique session is in progress that requires all resources");
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      let _ref = yield _superprop_callCreateSession(desiredCaps, requiredCaps, capabilities, otherSessionData),
          _ref2 = (0, _slicedToArray2.default)(_ref, 2),
          sessionId = _ref2[0],
          caps = _ref2[1];

      _this.appModel = new _fakeApp.FakeApp();

      if (_lodash.default.isArray(caps) === true && caps.length === 1) {
        caps = caps[0];
      }

      _this.caps = caps;
      yield _this.appModel.loadApp(caps.app);
      return [sessionId, caps];
    })();
  }

  get driverData() {
    return {
      isUnique: !!this.caps.uniqueApp
    };
  }

}

exports.FakeDriver = FakeDriver;
var _iteratorNormalCompletion2 = true;
var _didIteratorError2 = false;
var _iteratorError2 = undefined;

try {
  for (var _iterator2 = _lodash.default.toPairs(_commands.default)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
    let _step2$value = (0, _slicedToArray2.default)(_step2.value, 2),
        cmd = _step2$value[0],
        fn = _step2$value[1];

    FakeDriver.prototype[cmd] = fn;
  }
} catch (err) {
  _didIteratorError2 = true;
  _iteratorError2 = err;
} finally {
  try {
    if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
      _iterator2.return();
    }
  } finally {
    if (_didIteratorError2) {
      throw _iteratorError2;
    }
  }
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9kcml2ZXIuanMiXSwibmFtZXMiOlsiRmFrZURyaXZlciIsIkJhc2VEcml2ZXIiLCJjb25zdHJ1Y3RvciIsImFwcE1vZGVsIiwiY3VyQ29udGV4dCIsImVsTWFwIiwiZm9jdXNlZEVsSWQiLCJtYXhFbElkIiwiY2FwcyIsImRlc2lyZWRDYXBDb25zdHJhaW50cyIsImFwcCIsInByZXNlbmNlIiwiaXNTdHJpbmciLCJjcmVhdGVTZXNzaW9uIiwiZGVzaXJlZENhcHMiLCJyZXF1aXJlZENhcHMiLCJjYXBhYmlsaXRpZXMiLCJvdGhlclNlc3Npb25EYXRhIiwiZCIsImlzVW5pcXVlIiwiZXJyb3JzIiwiU2Vzc2lvbk5vdENyZWF0ZWRFcnJvciIsInNlc3Npb25JZCIsIkZha2VBcHAiLCJfIiwiaXNBcnJheSIsImxlbmd0aCIsImxvYWRBcHAiLCJkcml2ZXJEYXRhIiwidW5pcXVlQXBwIiwidG9QYWlycyIsImNvbW1hbmRzIiwiY21kIiwiZm4iLCJwcm90b3R5cGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQSxNQUFNQSxVQUFOLFNBQXlCQyw0QkFBekIsQ0FBb0M7QUFFbENDLEVBQUFBLFdBQVcsR0FBSTtBQUNiO0FBQ0EsU0FBS0MsUUFBTCxHQUFnQixJQUFoQjtBQUNBLFNBQUtDLFVBQUwsR0FBa0IsWUFBbEI7QUFDQSxTQUFLQyxLQUFMLEdBQWEsRUFBYjtBQUNBLFNBQUtDLFdBQUwsR0FBbUIsSUFBbkI7QUFDQSxTQUFLQyxPQUFMLEdBQWUsQ0FBZjtBQUNBLFNBQUtDLElBQUwsR0FBWSxFQUFaO0FBRUEsU0FBS0MscUJBQUwsR0FBNkI7QUFDM0JDLE1BQUFBLEdBQUcsRUFBRTtBQUNIQyxRQUFBQSxRQUFRLEVBQUUsSUFEUDtBQUVIQyxRQUFBQSxRQUFRLEVBQUU7QUFGUDtBQURzQixLQUE3QjtBQU1EOztBQUVLQyxFQUFBQSxhQUFOLENBQXFCQyxXQUFyQixFQUFrQ0MsWUFBbEMsRUFBZ0RDLFlBQWhELEVBQThEQyxnQkFBZ0IsR0FBRyxFQUFqRixFQUFxRjtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFPbkYsNkJBQWNBLGdCQUFkLDhIQUFnQztBQUFBLGNBQXZCQyxDQUF1Qjs7QUFDOUIsY0FBSUEsQ0FBQyxDQUFDQyxRQUFOLEVBQWdCO0FBQ2Qsa0JBQU0sSUFBSUMseUJBQU9DLHNCQUFYLENBQWtDLG1DQUNwQywyREFERSxDQUFOO0FBRUQ7QUFDRjtBQVprRjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBLHVCQWNyRCw2QkFBb0JQLFdBQXBCLEVBQWlDQyxZQUFqQyxFQUErQ0MsWUFBL0MsRUFBNkRDLGdCQUE3RCxDQWRxRDtBQUFBO0FBQUEsVUFjOUVLLFNBZDhFO0FBQUEsVUFjbkVkLElBZG1FOztBQWVuRixNQUFBLEtBQUksQ0FBQ0wsUUFBTCxHQUFnQixJQUFJb0IsZ0JBQUosRUFBaEI7O0FBQ0EsVUFBSUMsZ0JBQUVDLE9BQUYsQ0FBVWpCLElBQVYsTUFBb0IsSUFBcEIsSUFBNEJBLElBQUksQ0FBQ2tCLE1BQUwsS0FBZ0IsQ0FBaEQsRUFBbUQ7QUFDakRsQixRQUFBQSxJQUFJLEdBQUdBLElBQUksQ0FBQyxDQUFELENBQVg7QUFDRDs7QUFDRCxNQUFBLEtBQUksQ0FBQ0EsSUFBTCxHQUFZQSxJQUFaO0FBQ0EsWUFBTSxLQUFJLENBQUNMLFFBQUwsQ0FBY3dCLE9BQWQsQ0FBc0JuQixJQUFJLENBQUNFLEdBQTNCLENBQU47QUFDQSxhQUFPLENBQUNZLFNBQUQsRUFBWWQsSUFBWixDQUFQO0FBckJtRjtBQXNCcEY7O0FBRUQsTUFBSW9CLFVBQUosR0FBa0I7QUFDaEIsV0FBTztBQUNMVCxNQUFBQSxRQUFRLEVBQUUsQ0FBQyxDQUFDLEtBQUtYLElBQUwsQ0FBVXFCO0FBRGpCLEtBQVA7QUFHRDs7QUEvQ2lDOzs7Ozs7OztBQWtEcEMsd0JBQXNCTCxnQkFBRU0sT0FBRixDQUFVQyxpQkFBVixDQUF0QixtSUFBMkM7QUFBQTtBQUFBLFFBQWpDQyxHQUFpQztBQUFBLFFBQTVCQyxFQUE0Qjs7QUFDekNqQyxJQUFBQSxVQUFVLENBQUNrQyxTQUFYLENBQXFCRixHQUFyQixJQUE0QkMsRUFBNUI7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBCYXNlRHJpdmVyLCBlcnJvcnMgfSBmcm9tICdhcHBpdW0tYmFzZS1kcml2ZXInO1xuaW1wb3J0IHsgRmFrZUFwcCB9IGZyb20gJy4vZmFrZS1hcHAnO1xuaW1wb3J0IGNvbW1hbmRzIGZyb20gJy4vY29tbWFuZHMnO1xuXG5jbGFzcyBGYWtlRHJpdmVyIGV4dGVuZHMgQmFzZURyaXZlciB7XG5cbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5hcHBNb2RlbCA9IG51bGw7XG4gICAgdGhpcy5jdXJDb250ZXh0ID0gJ05BVElWRV9BUFAnO1xuICAgIHRoaXMuZWxNYXAgPSB7fTtcbiAgICB0aGlzLmZvY3VzZWRFbElkID0gbnVsbDtcbiAgICB0aGlzLm1heEVsSWQgPSAwO1xuICAgIHRoaXMuY2FwcyA9IHt9O1xuXG4gICAgdGhpcy5kZXNpcmVkQ2FwQ29uc3RyYWludHMgPSB7XG4gICAgICBhcHA6IHtcbiAgICAgICAgcHJlc2VuY2U6IHRydWUsXG4gICAgICAgIGlzU3RyaW5nOiB0cnVlXG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGFzeW5jIGNyZWF0ZVNlc3Npb24gKGRlc2lyZWRDYXBzLCByZXF1aXJlZENhcHMsIGNhcGFiaWxpdGllcywgb3RoZXJTZXNzaW9uRGF0YSA9IFtdKSB7XG5cbiAgICAvLyBUT0RPIGFkZCB2YWxpZGF0aW9uIG9uIGNhcHMuYXBwIHRoYXQgd2Ugd2lsbCBnZXQgZm9yIGZyZWUgZnJvbVxuICAgIC8vIEJhc2VEcml2ZXJcblxuICAgIC8vIGNoZWNrIHRvIHNlZSBpZiBhbnkgb3RoZXIgc2Vzc2lvbnMgaGF2ZSBzZXQgdW5pcXVlQXBwLiBJZiBzbywgZW11bGF0ZVxuICAgIC8vIG5vdCBiZWluZyBhYmxlIHRvIHN0YXJ0IGEgc2Vzc2lvbiBiZWNhdXNlIG9mIHN5c3RlbSByZXNvdXJjZXNcbiAgICBmb3IgKGxldCBkIG9mIG90aGVyU2Vzc2lvbkRhdGEpIHtcbiAgICAgIGlmIChkLmlzVW5pcXVlKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnMuU2Vzc2lvbk5vdENyZWF0ZWRFcnJvcihcIkNhbm5vdCBzdGFydCBzZXNzaW9uOyBhbm90aGVyIFwiICtcbiAgICAgICAgICAgIFwidW5pcXVlIHNlc3Npb24gaXMgaW4gcHJvZ3Jlc3MgdGhhdCByZXF1aXJlcyBhbGwgcmVzb3VyY2VzXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBbc2Vzc2lvbklkLCBjYXBzXSA9IGF3YWl0IHN1cGVyLmNyZWF0ZVNlc3Npb24oZGVzaXJlZENhcHMsIHJlcXVpcmVkQ2FwcywgY2FwYWJpbGl0aWVzLCBvdGhlclNlc3Npb25EYXRhKTtcbiAgICB0aGlzLmFwcE1vZGVsID0gbmV3IEZha2VBcHAoKTtcbiAgICBpZiAoXy5pc0FycmF5KGNhcHMpID09PSB0cnVlICYmIGNhcHMubGVuZ3RoID09PSAxKSB7XG4gICAgICBjYXBzID0gY2Fwc1swXTtcbiAgICB9XG4gICAgdGhpcy5jYXBzID0gY2FwcztcbiAgICBhd2FpdCB0aGlzLmFwcE1vZGVsLmxvYWRBcHAoY2Fwcy5hcHApO1xuICAgIHJldHVybiBbc2Vzc2lvbklkLCBjYXBzXTtcbiAgfVxuXG4gIGdldCBkcml2ZXJEYXRhICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaXNVbmlxdWU6ICEhdGhpcy5jYXBzLnVuaXF1ZUFwcFxuICAgIH07XG4gIH1cbn1cblxuZm9yIChsZXQgW2NtZCwgZm5dIG9mIF8udG9QYWlycyhjb21tYW5kcykpIHtcbiAgRmFrZURyaXZlci5wcm90b3R5cGVbY21kXSA9IGZuO1xufVxuXG5leHBvcnQgeyBGYWtlRHJpdmVyIH07XG4iXSwiZmlsZSI6ImxpYi9kcml2ZXIuanMiLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
