"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FakeApp = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _fs = _interopRequireDefault(require("fs"));

var _xmldom = _interopRequireDefault(require("xmldom"));

var _xpath = _interopRequireDefault(require("xpath"));

var _logger = _interopRequireDefault(require("./logger"));

var _fakeElement = require("./fake-element");

const readFile = _bluebird.default.promisify(_fs.default.readFile);

class FakeApp {
  constructor() {
    this.dom = null;
    this.activeDom = null;
    this.activeWebview = null;
    this.activeFrame = null;
    this.activeAlert = null;
    this.lat = 0;
    this.long = 0;
    this.rawXml = '';
    this.currentOrientation = "PORTRAIT";
  }

  get title() {
    let nodes = this.xpathQuery('//title');

    if (nodes.length < 1) {
      throw new Error("No title!");
    }

    return nodes[0].firstChild.data;
  }

  get currentGeoLocation() {
    return {
      latitude: this.lat,
      longitude: this.long
    };
  }

  get orientation() {
    return this.currentOrientation;
  }

  set orientation(o) {
    this.currentOrientation = o;
  }

  loadApp(appPath) {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.info("Loading Mock app model");

      let data = yield readFile(appPath);

      _logger.default.info("Parsing Mock app XML");

      _this.rawXml = data.toString();
      _this.dom = new _xmldom.default.DOMParser().parseFromString(_this.rawXml);
      _this.activeDom = _this.dom;
    })();
  }

  getWebviews() {
    return this.xpathQuery('//MockWebView/*[1]').map(n => {
      return new FakeWebView(n);
    });
  }

  activateWebview(wv) {
    this.activeWebview = wv;
    let fragment = new _xmldom.default.XMLSerializer().serializeToString(wv.node);
    this.activeDom = new _xmldom.default.DOMParser().parseFromString(fragment, "application/xml");
  }

  deactivateWebview() {
    this.activeWebview = null;
    this.activeDom = this.dom;
  }

  activateFrame(frame) {
    this.activeFrame = frame;
    let fragment = new _xmldom.default.XMLSerializer().serializeToString(frame);
    this.activeDom = new _xmldom.default.DOMParser().parseFromString(fragment, "application/xml");
  }

  deactivateFrame() {
    this.activeFrame = null;
    this.activateWebview(this.activeWebview);
  }

  xpathQuery(sel, ctx) {
    return _xpath.default.select(sel, ctx || this.activeDom);
  }

  idQuery(id, ctx) {
    return this.xpathQuery(`//*[@id="${id}"]`, ctx);
  }

  classQuery(className, ctx) {
    return this.xpathQuery(`//${className}`, ctx);
  }

  hasAlert() {
    return this.activeAlert !== null;
  }

  setAlertText(text) {
    if (!this.activeAlert.hasPrompt()) {
      throw new Error("No prompt to set text of");
    }

    this.activeAlert.setAttr('prompt', text);
  }

  showAlert(alertId) {
    let nodes = this.xpathQuery(`//alert[@id="${alertId}"]`);

    if (nodes.length < 1) {
      throw new Error(`Alert ${alertId} doesn't exist!`);
    }

    this.activeAlert = new _fakeElement.FakeElement(nodes[0], this);
  }

  alertText() {
    return this.activeAlert.getAttr('prompt') || this.activeAlert.nodeAttrs.text;
  }

  handleAlert() {
    this.activeAlert = null;
  }

  getScreenshot() {
    return "hahahanotreallyascreenshot";
  }

}

exports.FakeApp = FakeApp;

class FakeWebView {
  constructor(node) {
    this.node = node;
  }

}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
