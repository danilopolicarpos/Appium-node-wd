"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumBaseDriver = require("appium-base-driver");

var _fakeElement = require("../fake-element");

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

helpers.getExistingElementForNode = function (node) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = _lodash.default.toPairs(this.elMap)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      let _step$value = (0, _slicedToArray2.default)(_step.value, 2),
          id = _step$value[0],
          el = _step$value[1];

      if (el.node === node) {
        return id;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return null;
};

helpers.wrapNewEl = function (obj) {
  let existingElId = this.getExistingElementForNode(obj);

  if (existingElId) {
    return {
      ELEMENT: existingElId
    };
  }

  this.maxElId++;
  this.elMap[this.maxElId.toString()] = new _fakeElement.FakeElement(obj, this.appModel);
  return {
    ELEMENT: this.maxElId.toString()
  };
};

helpers.findElOrEls = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (strategy, selector, mult, ctx) {
    let qMap = {
      'xpath': 'xpathQuery',
      'id': 'idQuery',
      'accessibility id': 'idQuery',
      'class name': 'classQuery',
      'tag name': 'classQuery'
    };

    if (!_lodash.default.includes(_lodash.default.keys(qMap), strategy)) {
      throw new _appiumBaseDriver.errors.UnknownCommandError();
    }

    if (selector === "badsel") {
      throw new _appiumBaseDriver.errors.InvalidSelectorError();
    }

    let els = this.appModel[qMap[strategy]](selector, ctx);

    if (els.length) {
      if (mult) {
        let allEls = [];
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = els[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            let el = _step2.value;
            allEls.push(this.wrapNewEl(el));
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        return allEls;
      } else {
        return this.wrapNewEl(els[0]);
      }
    } else if (mult) {
      return [];
    } else {
      throw new _appiumBaseDriver.errors.NoSuchElementError();
    }
  });

  return function (_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();

commands.findElement = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (strategy, selector) {
    return this.findElOrEls(strategy, selector, false);
  });

  return function (_x5, _x6) {
    return _ref2.apply(this, arguments);
  };
}();

commands.findElements = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (strategy, selector) {
    return this.findElOrEls(strategy, selector, true);
  });

  return function (_x7, _x8) {
    return _ref3.apply(this, arguments);
  };
}();

commands.findElementFromElement = function () {
  var _ref4 = (0, _asyncToGenerator2.default)(function* (strategy, selector, elementId) {
    let el = this.getElement(elementId);
    return this.findElOrEls(strategy, selector, false, el.xmlFragment);
  });

  return function (_x9, _x10, _x11) {
    return _ref4.apply(this, arguments);
  };
}();

commands.findElementsFromElement = function () {
  var _ref5 = (0, _asyncToGenerator2.default)(function* (strategy, selector, elementId) {
    let el = this.getElement(elementId);
    return this.findElOrEls(strategy, selector, true, el.xmlFragment);
  });

  return function (_x12, _x13, _x14) {
    return _ref5.apply(this, arguments);
  };
}();

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9maW5kLmpzIl0sIm5hbWVzIjpbImNvbW1hbmRzIiwiaGVscGVycyIsImV4dGVuc2lvbnMiLCJnZXRFeGlzdGluZ0VsZW1lbnRGb3JOb2RlIiwibm9kZSIsIl8iLCJ0b1BhaXJzIiwiZWxNYXAiLCJpZCIsImVsIiwid3JhcE5ld0VsIiwib2JqIiwiZXhpc3RpbmdFbElkIiwiRUxFTUVOVCIsIm1heEVsSWQiLCJ0b1N0cmluZyIsIkZha2VFbGVtZW50IiwiYXBwTW9kZWwiLCJmaW5kRWxPckVscyIsInN0cmF0ZWd5Iiwic2VsZWN0b3IiLCJtdWx0IiwiY3R4IiwicU1hcCIsImluY2x1ZGVzIiwia2V5cyIsImVycm9ycyIsIlVua25vd25Db21tYW5kRXJyb3IiLCJJbnZhbGlkU2VsZWN0b3JFcnJvciIsImVscyIsImxlbmd0aCIsImFsbEVscyIsInB1c2giLCJOb1N1Y2hFbGVtZW50RXJyb3IiLCJmaW5kRWxlbWVudCIsImZpbmRFbGVtZW50cyIsImZpbmRFbGVtZW50RnJvbUVsZW1lbnQiLCJlbGVtZW50SWQiLCJnZXRFbGVtZW50IiwieG1sRnJhZ21lbnQiLCJmaW5kRWxlbWVudHNGcm9tRWxlbWVudCIsIk9iamVjdCIsImFzc2lnbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUVBLElBQUlBLFFBQVEsR0FBRyxFQUFmO0FBQUEsSUFBbUJDLE9BQU8sR0FBRyxFQUE3QjtBQUFBLElBQWlDQyxVQUFVLEdBQUcsRUFBOUM7Ozs7QUFFQUQsT0FBTyxDQUFDRSx5QkFBUixHQUFvQyxVQUFVQyxJQUFWLEVBQWdCO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQ2xELHlCQUFxQkMsZ0JBQUVDLE9BQUYsQ0FBVSxLQUFLQyxLQUFmLENBQXJCLDhIQUE0QztBQUFBO0FBQUEsVUFBbENDLEVBQWtDO0FBQUEsVUFBOUJDLEVBQThCOztBQUMxQyxVQUFJQSxFQUFFLENBQUNMLElBQUgsS0FBWUEsSUFBaEIsRUFB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RCxHQUZEOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUlBcEIsUUFBUSxDQUFDb0Msc0JBQVQ7QUFBQSw4Q0FBa0MsV0FBZ0JqQixRQUFoQixFQUEwQkMsUUFBMUIsRUFBb0NpQixTQUFwQyxFQUErQztBQUMvRSxRQUFJNUIsRUFBRSxHQUFHLEtBQUs2QixVQUFMLENBQWdCRCxTQUFoQixDQUFUO0FBQ0EsV0FBTyxLQUFLbkIsV0FBTCxDQUFpQkMsUUFBakIsRUFBMkJDLFFBQTNCLEVBQXFDLEtBQXJDLEVBQTRDWCxFQUFFLENBQUM4QixXQUEvQyxDQUFQO0FBQ0QsR0FIRDs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFLQXZDLFFBQVEsQ0FBQ3dDLHVCQUFUO0FBQUEsOENBQW1DLFdBQWdCckIsUUFBaEIsRUFBMEJDLFFBQTFCLEVBQW9DaUIsU0FBcEMsRUFBK0M7QUFDaEYsUUFBSTVCLEVBQUUsR0FBRyxLQUFLNkIsVUFBTCxDQUFnQkQsU0FBaEIsQ0FBVDtBQUNBLFdBQU8sS0FBS25CLFdBQUwsQ0FBaUJDLFFBQWpCLEVBQTJCQyxRQUEzQixFQUFxQyxJQUFyQyxFQUEyQ1gsRUFBRSxDQUFDOEIsV0FBOUMsQ0FBUDtBQUNELEdBSEQ7O0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBS0FFLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjeEMsVUFBZCxFQUEwQkYsUUFBMUIsRUFBb0NDLE9BQXBDO2VBRWVDLFUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgZXJyb3JzIH0gZnJvbSAnYXBwaXVtLWJhc2UtZHJpdmVyJztcbmltcG9ydCB7IEZha2VFbGVtZW50IH0gZnJvbSAnLi4vZmFrZS1lbGVtZW50JztcblxubGV0IGNvbW1hbmRzID0ge30sIGhlbHBlcnMgPSB7fSwgZXh0ZW5zaW9ucyA9IHt9O1xuXG5oZWxwZXJzLmdldEV4aXN0aW5nRWxlbWVudEZvck5vZGUgPSBmdW5jdGlvbiAobm9kZSkge1xuICBmb3IgKGxldCBbaWQsIGVsXSBvZiBfLnRvUGFpcnModGhpcy5lbE1hcCkpIHtcbiAgICBpZiAoZWwubm9kZSA9PT0gbm9kZSkge1xuICAgICAgcmV0dXJuIGlkO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5cbmhlbHBlcnMud3JhcE5ld0VsID0gZnVuY3Rpb24gKG9iaikge1xuICAvLyBmaXJzdCBjaGVjayBhbmQgc2VlIGlmIHdlIGFscmVhZHkgaGF2ZSBhIHJlZiB0byB0aGlzIGVsZW1lbnRcbiAgbGV0IGV4aXN0aW5nRWxJZCA9IHRoaXMuZ2V0RXhpc3RpbmdFbGVtZW50Rm9yTm9kZShvYmopO1xuICBpZiAoZXhpc3RpbmdFbElkKSB7XG4gICAgcmV0dXJuIHtFTEVNRU5UOiBleGlzdGluZ0VsSWR9O1xuICB9XG5cbiAgLy8gb3RoZXJ3aXNlIGFkZCB0aGUgZWxlbWVudCB0byB0aGUgbWFwXG4gIHRoaXMubWF4RWxJZCsrO1xuICB0aGlzLmVsTWFwW3RoaXMubWF4RWxJZC50b1N0cmluZygpXSA9IG5ldyBGYWtlRWxlbWVudChvYmosIHRoaXMuYXBwTW9kZWwpO1xuICByZXR1cm4ge0VMRU1FTlQ6IHRoaXMubWF4RWxJZC50b1N0cmluZygpfTtcbn07XG5cbmhlbHBlcnMuZmluZEVsT3JFbHMgPSBhc3luYyBmdW5jdGlvbiAoc3RyYXRlZ3ksIHNlbGVjdG9yLCBtdWx0LCBjdHgpIHtcbiAgbGV0IHFNYXAgPSB7XG4gICAgJ3hwYXRoJzogJ3hwYXRoUXVlcnknLFxuICAgICdpZCc6ICdpZFF1ZXJ5JyxcbiAgICAnYWNjZXNzaWJpbGl0eSBpZCc6ICdpZFF1ZXJ5JyxcbiAgICAnY2xhc3MgbmFtZSc6ICdjbGFzc1F1ZXJ5JyxcbiAgICAndGFnIG5hbWUnOiAnY2xhc3NRdWVyeSdcbiAgfTtcbiAgLy8gVE9ETyB0aGlzIGVycm9yIGNoZWNraW5nIHNob3VsZCBwcm9iYWJseSBiZSBwYXJ0IG9mIE1KU09OV1A/XG4gIGlmICghXy5pbmNsdWRlcyhfLmtleXMocU1hcCksIHN0cmF0ZWd5KSkge1xuICAgIHRocm93IG5ldyBlcnJvcnMuVW5rbm93bkNvbW1hbmRFcnJvcigpO1xuICB9XG4gIGlmIChzZWxlY3RvciA9PT0gXCJiYWRzZWxcIikge1xuICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZFNlbGVjdG9yRXJyb3IoKTtcbiAgfVxuICBsZXQgZWxzID0gdGhpcy5hcHBNb2RlbFtxTWFwW3N0cmF0ZWd5XV0oc2VsZWN0b3IsIGN0eCk7XG4gIGlmIChlbHMubGVuZ3RoKSB7XG4gICAgaWYgKG11bHQpIHtcbiAgICAgIGxldCBhbGxFbHMgPSBbXTtcbiAgICAgIGZvciAobGV0IGVsIG9mIGVscykge1xuICAgICAgICBhbGxFbHMucHVzaCh0aGlzLndyYXBOZXdFbChlbCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFsbEVscztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMud3JhcE5ld0VsKGVsc1swXSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKG11bHQpIHtcbiAgICByZXR1cm4gW107XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5Ob1N1Y2hFbGVtZW50RXJyb3IoKTtcbiAgfVxufTtcblxuY29tbWFuZHMuZmluZEVsZW1lbnQgPSBhc3luYyBmdW5jdGlvbiAoc3RyYXRlZ3ksIHNlbGVjdG9yKSB7XG4gIHJldHVybiB0aGlzLmZpbmRFbE9yRWxzKHN0cmF0ZWd5LCBzZWxlY3RvciwgZmFsc2UpO1xufTtcblxuY29tbWFuZHMuZmluZEVsZW1lbnRzID0gYXN5bmMgZnVuY3Rpb24gKHN0cmF0ZWd5LCBzZWxlY3Rvcikge1xuICByZXR1cm4gdGhpcy5maW5kRWxPckVscyhzdHJhdGVneSwgc2VsZWN0b3IsIHRydWUpO1xufTtcblxuY29tbWFuZHMuZmluZEVsZW1lbnRGcm9tRWxlbWVudCA9IGFzeW5jIGZ1bmN0aW9uIChzdHJhdGVneSwgc2VsZWN0b3IsIGVsZW1lbnRJZCkge1xuICBsZXQgZWwgPSB0aGlzLmdldEVsZW1lbnQoZWxlbWVudElkKTtcbiAgcmV0dXJuIHRoaXMuZmluZEVsT3JFbHMoc3RyYXRlZ3ksIHNlbGVjdG9yLCBmYWxzZSwgZWwueG1sRnJhZ21lbnQpO1xufTtcblxuY29tbWFuZHMuZmluZEVsZW1lbnRzRnJvbUVsZW1lbnQgPSBhc3luYyBmdW5jdGlvbiAoc3RyYXRlZ3ksIHNlbGVjdG9yLCBlbGVtZW50SWQpIHtcbiAgbGV0IGVsID0gdGhpcy5nZXRFbGVtZW50KGVsZW1lbnRJZCk7XG4gIHJldHVybiB0aGlzLmZpbmRFbE9yRWxzKHN0cmF0ZWd5LCBzZWxlY3RvciwgdHJ1ZSwgZWwueG1sRnJhZ21lbnQpO1xufTtcblxuT2JqZWN0LmFzc2lnbihleHRlbnNpb25zLCBjb21tYW5kcywgaGVscGVycyk7XG5leHBvcnQgeyBjb21tYW5kcywgaGVscGVyc307XG5leHBvcnQgZGVmYXVsdCBleHRlbnNpb25zO1xuIl0sImZpbGUiOiJsaWIvY29tbWFuZHMvZmluZC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
