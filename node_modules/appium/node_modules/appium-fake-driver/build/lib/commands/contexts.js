"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumBaseDriver = require("appium-base-driver");

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

helpers.getRawContexts = function () {
  let contexts = {
    'NATIVE_APP': null
  };
  let wvs = this.appModel.getWebviews();

  for (let i = 1; i < wvs.length + 1; i++) {
    contexts[`WEBVIEW_${i}`] = wvs[i - 1];
  }

  return contexts;
};

helpers.assertWebviewContext = function () {
  if (this.curContext === 'NATIVE_APP') {
    throw new _appiumBaseDriver.errors.InvalidContextError();
  }
};

commands.getCurrentContext = (0, _asyncToGenerator2.default)(function* () {
  return this.curContext;
});
commands.getContexts = (0, _asyncToGenerator2.default)(function* () {
  return _lodash.default.keys(this.getRawContexts());
});

commands.setContext = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (context) {
    let contexts = this.getRawContexts();

    if (_lodash.default.includes(_lodash.default.keys(contexts), context)) {
      this.curContext = context;

      if (context === 'NATIVE_APP') {
        this.appModel.deactivateWebview();
      } else {
        this.appModel.activateWebview(contexts[context]);
      }
    } else {
      throw new _appiumBaseDriver.errors.NoSuchContextError();
    }
  });

  return function (_x) {
    return _ref3.apply(this, arguments);
  };
}();

commands.setFrame = function () {
  var _ref4 = (0, _asyncToGenerator2.default)(function* (frameId) {
    this.assertWebviewContext();

    if (frameId === null) {
      this.appModel.deactivateFrame();
    } else {
      let nodes = this.appModel.xpathQuery(`//iframe[@id="${frameId}"]`);

      if (!nodes.length) {
        throw new _appiumBaseDriver.errors.NoSuchFrameError();
      }

      this.appModel.activateFrame(nodes[0]);
    }
  });

  return function (_x2) {
    return _ref4.apply(this, arguments);
  };
}();

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9jb250ZXh0cy5qcyJdLCJuYW1lcyI6WyJjb21tYW5kcyIsImhlbHBlcnMiLCJleHRlbnNpb25zIiwiZ2V0UmF3Q29udGV4dHMiLCJjb250ZXh0cyIsInd2cyIsImFwcE1vZGVsIiwiZ2V0V2Vidmlld3MiLCJpIiwibGVuZ3RoIiwiYXNzZXJ0V2Vidmlld0NvbnRleHQiLCJjdXJDb250ZXh0IiwiZXJyb3JzIiwiSW52YWxpZENvbnRleHRFcnJvciIsImdldEN1cnJlbnRDb250ZXh0IiwiZ2V0Q29udGV4dHMiLCJfIiwia2V5cyIsInNldENvbnRleHQiLCJjb250ZXh0IiwiaW5jbHVkZXMiLCJkZWFjdGl2YXRlV2VidmlldyIsImFjdGl2YXRlV2VidmlldyIsIk5vU3VjaENvbnRleHRFcnJvciIsInNldEZyYW1lIiwiZnJhbWVJZCIsImRlYWN0aXZhdGVGcmFtZSIsIm5vZGVzIiwieHBhdGhRdWVyeSIsIk5vU3VjaEZyYW1lRXJyb3IiLCJhY3RpdmF0ZUZyYW1lIiwiT2JqZWN0IiwiYXNzaWduIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUVBLElBQUlBLFFBQVEsR0FBRyxFQUFmO0FBQUEsSUFBbUJDLE9BQU8sR0FBRyxFQUE3QjtBQUFBLElBQWlDQyxVQUFVLEdBQUcsRUFBOUM7Ozs7QUFFQUQsT0FBTyxDQUFDRSxjQUFSLEdBQXlCLFlBQVk7QUFDbkMsTUFBSUMsUUFBUSxHQUFHO0FBQUMsa0JBQWM7QUFBZixHQUFmO0FBQ0EsTUFBSUMsR0FBRyxHQUFHLEtBQUtDLFFBQUwsQ0FBY0MsV0FBZCxFQUFWOztBQUNBLE9BQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0gsR0FBRyxDQUFDSSxNQUFKLEdBQWEsQ0FBakMsRUFBb0NELENBQUMsRUFBckMsRUFBeUM7QUFDdkNKLElBQUFBLFFBQVEsQ0FBRSxXQUFVSSxDQUFFLEVBQWQsQ0FBUixHQUEyQkgsR0FBRyxDQUFDRyxDQUFDLEdBQUcsQ0FBTCxDQUE5QjtBQUNEOztBQUNELFNBQU9KLFFBQVA7QUFDRCxDQVBEOztBQVNBSCxPQUFPLENBQUNTLG9CQUFSLEdBQStCLFlBQVk7QUFDekMsTUFBSSxLQUFLQyxVQUFMLEtBQW9CLFlBQXhCLEVBQXNDO0FBQ3BDLFVBQU0sSUFBSUMseUJBQU9DLG1CQUFYLEVBQU47QUFDRDtBQUNGLENBSkQ7O0FBTUFiLFFBQVEsQ0FBQ2MsaUJBQVQsbUNBQTZCLGFBQWtCO0FBQzdDLFNBQU8sS0FBS0gsVUFBWjtBQUNELENBRkQ7QUFJQVgsUUFBUSxDQUFDZSxXQUFULG1DQUF1QixhQUFrQjtBQUN2QyxTQUFPQyxnQkFBRUMsSUFBRixDQUFPLEtBQUtkLGNBQUwsRUFBUCxDQUFQO0FBQ0QsQ0FGRDs7QUFJQUgsUUFBUSxDQUFDa0IsVUFBVDtBQUFBLDhDQUFzQixXQUFnQkMsT0FBaEIsRUFBeUI7QUFDN0MsUUFBSWYsUUFBUSxHQUFHLEtBQUtELGNBQUwsRUFBZjs7QUFDQSxRQUFJYSxnQkFBRUksUUFBRixDQUFXSixnQkFBRUMsSUFBRixDQUFPYixRQUFQLENBQVgsRUFBNkJlLE9BQTdCLENBQUosRUFBMkM7QUFDekMsV0FBS1IsVUFBTCxHQUFrQlEsT0FBbEI7O0FBQ0EsVUFBSUEsT0FBTyxLQUFLLFlBQWhCLEVBQThCO0FBQzVCLGFBQUtiLFFBQUwsQ0FBY2UsaUJBQWQ7QUFDRCxPQUZELE1BRU87QUFDTCxhQUFLZixRQUFMLENBQWNnQixlQUFkLENBQThCbEIsUUFBUSxDQUFDZSxPQUFELENBQXRDO0FBQ0Q7QUFDRixLQVBELE1BT087QUFDTCxZQUFNLElBQUlQLHlCQUFPVyxrQkFBWCxFQUFOO0FBQ0Q7QUFDRixHQVpEOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQWNBdkIsUUFBUSxDQUFDd0IsUUFBVDtBQUFBLDhDQUFvQixXQUFnQkMsT0FBaEIsRUFBeUI7QUFDM0MsU0FBS2Ysb0JBQUw7O0FBQ0EsUUFBSWUsT0FBTyxLQUFLLElBQWhCLEVBQXNCO0FBQ3BCLFdBQUtuQixRQUFMLENBQWNvQixlQUFkO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsVUFBSUMsS0FBSyxHQUFHLEtBQUtyQixRQUFMLENBQWNzQixVQUFkLENBQTBCLGlCQUFnQkgsT0FBUSxJQUFsRCxDQUFaOztBQUNBLFVBQUksQ0FBQ0UsS0FBSyxDQUFDbEIsTUFBWCxFQUFtQjtBQUNqQixjQUFNLElBQUlHLHlCQUFPaUIsZ0JBQVgsRUFBTjtBQUNEOztBQUNELFdBQUt2QixRQUFMLENBQWN3QixhQUFkLENBQTRCSCxLQUFLLENBQUMsQ0FBRCxDQUFqQztBQUNEO0FBQ0YsR0FYRDs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFhQUksTUFBTSxDQUFDQyxNQUFQLENBQWM5QixVQUFkLEVBQTBCRixRQUExQixFQUFvQ0MsT0FBcEM7ZUFFZUMsVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBlcnJvcnMgfSBmcm9tICdhcHBpdW0tYmFzZS1kcml2ZXInO1xuXG5sZXQgY29tbWFuZHMgPSB7fSwgaGVscGVycyA9IHt9LCBleHRlbnNpb25zID0ge307XG5cbmhlbHBlcnMuZ2V0UmF3Q29udGV4dHMgPSBmdW5jdGlvbiAoKSB7XG4gIGxldCBjb250ZXh0cyA9IHsnTkFUSVZFX0FQUCc6IG51bGx9O1xuICBsZXQgd3ZzID0gdGhpcy5hcHBNb2RlbC5nZXRXZWJ2aWV3cygpO1xuICBmb3IgKGxldCBpID0gMTsgaSA8IHd2cy5sZW5ndGggKyAxOyBpKyspIHtcbiAgICBjb250ZXh0c1tgV0VCVklFV18ke2l9YF0gPSB3dnNbaSAtIDFdO1xuICB9XG4gIHJldHVybiBjb250ZXh0cztcbn07XG5cbmhlbHBlcnMuYXNzZXJ0V2Vidmlld0NvbnRleHQgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmN1ckNvbnRleHQgPT09ICdOQVRJVkVfQVBQJykge1xuICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZENvbnRleHRFcnJvcigpO1xuICB9XG59O1xuXG5jb21tYW5kcy5nZXRDdXJyZW50Q29udGV4dCA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuY3VyQ29udGV4dDtcbn07XG5cbmNvbW1hbmRzLmdldENvbnRleHRzID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gXy5rZXlzKHRoaXMuZ2V0UmF3Q29udGV4dHMoKSk7XG59O1xuXG5jb21tYW5kcy5zZXRDb250ZXh0ID0gYXN5bmMgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgbGV0IGNvbnRleHRzID0gdGhpcy5nZXRSYXdDb250ZXh0cygpO1xuICBpZiAoXy5pbmNsdWRlcyhfLmtleXMoY29udGV4dHMpLCBjb250ZXh0KSkge1xuICAgIHRoaXMuY3VyQ29udGV4dCA9IGNvbnRleHQ7XG4gICAgaWYgKGNvbnRleHQgPT09ICdOQVRJVkVfQVBQJykge1xuICAgICAgdGhpcy5hcHBNb2RlbC5kZWFjdGl2YXRlV2VidmlldygpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFwcE1vZGVsLmFjdGl2YXRlV2Vidmlldyhjb250ZXh0c1tjb250ZXh0XSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBlcnJvcnMuTm9TdWNoQ29udGV4dEVycm9yKCk7XG4gIH1cbn07XG5cbmNvbW1hbmRzLnNldEZyYW1lID0gYXN5bmMgZnVuY3Rpb24gKGZyYW1lSWQpIHtcbiAgdGhpcy5hc3NlcnRXZWJ2aWV3Q29udGV4dCgpO1xuICBpZiAoZnJhbWVJZCA9PT0gbnVsbCkge1xuICAgIHRoaXMuYXBwTW9kZWwuZGVhY3RpdmF0ZUZyYW1lKCk7XG4gIH0gZWxzZSB7XG4gICAgbGV0IG5vZGVzID0gdGhpcy5hcHBNb2RlbC54cGF0aFF1ZXJ5KGAvL2lmcmFtZVtAaWQ9XCIke2ZyYW1lSWR9XCJdYCk7XG4gICAgaWYgKCFub2Rlcy5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuTm9TdWNoRnJhbWVFcnJvcigpO1xuICAgIH1cbiAgICB0aGlzLmFwcE1vZGVsLmFjdGl2YXRlRnJhbWUobm9kZXNbMF0pO1xuICB9XG59O1xuXG5PYmplY3QuYXNzaWduKGV4dGVuc2lvbnMsIGNvbW1hbmRzLCBoZWxwZXJzKTtcbmV4cG9ydCB7IGNvbW1hbmRzLCBoZWxwZXJzIH07XG5leHBvcnQgZGVmYXVsdCBleHRlbnNpb25zO1xuIl0sImZpbGUiOiJsaWIvY29tbWFuZHMvY29udGV4dHMuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
