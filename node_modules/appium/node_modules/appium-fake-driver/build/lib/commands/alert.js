"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _appiumBaseDriver = require("appium-base-driver");

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

helpers.assertNoAlert = function () {
  if (this.appModel.hasAlert()) {
    throw new _appiumBaseDriver.errors.UnexpectedAlertOpenError();
  }
};

helpers.assertAlert = function () {
  if (!this.appModel.hasAlert()) {
    throw new _appiumBaseDriver.errors.NoAlertOpenError();
  }
};

commands.getAlertText = (0, _asyncToGenerator2.default)(function* () {
  this.assertAlert();
  return this.appModel.alertText();
});

commands.setAlertText = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (text) {
    this.assertAlert();

    try {
      this.appModel.setAlertText(text);
    } catch (e) {
      throw new _appiumBaseDriver.errors.InvalidElementStateError();
    }
  });

  return function (_x) {
    return _ref2.apply(this, arguments);
  };
}();

commands.postAcceptAlert = (0, _asyncToGenerator2.default)(function* () {
  this.assertAlert();
  this.appModel.handleAlert();
});
commands.postDismissAlert = commands.postAcceptAlert;
Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9hbGVydC5qcyJdLCJuYW1lcyI6WyJjb21tYW5kcyIsImhlbHBlcnMiLCJleHRlbnNpb25zIiwiYXNzZXJ0Tm9BbGVydCIsImFwcE1vZGVsIiwiaGFzQWxlcnQiLCJlcnJvcnMiLCJVbmV4cGVjdGVkQWxlcnRPcGVuRXJyb3IiLCJhc3NlcnRBbGVydCIsIk5vQWxlcnRPcGVuRXJyb3IiLCJnZXRBbGVydFRleHQiLCJhbGVydFRleHQiLCJzZXRBbGVydFRleHQiLCJ0ZXh0IiwiZSIsIkludmFsaWRFbGVtZW50U3RhdGVFcnJvciIsInBvc3RBY2NlcHRBbGVydCIsImhhbmRsZUFsZXJ0IiwicG9zdERpc21pc3NBbGVydCIsIk9iamVjdCIsImFzc2lnbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFFQSxJQUFJQSxRQUFRLEdBQUcsRUFBZjtBQUFBLElBQW1CQyxPQUFPLEdBQUcsRUFBN0I7QUFBQSxJQUFpQ0MsVUFBVSxHQUFHLEVBQTlDOzs7O0FBRUFELE9BQU8sQ0FBQ0UsYUFBUixHQUF3QixZQUFZO0FBQ2xDLE1BQUksS0FBS0MsUUFBTCxDQUFjQyxRQUFkLEVBQUosRUFBOEI7QUFDNUIsVUFBTSxJQUFJQyx5QkFBT0Msd0JBQVgsRUFBTjtBQUNEO0FBQ0YsQ0FKRDs7QUFNQU4sT0FBTyxDQUFDTyxXQUFSLEdBQXNCLFlBQVk7QUFDaEMsTUFBSSxDQUFDLEtBQUtKLFFBQUwsQ0FBY0MsUUFBZCxFQUFMLEVBQStCO0FBQzdCLFVBQU0sSUFBSUMseUJBQU9HLGdCQUFYLEVBQU47QUFDRDtBQUNGLENBSkQ7O0FBTUFULFFBQVEsQ0FBQ1UsWUFBVCxtQ0FBd0IsYUFBa0I7QUFDeEMsT0FBS0YsV0FBTDtBQUNBLFNBQU8sS0FBS0osUUFBTCxDQUFjTyxTQUFkLEVBQVA7QUFDRCxDQUhEOztBQUtBWCxRQUFRLENBQUNZLFlBQVQ7QUFBQSw4Q0FBd0IsV0FBZ0JDLElBQWhCLEVBQXNCO0FBQzVDLFNBQUtMLFdBQUw7O0FBQ0EsUUFBSTtBQUNGLFdBQUtKLFFBQUwsQ0FBY1EsWUFBZCxDQUEyQkMsSUFBM0I7QUFDRCxLQUZELENBRUUsT0FBT0MsQ0FBUCxFQUFVO0FBQ1YsWUFBTSxJQUFJUix5QkFBT1Msd0JBQVgsRUFBTjtBQUNEO0FBQ0YsR0FQRDs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFTQWYsUUFBUSxDQUFDZ0IsZUFBVCxtQ0FBMkIsYUFBa0I7QUFDM0MsT0FBS1IsV0FBTDtBQUNBLE9BQUtKLFFBQUwsQ0FBY2EsV0FBZDtBQUNELENBSEQ7QUFLQWpCLFFBQVEsQ0FBQ2tCLGdCQUFULEdBQTRCbEIsUUFBUSxDQUFDZ0IsZUFBckM7QUFFQUcsTUFBTSxDQUFDQyxNQUFQLENBQWNsQixVQUFkLEVBQTBCRixRQUExQixFQUFvQ0MsT0FBcEM7ZUFFZUMsVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGVycm9ycyB9IGZyb20gJ2FwcGl1bS1iYXNlLWRyaXZlcic7XG5cbmxldCBjb21tYW5kcyA9IHt9LCBoZWxwZXJzID0ge30sIGV4dGVuc2lvbnMgPSB7fTtcblxuaGVscGVycy5hc3NlcnROb0FsZXJ0ID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5hcHBNb2RlbC5oYXNBbGVydCgpKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5VbmV4cGVjdGVkQWxlcnRPcGVuRXJyb3IoKTtcbiAgfVxufTtcblxuaGVscGVycy5hc3NlcnRBbGVydCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCF0aGlzLmFwcE1vZGVsLmhhc0FsZXJ0KCkpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLk5vQWxlcnRPcGVuRXJyb3IoKTtcbiAgfVxufTtcblxuY29tbWFuZHMuZ2V0QWxlcnRUZXh0ID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICB0aGlzLmFzc2VydEFsZXJ0KCk7XG4gIHJldHVybiB0aGlzLmFwcE1vZGVsLmFsZXJ0VGV4dCgpO1xufTtcblxuY29tbWFuZHMuc2V0QWxlcnRUZXh0ID0gYXN5bmMgZnVuY3Rpb24gKHRleHQpIHtcbiAgdGhpcy5hc3NlcnRBbGVydCgpO1xuICB0cnkge1xuICAgIHRoaXMuYXBwTW9kZWwuc2V0QWxlcnRUZXh0KHRleHQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkRWxlbWVudFN0YXRlRXJyb3IoKTtcbiAgfVxufTtcblxuY29tbWFuZHMucG9zdEFjY2VwdEFsZXJ0ID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICB0aGlzLmFzc2VydEFsZXJ0KCk7XG4gIHRoaXMuYXBwTW9kZWwuaGFuZGxlQWxlcnQoKTtcbn07XG5cbmNvbW1hbmRzLnBvc3REaXNtaXNzQWxlcnQgPSBjb21tYW5kcy5wb3N0QWNjZXB0QWxlcnQ7XG5cbk9iamVjdC5hc3NpZ24oZXh0ZW5zaW9ucywgY29tbWFuZHMsIGhlbHBlcnMpO1xuZXhwb3J0IHsgY29tbWFuZHMsIGhlbHBlcnMgfTtcbmV4cG9ydCBkZWZhdWx0IGV4dGVuc2lvbnM7XG4iXSwiZmlsZSI6ImxpYi9jb21tYW5kcy9hbGVydC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
