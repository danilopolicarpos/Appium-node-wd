#!/usr/bin/env node
"use strict";

const fs = require('fs');

const path = require('path');

const system = require('appium-support').system;

function waitForDeps(cb) {
  let i = 0;

  function check() {
    i++;

    try {
      require('./build/lib/installer');

      cb();
    } catch (err) {
      if (err.message.indexOf("Cannot find module './build/lib/installer'") !== -1) {
        console.warn('Project does not appear to built yet. Please run `gulp transpile` first.');
        return cb('Could not install module: ' + err);
      }

      console.warn('Error trying to install WinAppDriver MSI. Waiting and trying again.', err.message);

      if (i <= 200) {
        setTimeout(check, 1000);
      } else {
        cb('Could not import installation module: ' + err);
      }
    }
  }

  check();
}

if (require.main === module) {
  if (!system.isWindows()) {
    console.warn("Not installing WinAppDriver since did not detect a Windows system");
    process.exit(0);
  }

  const installScript = path.resolve(__dirname, 'build', 'lib', 'installer.js');
  waitForDeps(function (err) {
    if (err) {
      console.warn("Unable to import install script. Re-run `install appium-windows-driver` manually.");
      return;
    }

    fs.stat(installScript, function (err) {
      if (err) {
        console.warn("NOTE: Run 'gulp transpile' before using");
        return;
      }

      require('./build/lib/installer').setupWAD().catch(function (err) {
        console.error(err.message);
        console.error("WinAppDriver was not installed; please check your " + "system and re-run npm install if you need WinAppDriver");
      });
    });
  });
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluc3RhbGwtbnBtLmpzIl0sIm5hbWVzIjpbImZzIiwicmVxdWlyZSIsInBhdGgiLCJzeXN0ZW0iLCJ3YWl0Rm9yRGVwcyIsImNiIiwiaSIsImNoZWNrIiwiZXJyIiwibWVzc2FnZSIsImluZGV4T2YiLCJjb25zb2xlIiwid2FybiIsInNldFRpbWVvdXQiLCJtYWluIiwibW9kdWxlIiwiaXNXaW5kb3dzIiwicHJvY2VzcyIsImV4aXQiLCJpbnN0YWxsU2NyaXB0IiwicmVzb2x2ZSIsIl9fZGlybmFtZSIsInN0YXQiLCJzZXR1cFdBRCIsImNhdGNoIiwiZXJyb3IiXSwibWFwcGluZ3MiOiJBQUFBOzs7QUFJQSxNQUFNQSxFQUFFLEdBQUdDLE9BQU8sQ0FBQyxJQUFELENBQWxCOztBQUNBLE1BQU1DLElBQUksR0FBR0QsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBQ0EsTUFBTUUsTUFBTSxHQUFHRixPQUFPLENBQUMsZ0JBQUQsQ0FBUCxDQUEwQkUsTUFBekM7O0FBR0EsU0FBU0MsV0FBVCxDQUFzQkMsRUFBdEIsRUFBMEI7QUFHeEIsTUFBSUMsQ0FBQyxHQUFHLENBQVI7O0FBQ0EsV0FBU0MsS0FBVCxHQUFrQjtBQUNoQkQsSUFBQUEsQ0FBQzs7QUFDRCxRQUFJO0FBQ0ZMLE1BQUFBLE9BQU8sQ0FBQyx1QkFBRCxDQUFQOztBQUNBSSxNQUFBQSxFQUFFO0FBQ0gsS0FIRCxDQUdFLE9BQU9HLEdBQVAsRUFBWTtBQUNaLFVBQUlBLEdBQUcsQ0FBQ0MsT0FBSixDQUFZQyxPQUFaLENBQW9CLDRDQUFwQixNQUFzRSxDQUFDLENBQTNFLEVBQThFO0FBQzVFQyxRQUFBQSxPQUFPLENBQUNDLElBQVIsQ0FBYSwwRUFBYjtBQUNBLGVBQU9QLEVBQUUsQ0FBQywrQkFBK0JHLEdBQWhDLENBQVQ7QUFDRDs7QUFDREcsTUFBQUEsT0FBTyxDQUFDQyxJQUFSLENBQWEscUVBQWIsRUFBb0ZKLEdBQUcsQ0FBQ0MsT0FBeEY7O0FBQ0EsVUFBSUgsQ0FBQyxJQUFJLEdBQVQsRUFBYztBQUNaTyxRQUFBQSxVQUFVLENBQUNOLEtBQUQsRUFBUSxJQUFSLENBQVY7QUFDRCxPQUZELE1BRU87QUFDTEYsUUFBQUEsRUFBRSxDQUFDLDJDQUEyQ0csR0FBNUMsQ0FBRjtBQUNEO0FBQ0Y7QUFDRjs7QUFDREQsRUFBQUEsS0FBSztBQUNOOztBQUVELElBQUlOLE9BQU8sQ0FBQ2EsSUFBUixLQUFpQkMsTUFBckIsRUFBNkI7QUFDM0IsTUFBSSxDQUFDWixNQUFNLENBQUNhLFNBQVAsRUFBTCxFQUF5QjtBQUN2QkwsSUFBQUEsT0FBTyxDQUFDQyxJQUFSLENBQWEsbUVBQWI7QUFDQUssSUFBQUEsT0FBTyxDQUFDQyxJQUFSLENBQWEsQ0FBYjtBQUNEOztBQUVELFFBQU1DLGFBQWEsR0FBR2pCLElBQUksQ0FBQ2tCLE9BQUwsQ0FBYUMsU0FBYixFQUF3QixPQUF4QixFQUFpQyxLQUFqQyxFQUF3QyxjQUF4QyxDQUF0QjtBQUNBakIsRUFBQUEsV0FBVyxDQUFDLFVBQVVJLEdBQVYsRUFBZTtBQUN6QixRQUFJQSxHQUFKLEVBQVM7QUFDUEcsTUFBQUEsT0FBTyxDQUFDQyxJQUFSLENBQWEsbUZBQWI7QUFDQTtBQUNEOztBQUNEWixJQUFBQSxFQUFFLENBQUNzQixJQUFILENBQVFILGFBQVIsRUFBdUIsVUFBVVgsR0FBVixFQUFlO0FBQ3BDLFVBQUlBLEdBQUosRUFBUztBQUNQRyxRQUFBQSxPQUFPLENBQUNDLElBQVIsQ0FBYSx5Q0FBYjtBQUNBO0FBQ0Q7O0FBQ0RYLE1BQUFBLE9BQU8sQ0FBQyx1QkFBRCxDQUFQLENBQWlDc0IsUUFBakMsR0FBNENDLEtBQTVDLENBQWtELFVBQVVoQixHQUFWLEVBQWU7QUFDL0RHLFFBQUFBLE9BQU8sQ0FBQ2MsS0FBUixDQUFjakIsR0FBRyxDQUFDQyxPQUFsQjtBQUNBRSxRQUFBQSxPQUFPLENBQUNjLEtBQVIsQ0FBYyx1REFDQSx3REFEZDtBQUVELE9BSkQ7QUFLRCxLQVZEO0FBV0QsR0FoQlUsQ0FBWDtBQWlCRCIsInNvdXJjZXNDb250ZW50IjpbIiMhL3Vzci9iaW4vZW52IG5vZGVcbi8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbi8qIGVzbGludC1kaXNhYmxlIHByb21pc2UvcHJlZmVyLWF3YWl0LXRvLWNhbGxiYWNrcyAqL1xuXG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3Qgc3lzdGVtID0gcmVxdWlyZSgnYXBwaXVtLXN1cHBvcnQnKS5zeXN0ZW07XG5cblxuZnVuY3Rpb24gd2FpdEZvckRlcHMgKGNiKSB7XG4gIC8vIHNlZSBpZiB3ZSBjYW4gaW1wb3J0IHRoZSBuZWNlc3NhcnkgY29kZVxuICAvLyB0cnkgaXQgYSByaWRpY3Vsb3VzIChidXQgZmluaXRlKSBudW1iZXIgb2YgdGltZXNcbiAgbGV0IGkgPSAwO1xuICBmdW5jdGlvbiBjaGVjayAoKSB7XG4gICAgaSsrO1xuICAgIHRyeSB7XG4gICAgICByZXF1aXJlKCcuL2J1aWxkL2xpYi9pbnN0YWxsZXInKTtcbiAgICAgIGNiKCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBpZiAoZXJyLm1lc3NhZ2UuaW5kZXhPZihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnLi9idWlsZC9saWIvaW5zdGFsbGVyJ1wiKSAhPT0gLTEpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdQcm9qZWN0IGRvZXMgbm90IGFwcGVhciB0byBidWlsdCB5ZXQuIFBsZWFzZSBydW4gYGd1bHAgdHJhbnNwaWxlYCBmaXJzdC4nKTtcbiAgICAgICAgcmV0dXJuIGNiKCdDb3VsZCBub3QgaW5zdGFsbCBtb2R1bGU6ICcgKyBlcnIpO1xuICAgICAgfVxuICAgICAgY29uc29sZS53YXJuKCdFcnJvciB0cnlpbmcgdG8gaW5zdGFsbCBXaW5BcHBEcml2ZXIgTVNJLiBXYWl0aW5nIGFuZCB0cnlpbmcgYWdhaW4uJywgZXJyLm1lc3NhZ2UpO1xuICAgICAgaWYgKGkgPD0gMjAwKSB7XG4gICAgICAgIHNldFRpbWVvdXQoY2hlY2ssIDEwMDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2IoJ0NvdWxkIG5vdCBpbXBvcnQgaW5zdGFsbGF0aW9uIG1vZHVsZTogJyArIGVycik7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNoZWNrKCk7XG59XG5cbmlmIChyZXF1aXJlLm1haW4gPT09IG1vZHVsZSkge1xuICBpZiAoIXN5c3RlbS5pc1dpbmRvd3MoKSkge1xuICAgIGNvbnNvbGUud2FybihcIk5vdCBpbnN0YWxsaW5nIFdpbkFwcERyaXZlciBzaW5jZSBkaWQgbm90IGRldGVjdCBhIFdpbmRvd3Mgc3lzdGVtXCIpO1xuICAgIHByb2Nlc3MuZXhpdCgwKTtcbiAgfVxuICAvLyBjaGVjayBpZiBjdXIgZGlyIGV4aXN0c1xuICBjb25zdCBpbnN0YWxsU2NyaXB0ID0gcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJ2J1aWxkJywgJ2xpYicsICdpbnN0YWxsZXIuanMnKTtcbiAgd2FpdEZvckRlcHMoZnVuY3Rpb24gKGVycikge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIlVuYWJsZSB0byBpbXBvcnQgaW5zdGFsbCBzY3JpcHQuIFJlLXJ1biBgaW5zdGFsbCBhcHBpdW0td2luZG93cy1kcml2ZXJgIG1hbnVhbGx5LlwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZnMuc3RhdChpbnN0YWxsU2NyaXB0LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIk5PVEU6IFJ1biAnZ3VscCB0cmFuc3BpbGUnIGJlZm9yZSB1c2luZ1wiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcmVxdWlyZSgnLi9idWlsZC9saWIvaW5zdGFsbGVyJykuc2V0dXBXQUQoKS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyLm1lc3NhZ2UpO1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiV2luQXBwRHJpdmVyIHdhcyBub3QgaW5zdGFsbGVkOyBwbGVhc2UgY2hlY2sgeW91ciBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgXCJzeXN0ZW0gYW5kIHJlLXJ1biBucG0gaW5zdGFsbCBpZiB5b3UgbmVlZCBXaW5BcHBEcml2ZXJcIik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59XG4iXSwiZmlsZSI6Imluc3RhbGwtbnBtLmpzIiwic291cmNlUm9vdCI6Ii4uIn0=
