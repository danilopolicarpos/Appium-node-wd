"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.downloadWAD = downloadWAD;
exports.setupWAD = setupWAD;
exports.verifyWAD = verifyWAD;
exports.installWAD = installWAD;
exports.default = exports.WAD_GUID = exports.WAD_INSTALL_PATH = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _requestPromise = _interopRequireDefault(require("request-promise"));

var _appiumSupport = require("appium-support");

var _path = _interopRequireDefault(require("path"));

var _teen_process = require("teen_process");

var _logger = _interopRequireDefault(require("./logger"));

const WAD_VER = "1.1";
const WAD_DL = `https://github.com/Microsoft/WinAppDriver/releases/download/v${WAD_VER}/WindowsApplicationDriver.msi`;
const WAD_DL_MD5 = "1105548ca82ea32fb7be9ca4ea21ea58";
let WAD_INSTALL_PATH = process.env["ProgramFiles(x86)"] || process.env.ProgramFiles || "C:\\Program Files";
exports.WAD_INSTALL_PATH = WAD_INSTALL_PATH;
exports.WAD_INSTALL_PATH = WAD_INSTALL_PATH = _path.default.resolve(WAD_INSTALL_PATH, "Windows Application Driver", "WinAppDriver.exe");
const WAD_EXE_MD5 = "2d1b2adfb7b8d86fd890e260c1400ab7";
const WAD_GUID = "DDCD58BF-37CF-4758-A15E-A60E7CF20E41";
exports.WAD_GUID = WAD_GUID;

function downloadWAD() {
  return _downloadWAD.apply(this, arguments);
}

function _downloadWAD() {
  _downloadWAD = (0, _asyncToGenerator2.default)(function* () {
    _logger.default.info(`Opening temp file to write WinAppDriver to...`);

    let tempFile = _path.default.resolve(process.env.TEMP, "WinAppDriver.msi");

    _logger.default.info(`Will write to ${tempFile}`);

    _logger.default.info(`Downloading ${WAD_DL}...`);

    let body = yield _requestPromise.default.get({
      url: WAD_DL,
      encoding: 'binary'
    });

    _logger.default.info(`Writing binary content to ${tempFile}...`);

    yield _appiumSupport.fs.writeFile(tempFile, body, {
      encoding: 'binary'
    });
    let downloadedMd5 = yield _appiumSupport.fs.md5(tempFile);

    if (downloadedMd5 !== WAD_DL_MD5) {
      throw new Error(`Checksum validation error: expected ${WAD_DL_MD5} but ` + `got ${downloadedMd5}`);
    }

    return tempFile;
  });
  return _downloadWAD.apply(this, arguments);
}

function installWAD(_x) {
  return _installWAD.apply(this, arguments);
}

function _installWAD() {
  _installWAD = (0, _asyncToGenerator2.default)(function* (msiPath) {
    _logger.default.info(`Running MSI installer...`);

    yield (0, _teen_process.exec)('msiexec', ['/i', msiPath, '/qn']);
  });
  return _installWAD.apply(this, arguments);
}

function verifyWAD() {
  return _verifyWAD.apply(this, arguments);
}

function _verifyWAD() {
  _verifyWAD = (0, _asyncToGenerator2.default)(function* () {
    _logger.default.info(`You must use WinAppDriver version ${WAD_VER}`);

    _logger.default.info(`Verifying WinAppDriver version ${WAD_VER} is installed via comparing the checksum.`);

    return (yield _appiumSupport.fs.exists(WAD_INSTALL_PATH)) && (yield _appiumSupport.fs.md5(WAD_INSTALL_PATH)) === WAD_EXE_MD5;
  });
  return _verifyWAD.apply(this, arguments);
}

function isAdmin() {
  return _isAdmin.apply(this, arguments);
}

function _isAdmin() {
  _isAdmin = (0, _asyncToGenerator2.default)(function* () {
    let testFilePath = _path.default.resolve("/", "Windows", "System32", "wad-test.txt");

    try {
      yield _appiumSupport.fs.rimraf(testFilePath);
      yield _appiumSupport.fs.writeFile(testFilePath, "foo");
      return true;
    } catch (ign) {
      return false;
    }
  });
  return _isAdmin.apply(this, arguments);
}

function setupWAD() {
  return _setupWAD.apply(this, arguments);
}

function _setupWAD() {
  _setupWAD = (0, _asyncToGenerator2.default)(function* () {
    if (!_appiumSupport.system.isWindows()) {
      throw new Error(`Can only download WinAppDriver on Windows!`);
    }

    if (yield verifyWAD()) {
      _logger.default.info(`WinAppDriver.exe version ${WAD_VER} already exists with correct checksum, not re-downloading`);

      return;
    }

    _logger.default.info(`WinAppDriver.exe doesn't exist at the correct version ${WAD_VER}, setting up`);

    if (!(yield isAdmin())) {
      throw new Error(`WARNING: You are not running as an administrator so WinAppDriver cannot be installed for you; please reinstall as admin`);
    }

    const msiPath = yield downloadWAD();
    yield installWAD(msiPath);

    if (!(yield verifyWAD())) {
      throw new Error(`Installed version of WinAppDriver failed checksum check`);
    }
  });
  return _setupWAD.apply(this, arguments);
}

var _default = setupWAD;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9pbnN0YWxsZXIuanMiXSwibmFtZXMiOlsiV0FEX1ZFUiIsIldBRF9ETCIsIldBRF9ETF9NRDUiLCJXQURfSU5TVEFMTF9QQVRIIiwicHJvY2VzcyIsImVudiIsIlByb2dyYW1GaWxlcyIsInBhdGgiLCJyZXNvbHZlIiwiV0FEX0VYRV9NRDUiLCJXQURfR1VJRCIsImRvd25sb2FkV0FEIiwibG9nIiwiaW5mbyIsInRlbXBGaWxlIiwiVEVNUCIsImJvZHkiLCJyZXF1ZXN0IiwiZ2V0IiwidXJsIiwiZW5jb2RpbmciLCJmcyIsIndyaXRlRmlsZSIsImRvd25sb2FkZWRNZDUiLCJtZDUiLCJFcnJvciIsImluc3RhbGxXQUQiLCJtc2lQYXRoIiwidmVyaWZ5V0FEIiwiZXhpc3RzIiwiaXNBZG1pbiIsInRlc3RGaWxlUGF0aCIsInJpbXJhZiIsImlnbiIsInNldHVwV0FEIiwic3lzdGVtIiwiaXNXaW5kb3dzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQSxNQUFNQSxPQUFPLEdBQUcsS0FBaEI7QUFDQSxNQUFNQyxNQUFNLEdBQUksZ0VBQStERCxPQUFRLCtCQUF2RjtBQUNBLE1BQU1FLFVBQVUsR0FBRyxrQ0FBbkI7QUFFQSxJQUFJQyxnQkFBZ0IsR0FBR0MsT0FBTyxDQUFDQyxHQUFSLENBQVksbUJBQVosS0FBb0NELE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxZQUFoRCxJQUFnRSxtQkFBdkY7O0FBQ0EsMkJBQUFILGdCQUFnQixHQUFHSSxjQUFLQyxPQUFMLENBQWFMLGdCQUFiLEVBQStCLDRCQUEvQixFQUNhLGtCQURiLENBQW5CO0FBRUEsTUFBTU0sV0FBVyxHQUFHLGtDQUFwQjtBQUNBLE1BQU1DLFFBQVEsR0FBRyxzQ0FBakI7OztTQUVlQyxXOzs7OztpREFBZixhQUE4QjtBQUM1QkMsb0JBQUlDLElBQUosQ0FBVSwrQ0FBVjs7QUFDQSxRQUFJQyxRQUFRLEdBQUdQLGNBQUtDLE9BQUwsQ0FBYUosT0FBTyxDQUFDQyxHQUFSLENBQVlVLElBQXpCLEVBQStCLGtCQUEvQixDQUFmOztBQUNBSCxvQkFBSUMsSUFBSixDQUFVLGlCQUFnQkMsUUFBUyxFQUFuQzs7QUFHQUYsb0JBQUlDLElBQUosQ0FBVSxlQUFjWixNQUFPLEtBQS9COztBQUNBLFFBQUllLElBQUksU0FBU0Msd0JBQVFDLEdBQVIsQ0FBWTtBQUFDQyxNQUFBQSxHQUFHLEVBQUVsQixNQUFOO0FBQWNtQixNQUFBQSxRQUFRLEVBQUU7QUFBeEIsS0FBWixDQUFqQjs7QUFDQVIsb0JBQUlDLElBQUosQ0FBVSw2QkFBNEJDLFFBQVMsS0FBL0M7O0FBQ0EsVUFBTU8sa0JBQUdDLFNBQUgsQ0FBYVIsUUFBYixFQUF1QkUsSUFBdkIsRUFBNkI7QUFBQ0ksTUFBQUEsUUFBUSxFQUFFO0FBQVgsS0FBN0IsQ0FBTjtBQUdBLFFBQUlHLGFBQWEsU0FBU0Ysa0JBQUdHLEdBQUgsQ0FBT1YsUUFBUCxDQUExQjs7QUFDQSxRQUFJUyxhQUFhLEtBQUtyQixVQUF0QixFQUFrQztBQUNoQyxZQUFNLElBQUl1QixLQUFKLENBQVcsdUNBQXNDdkIsVUFBVyxPQUFsRCxHQUNDLE9BQU1xQixhQUFjLEVBRC9CLENBQU47QUFFRDs7QUFFRCxXQUFPVCxRQUFQO0FBQ0QsRzs7OztTQUVjWSxVOzs7OztnREFBZixXQUEyQkMsT0FBM0IsRUFBb0M7QUFDbENmLG9CQUFJQyxJQUFKLENBQVUsMEJBQVY7O0FBQ0EsVUFBTSx3QkFBSyxTQUFMLEVBQWdCLENBQUMsSUFBRCxFQUFPYyxPQUFQLEVBQWdCLEtBQWhCLENBQWhCLENBQU47QUFDRCxHOzs7O1NBRWNDLFM7Ozs7OytDQUFmLGFBQTRCO0FBQzFCaEIsb0JBQUlDLElBQUosQ0FBVSxxQ0FBb0NiLE9BQVEsRUFBdEQ7O0FBQ0FZLG9CQUFJQyxJQUFKLENBQVUsa0NBQWlDYixPQUFRLDJDQUFuRDs7QUFDQSxXQUFPLE9BQU1xQixrQkFBR1EsTUFBSCxDQUFVMUIsZ0JBQVYsQ0FBTixLQUNBLE9BQU1rQixrQkFBR0csR0FBSCxDQUFPckIsZ0JBQVAsQ0FBTixNQUFtQ00sV0FEMUM7QUFFRCxHOzs7O1NBRWNxQixPOzs7Ozs2Q0FBZixhQUEwQjtBQUN4QixRQUFJQyxZQUFZLEdBQUd4QixjQUFLQyxPQUFMLENBQWEsR0FBYixFQUFrQixTQUFsQixFQUE2QixVQUE3QixFQUF5QyxjQUF6QyxDQUFuQjs7QUFDQSxRQUFJO0FBQ0YsWUFBTWEsa0JBQUdXLE1BQUgsQ0FBVUQsWUFBVixDQUFOO0FBQ0EsWUFBTVYsa0JBQUdDLFNBQUgsQ0FBYVMsWUFBYixFQUEyQixLQUEzQixDQUFOO0FBQ0EsYUFBTyxJQUFQO0FBQ0QsS0FKRCxDQUlFLE9BQU9FLEdBQVAsRUFBWTtBQUNaLGFBQU8sS0FBUDtBQUNEO0FBQ0YsRzs7OztTQUVjQyxROzs7Ozs4Q0FBZixhQUEyQjtBQUN6QixRQUFJLENBQUNDLHNCQUFPQyxTQUFQLEVBQUwsRUFBeUI7QUFDdkIsWUFBTSxJQUFJWCxLQUFKLENBQVcsNENBQVgsQ0FBTjtBQUNEOztBQUVELGNBQVVHLFNBQVMsRUFBbkIsRUFBdUI7QUFDckJoQixzQkFBSUMsSUFBSixDQUFVLDRCQUEyQmIsT0FBUSwyREFBN0M7O0FBQ0E7QUFDRDs7QUFFRFksb0JBQUlDLElBQUosQ0FBVSx5REFBd0RiLE9BQVEsY0FBMUU7O0FBRUEsUUFBSSxRQUFPOEIsT0FBTyxFQUFkLENBQUosRUFBc0I7QUFDcEIsWUFBTSxJQUFJTCxLQUFKLENBQVcseUhBQVgsQ0FBTjtBQUNEOztBQUVELFVBQU1FLE9BQU8sU0FBU2hCLFdBQVcsRUFBakM7QUFDQSxVQUFNZSxVQUFVLENBQUNDLE9BQUQsQ0FBaEI7O0FBQ0EsUUFBSSxRQUFPQyxTQUFTLEVBQWhCLENBQUosRUFBd0I7QUFDdEIsWUFBTSxJQUFJSCxLQUFKLENBQVcseURBQVgsQ0FBTjtBQUNEO0FBQ0YsRzs7OztlQUtjUyxRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHJlcXVlc3QgZnJvbSAncmVxdWVzdC1wcm9taXNlJztcbmltcG9ydCB7IHN5c3RlbSwgZnMgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IGV4ZWMgfSBmcm9tICd0ZWVuX3Byb2Nlc3MnO1xuaW1wb3J0IGxvZyBmcm9tICcuL2xvZ2dlcic7XG5cbmNvbnN0IFdBRF9WRVIgPSBcIjEuMVwiO1xuY29uc3QgV0FEX0RMID0gYGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvV2luQXBwRHJpdmVyL3JlbGVhc2VzL2Rvd25sb2FkL3Yke1dBRF9WRVJ9L1dpbmRvd3NBcHBsaWNhdGlvbkRyaXZlci5tc2lgO1xuY29uc3QgV0FEX0RMX01ENSA9IFwiMTEwNTU0OGNhODJlYTMyZmI3YmU5Y2E0ZWEyMWVhNThcIjtcblxubGV0IFdBRF9JTlNUQUxMX1BBVEggPSBwcm9jZXNzLmVudltcIlByb2dyYW1GaWxlcyh4ODYpXCJdIHx8IHByb2Nlc3MuZW52LlByb2dyYW1GaWxlcyB8fCBcIkM6XFxcXFByb2dyYW0gRmlsZXNcIjtcbldBRF9JTlNUQUxMX1BBVEggPSBwYXRoLnJlc29sdmUoV0FEX0lOU1RBTExfUEFUSCwgXCJXaW5kb3dzIEFwcGxpY2F0aW9uIERyaXZlclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIldpbkFwcERyaXZlci5leGVcIik7XG5jb25zdCBXQURfRVhFX01ENSA9IFwiMmQxYjJhZGZiN2I4ZDg2ZmQ4OTBlMjYwYzE0MDBhYjdcIjtcbmNvbnN0IFdBRF9HVUlEID0gXCJERENENThCRi0zN0NGLTQ3NTgtQTE1RS1BNjBFN0NGMjBFNDFcIjtcblxuYXN5bmMgZnVuY3Rpb24gZG93bmxvYWRXQUQgKCkge1xuICBsb2cuaW5mbyhgT3BlbmluZyB0ZW1wIGZpbGUgdG8gd3JpdGUgV2luQXBwRHJpdmVyIHRvLi4uYCk7XG4gIGxldCB0ZW1wRmlsZSA9IHBhdGgucmVzb2x2ZShwcm9jZXNzLmVudi5URU1QLCBcIldpbkFwcERyaXZlci5tc2lcIik7XG4gIGxvZy5pbmZvKGBXaWxsIHdyaXRlIHRvICR7dGVtcEZpbGV9YCk7XG5cbiAgLy8gYWN0dWFsbHkgZG93bmxvYWQgdGhlIG1zaSBmaWxlXG4gIGxvZy5pbmZvKGBEb3dubG9hZGluZyAke1dBRF9ETH0uLi5gKTtcbiAgbGV0IGJvZHkgPSBhd2FpdCByZXF1ZXN0LmdldCh7dXJsOiBXQURfREwsIGVuY29kaW5nOiAnYmluYXJ5J30pO1xuICBsb2cuaW5mbyhgV3JpdGluZyBiaW5hcnkgY29udGVudCB0byAke3RlbXBGaWxlfS4uLmApO1xuICBhd2FpdCBmcy53cml0ZUZpbGUodGVtcEZpbGUsIGJvZHksIHtlbmNvZGluZzogJ2JpbmFyeSd9KTtcblxuICAvLyB2YWxpZGF0ZSBjaGVja3N1bVxuICBsZXQgZG93bmxvYWRlZE1kNSA9IGF3YWl0IGZzLm1kNSh0ZW1wRmlsZSk7XG4gIGlmIChkb3dubG9hZGVkTWQ1ICE9PSBXQURfRExfTUQ1KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDaGVja3N1bSB2YWxpZGF0aW9uIGVycm9yOiBleHBlY3RlZCAke1dBRF9ETF9NRDV9IGJ1dCBgICtcbiAgICAgICAgICAgICAgICAgICAgYGdvdCAke2Rvd25sb2FkZWRNZDV9YCk7XG4gIH1cblxuICByZXR1cm4gdGVtcEZpbGU7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGluc3RhbGxXQUQgKG1zaVBhdGgpIHtcbiAgbG9nLmluZm8oYFJ1bm5pbmcgTVNJIGluc3RhbGxlci4uLmApO1xuICBhd2FpdCBleGVjKCdtc2lleGVjJywgWycvaScsIG1zaVBhdGgsICcvcW4nXSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHZlcmlmeVdBRCAoKSB7XG4gIGxvZy5pbmZvKGBZb3UgbXVzdCB1c2UgV2luQXBwRHJpdmVyIHZlcnNpb24gJHtXQURfVkVSfWApO1xuICBsb2cuaW5mbyhgVmVyaWZ5aW5nIFdpbkFwcERyaXZlciB2ZXJzaW9uICR7V0FEX1ZFUn0gaXMgaW5zdGFsbGVkIHZpYSBjb21wYXJpbmcgdGhlIGNoZWNrc3VtLmApO1xuICByZXR1cm4gYXdhaXQgZnMuZXhpc3RzKFdBRF9JTlNUQUxMX1BBVEgpICYmXG4gICAgICAgICBhd2FpdCBmcy5tZDUoV0FEX0lOU1RBTExfUEFUSCkgPT09IFdBRF9FWEVfTUQ1O1xufVxuXG5hc3luYyBmdW5jdGlvbiBpc0FkbWluICgpIHtcbiAgbGV0IHRlc3RGaWxlUGF0aCA9IHBhdGgucmVzb2x2ZShcIi9cIiwgXCJXaW5kb3dzXCIsIFwiU3lzdGVtMzJcIiwgXCJ3YWQtdGVzdC50eHRcIik7XG4gIHRyeSB7XG4gICAgYXdhaXQgZnMucmltcmFmKHRlc3RGaWxlUGF0aCk7XG4gICAgYXdhaXQgZnMud3JpdGVGaWxlKHRlc3RGaWxlUGF0aCwgXCJmb29cIik7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGlnbikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBzZXR1cFdBRCAoKSB7XG4gIGlmICghc3lzdGVtLmlzV2luZG93cygpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDYW4gb25seSBkb3dubG9hZCBXaW5BcHBEcml2ZXIgb24gV2luZG93cyFgKTtcbiAgfVxuXG4gIGlmIChhd2FpdCB2ZXJpZnlXQUQoKSkge1xuICAgIGxvZy5pbmZvKGBXaW5BcHBEcml2ZXIuZXhlIHZlcnNpb24gJHtXQURfVkVSfSBhbHJlYWR5IGV4aXN0cyB3aXRoIGNvcnJlY3QgY2hlY2tzdW0sIG5vdCByZS1kb3dubG9hZGluZ2ApO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxvZy5pbmZvKGBXaW5BcHBEcml2ZXIuZXhlIGRvZXNuJ3QgZXhpc3QgYXQgdGhlIGNvcnJlY3QgdmVyc2lvbiAke1dBRF9WRVJ9LCBzZXR0aW5nIHVwYCk7XG5cbiAgaWYgKCFhd2FpdCBpc0FkbWluKCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFdBUk5JTkc6IFlvdSBhcmUgbm90IHJ1bm5pbmcgYXMgYW4gYWRtaW5pc3RyYXRvciBzbyBXaW5BcHBEcml2ZXIgY2Fubm90IGJlIGluc3RhbGxlZCBmb3IgeW91OyBwbGVhc2UgcmVpbnN0YWxsIGFzIGFkbWluYCk7XG4gIH1cblxuICBjb25zdCBtc2lQYXRoID0gYXdhaXQgZG93bmxvYWRXQUQoKTtcbiAgYXdhaXQgaW5zdGFsbFdBRChtc2lQYXRoKTtcbiAgaWYgKCFhd2FpdCB2ZXJpZnlXQUQoKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgSW5zdGFsbGVkIHZlcnNpb24gb2YgV2luQXBwRHJpdmVyIGZhaWxlZCBjaGVja3N1bSBjaGVja2ApO1xuICB9XG59XG5cbmV4cG9ydCB7XG4gIGRvd25sb2FkV0FELCBzZXR1cFdBRCwgdmVyaWZ5V0FELCBpbnN0YWxsV0FELCBXQURfSU5TVEFMTF9QQVRILCBXQURfR1VJRCxcbn07XG5leHBvcnQgZGVmYXVsdCBzZXR1cFdBRDtcbiJdLCJmaWxlIjoibGliL2luc3RhbGxlci5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiJ9
