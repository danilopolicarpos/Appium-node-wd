"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.WindowsDriver = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumBaseDriver = require("appium-base-driver");

var _appiumSupport = require("appium-support");

var _winappdriver = require("./winappdriver");

var _logger = _interopRequireDefault(require("./logger"));

class WindowsDriver extends _appiumBaseDriver.BaseDriver {
  constructor(opts = {}, shouldValidateCaps = true) {
    super(opts, shouldValidateCaps);
    this.jwpProxyActive = false;
    this.opts.address = opts.address || _winappdriver.DEFAULT_WAD_HOST;
  }

  createSession(caps, reqCaps, curSessions) {
    var _this = this,
        _superprop_callCreateSession = (..._args) => super.createSession(..._args);

    return (0, _asyncToGenerator2.default)(function* () {
      if (!_appiumSupport.system.isWindows()) {
        throw new Error("WinAppDriver tests only run on Windows");
      }

      try {
        let sessionId;

        var _ref = yield _superprop_callCreateSession(caps);

        var _ref2 = (0, _slicedToArray2.default)(_ref, 1);

        sessionId = _ref2[0];
        yield _this.startWinAppDriverSession(curSessions);
        return [sessionId, caps];
      } catch (e) {
        yield _this.deleteSession();
        throw e;
      }
    })();
  }

  getNextAvailablePort(curSessions) {
    let newWADPort = _winappdriver.DEFAULT_WAD_PORT;

    while (_lodash.default.find(curSessions, o => o.WADPort === newWADPort)) {
      newWADPort++;
    }

    return newWADPort;
  }

  startWinAppDriverSession(curSessions) {
    var _this2 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _this2.opts.port = _this2.getNextAvailablePort(curSessions);
      _this2.winAppDriver = new _winappdriver.WinAppDriver({
        app: _this2.opts.app,
        port: _this2.opts.port
      });
      yield _this2.winAppDriver.start();
      yield _this2.winAppDriver.startSession(_this2.caps);
      _this2.proxyReqRes = _this2.winAppDriver.proxyReqRes.bind(_this2.winAppDriver);
      _this2.jwpProxyActive = true;
    })();
  }

  deleteSession() {
    var _this3 = this,
        _superprop_callDeleteSession = (..._args2) => super.deleteSession(..._args2);

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.debug('Deleting WinAppDriver session');

      if (_this3.winAppDriver && _this3.jwpProxyActive) {
        yield _this3.winAppDriver.deleteSession();
        yield _this3.winAppDriver.stop();
        _this3.winAppDriver = null;
      }

      _this3.jwpProxyActive = false;
      yield _superprop_callDeleteSession();
    })();
  }

  proxyActive() {
    return true;
  }

  canProxy() {
    return true;
  }

  get driverData() {
    return {
      WADPort: this.opts.port
    };
  }

}

exports.WindowsDriver = WindowsDriver;
var _default = WindowsDriver;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9kcml2ZXIuanMiXSwibmFtZXMiOlsiV2luZG93c0RyaXZlciIsIkJhc2VEcml2ZXIiLCJjb25zdHJ1Y3RvciIsIm9wdHMiLCJzaG91bGRWYWxpZGF0ZUNhcHMiLCJqd3BQcm94eUFjdGl2ZSIsImFkZHJlc3MiLCJERUZBVUxUX1dBRF9IT1NUIiwiY3JlYXRlU2Vzc2lvbiIsImNhcHMiLCJyZXFDYXBzIiwiY3VyU2Vzc2lvbnMiLCJzeXN0ZW0iLCJpc1dpbmRvd3MiLCJFcnJvciIsInNlc3Npb25JZCIsInN0YXJ0V2luQXBwRHJpdmVyU2Vzc2lvbiIsImUiLCJkZWxldGVTZXNzaW9uIiwiZ2V0TmV4dEF2YWlsYWJsZVBvcnQiLCJuZXdXQURQb3J0IiwiREVGQVVMVF9XQURfUE9SVCIsIl8iLCJmaW5kIiwibyIsIldBRFBvcnQiLCJwb3J0Iiwid2luQXBwRHJpdmVyIiwiV2luQXBwRHJpdmVyIiwiYXBwIiwic3RhcnQiLCJzdGFydFNlc3Npb24iLCJwcm94eVJlcVJlcyIsImJpbmQiLCJsb2dnZXIiLCJkZWJ1ZyIsInN0b3AiLCJwcm94eUFjdGl2ZSIsImNhblByb3h5IiwiZHJpdmVyRGF0YSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUdBLE1BQU1BLGFBQU4sU0FBNEJDLDRCQUE1QixDQUF1QztBQUNyQ0MsRUFBQUEsV0FBVyxDQUFFQyxJQUFJLEdBQUcsRUFBVCxFQUFhQyxrQkFBa0IsR0FBRyxJQUFsQyxFQUF3QztBQUNqRCxVQUFNRCxJQUFOLEVBQVlDLGtCQUFaO0FBQ0EsU0FBS0MsY0FBTCxHQUFzQixLQUF0QjtBQUNBLFNBQUtGLElBQUwsQ0FBVUcsT0FBVixHQUFvQkgsSUFBSSxDQUFDRyxPQUFMLElBQWdCQyw4QkFBcEM7QUFDRDs7QUFFS0MsRUFBQUEsYUFBTixDQUFxQkMsSUFBckIsRUFBMkJDLE9BQTNCLEVBQW9DQyxXQUFwQyxFQUFpRDtBQUFBO0FBQUE7O0FBQUE7QUFFL0MsVUFBSSxDQUFDQyxzQkFBT0MsU0FBUCxFQUFMLEVBQXlCO0FBQ3ZCLGNBQU0sSUFBSUMsS0FBSixDQUFVLHdDQUFWLENBQU47QUFDRDs7QUFDRCxVQUFJO0FBQ0YsWUFBSUMsU0FBSjs7QUFERSx5QkFFa0IsNkJBQW9CTixJQUFwQixDQUZsQjs7QUFBQTs7QUFFRE0sUUFBQUEsU0FGQztBQUdGLGNBQU0sS0FBSSxDQUFDQyx3QkFBTCxDQUE4QkwsV0FBOUIsQ0FBTjtBQUNBLGVBQU8sQ0FBQ0ksU0FBRCxFQUFZTixJQUFaLENBQVA7QUFDRCxPQUxELENBS0UsT0FBT1EsQ0FBUCxFQUFVO0FBQ1YsY0FBTSxLQUFJLENBQUNDLGFBQUwsRUFBTjtBQUNBLGNBQU1ELENBQU47QUFDRDtBQWI4QztBQWNoRDs7QUFFREUsRUFBQUEsb0JBQW9CLENBQUVSLFdBQUYsRUFBZTtBQUNqQyxRQUFJUyxVQUFVLEdBQUdDLDhCQUFqQjs7QUFHQSxXQUFPQyxnQkFBRUMsSUFBRixDQUFPWixXQUFQLEVBQXFCYSxDQUFELElBQU9BLENBQUMsQ0FBQ0MsT0FBRixLQUFjTCxVQUF6QyxDQUFQLEVBQTZEO0FBQzNEQSxNQUFBQSxVQUFVO0FBQ1g7O0FBRUQsV0FBT0EsVUFBUDtBQUNEOztBQUVLSixFQUFBQSx3QkFBTixDQUFnQ0wsV0FBaEMsRUFBNkM7QUFBQTs7QUFBQTtBQUUzQyxNQUFBLE1BQUksQ0FBQ1IsSUFBTCxDQUFVdUIsSUFBVixHQUFpQixNQUFJLENBQUNQLG9CQUFMLENBQTBCUixXQUExQixDQUFqQjtBQUNBLE1BQUEsTUFBSSxDQUFDZ0IsWUFBTCxHQUFvQixJQUFJQywwQkFBSixDQUFpQjtBQUNuQ0MsUUFBQUEsR0FBRyxFQUFFLE1BQUksQ0FBQzFCLElBQUwsQ0FBVTBCLEdBRG9CO0FBRW5DSCxRQUFBQSxJQUFJLEVBQUUsTUFBSSxDQUFDdkIsSUFBTCxDQUFVdUI7QUFGbUIsT0FBakIsQ0FBcEI7QUFLQSxZQUFNLE1BQUksQ0FBQ0MsWUFBTCxDQUFrQkcsS0FBbEIsRUFBTjtBQUNBLFlBQU0sTUFBSSxDQUFDSCxZQUFMLENBQWtCSSxZQUFsQixDQUErQixNQUFJLENBQUN0QixJQUFwQyxDQUFOO0FBQ0EsTUFBQSxNQUFJLENBQUN1QixXQUFMLEdBQW1CLE1BQUksQ0FBQ0wsWUFBTCxDQUFrQkssV0FBbEIsQ0FBOEJDLElBQTlCLENBQW1DLE1BQUksQ0FBQ04sWUFBeEMsQ0FBbkI7QUFHQSxNQUFBLE1BQUksQ0FBQ3RCLGNBQUwsR0FBc0IsSUFBdEI7QUFiMkM7QUFjNUM7O0FBRUthLEVBQUFBLGFBQU4sR0FBdUI7QUFBQTtBQUFBOztBQUFBO0FBQ3JCZ0Isc0JBQU9DLEtBQVAsQ0FBYSwrQkFBYjs7QUFFQSxVQUFJLE1BQUksQ0FBQ1IsWUFBTCxJQUFxQixNQUFJLENBQUN0QixjQUE5QixFQUE4QztBQUM1QyxjQUFNLE1BQUksQ0FBQ3NCLFlBQUwsQ0FBa0JULGFBQWxCLEVBQU47QUFDQSxjQUFNLE1BQUksQ0FBQ1MsWUFBTCxDQUFrQlMsSUFBbEIsRUFBTjtBQUNBLFFBQUEsTUFBSSxDQUFDVCxZQUFMLEdBQW9CLElBQXBCO0FBQ0Q7O0FBQ0QsTUFBQSxNQUFJLENBQUN0QixjQUFMLEdBQXNCLEtBQXRCO0FBQ0EsWUFBTSw4QkFBTjtBQVRxQjtBQVV0Qjs7QUFFRGdDLEVBQUFBLFdBQVcsR0FBSTtBQUViLFdBQU8sSUFBUDtBQUNEOztBQUVEQyxFQUFBQSxRQUFRLEdBQUk7QUFFVixXQUFPLElBQVA7QUFDRDs7QUFFRCxNQUFJQyxVQUFKLEdBQWtCO0FBQ2hCLFdBQU87QUFBQ2QsTUFBQUEsT0FBTyxFQUFFLEtBQUt0QixJQUFMLENBQVV1QjtBQUFwQixLQUFQO0FBQ0Q7O0FBMUVvQzs7O2VBOEV4QjFCLGEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgQmFzZURyaXZlciB9IGZyb20gJ2FwcGl1bS1iYXNlLWRyaXZlcic7XG5pbXBvcnQgeyBzeXN0ZW0gfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgeyBXaW5BcHBEcml2ZXIsIERFRkFVTFRfV0FEX0hPU1QsIERFRkFVTFRfV0FEX1BPUlQgfSBmcm9tICcuL3dpbmFwcGRyaXZlcic7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4vbG9nZ2VyJztcblxuLy8gQXBwaXVtIGluc3RhbnRpYXRlcyB0aGlzIGNsYXNzXG5jbGFzcyBXaW5kb3dzRHJpdmVyIGV4dGVuZHMgQmFzZURyaXZlciB7XG4gIGNvbnN0cnVjdG9yIChvcHRzID0ge30sIHNob3VsZFZhbGlkYXRlQ2FwcyA9IHRydWUpIHtcbiAgICBzdXBlcihvcHRzLCBzaG91bGRWYWxpZGF0ZUNhcHMpO1xuICAgIHRoaXMuandwUHJveHlBY3RpdmUgPSBmYWxzZTtcbiAgICB0aGlzLm9wdHMuYWRkcmVzcyA9IG9wdHMuYWRkcmVzcyB8fCBERUZBVUxUX1dBRF9IT1NUO1xuICB9XG5cbiAgYXN5bmMgY3JlYXRlU2Vzc2lvbiAoY2FwcywgcmVxQ2FwcywgY3VyU2Vzc2lvbnMpIHtcblxuICAgIGlmICghc3lzdGVtLmlzV2luZG93cygpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJXaW5BcHBEcml2ZXIgdGVzdHMgb25seSBydW4gb24gV2luZG93c1wiKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGxldCBzZXNzaW9uSWQ7XG4gICAgICBbc2Vzc2lvbklkXSA9IGF3YWl0IHN1cGVyLmNyZWF0ZVNlc3Npb24oY2Fwcyk7XG4gICAgICBhd2FpdCB0aGlzLnN0YXJ0V2luQXBwRHJpdmVyU2Vzc2lvbihjdXJTZXNzaW9ucyk7XG4gICAgICByZXR1cm4gW3Nlc3Npb25JZCwgY2Fwc107XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgYXdhaXQgdGhpcy5kZWxldGVTZXNzaW9uKCk7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfVxuXG4gIGdldE5leHRBdmFpbGFibGVQb3J0IChjdXJTZXNzaW9ucykge1xuICAgIGxldCBuZXdXQURQb3J0ID0gREVGQVVMVF9XQURfUE9SVDtcblxuICAgIC8vIHN0YXJ0IGF0IDQ3MjQgYW5kIGdvIHVwIHRpbGwgd2UgZmluZCBhIHBvcnQgdGhhdCBpc24ndCBpbiB1c2VcbiAgICB3aGlsZSAoXy5maW5kKGN1clNlc3Npb25zLCAobykgPT4gby5XQURQb3J0ID09PSBuZXdXQURQb3J0KSkge1xuICAgICAgbmV3V0FEUG9ydCsrO1xuICAgIH1cblxuICAgIHJldHVybiBuZXdXQURQb3J0O1xuICB9XG5cbiAgYXN5bmMgc3RhcnRXaW5BcHBEcml2ZXJTZXNzaW9uIChjdXJTZXNzaW9ucykge1xuXG4gICAgdGhpcy5vcHRzLnBvcnQgPSB0aGlzLmdldE5leHRBdmFpbGFibGVQb3J0KGN1clNlc3Npb25zKTtcbiAgICB0aGlzLndpbkFwcERyaXZlciA9IG5ldyBXaW5BcHBEcml2ZXIoe1xuICAgICAgYXBwOiB0aGlzLm9wdHMuYXBwLFxuICAgICAgcG9ydDogdGhpcy5vcHRzLnBvcnRcbiAgICB9KTtcblxuICAgIGF3YWl0IHRoaXMud2luQXBwRHJpdmVyLnN0YXJ0KCk7XG4gICAgYXdhaXQgdGhpcy53aW5BcHBEcml2ZXIuc3RhcnRTZXNzaW9uKHRoaXMuY2Fwcyk7XG4gICAgdGhpcy5wcm94eVJlcVJlcyA9IHRoaXMud2luQXBwRHJpdmVyLnByb3h5UmVxUmVzLmJpbmQodGhpcy53aW5BcHBEcml2ZXIpO1xuICAgIC8vIG5vdyB0aGF0IGV2ZXJ5dGhpbmcgaGFzIHN0YXJ0ZWQgc3VjY2Vzc2Z1bGx5LCB0dXJuIG9uIHByb3h5aW5nIHNvIGFsbFxuICAgIC8vIHN1YnNlcXVlbnQgc2Vzc2lvbiByZXF1ZXN0cyBnbyBzdHJhaWdodCB0by9mcm9tIFdpbkFwcERyaXZlclxuICAgIHRoaXMuandwUHJveHlBY3RpdmUgPSB0cnVlO1xuICB9XG5cbiAgYXN5bmMgZGVsZXRlU2Vzc2lvbiAoKSB7XG4gICAgbG9nZ2VyLmRlYnVnKCdEZWxldGluZyBXaW5BcHBEcml2ZXIgc2Vzc2lvbicpO1xuXG4gICAgaWYgKHRoaXMud2luQXBwRHJpdmVyICYmIHRoaXMuandwUHJveHlBY3RpdmUpIHtcbiAgICAgIGF3YWl0IHRoaXMud2luQXBwRHJpdmVyLmRlbGV0ZVNlc3Npb24oKTtcbiAgICAgIGF3YWl0IHRoaXMud2luQXBwRHJpdmVyLnN0b3AoKTtcbiAgICAgIHRoaXMud2luQXBwRHJpdmVyID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5qd3BQcm94eUFjdGl2ZSA9IGZhbHNlO1xuICAgIGF3YWl0IHN1cGVyLmRlbGV0ZVNlc3Npb24oKTtcbiAgfVxuXG4gIHByb3h5QWN0aXZlICgpIHtcbiAgICAvLyB3ZSBhbHdheXMgaGF2ZSBhbiBhY3RpdmUgcHJveHkgdG8gdGhlIFdpbkFwcERyaXZlciBzZXJ2ZXJcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGNhblByb3h5ICgpIHtcbiAgICAvLyB3ZSBjYW4gYWx3YXlzIHByb3h5IHRvIHRoZSBXaW5BcHBEcml2ZXIgc2VydmVyXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBnZXQgZHJpdmVyRGF0YSAoKSB7XG4gICAgcmV0dXJuIHtXQURQb3J0OiB0aGlzLm9wdHMucG9ydH07XG4gIH1cbn1cblxuZXhwb3J0IHsgV2luZG93c0RyaXZlciB9O1xuZXhwb3J0IGRlZmF1bHQgV2luZG93c0RyaXZlcjtcbiJdLCJmaWxlIjoibGliL2RyaXZlci5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiJ9
