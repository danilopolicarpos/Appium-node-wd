"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.desiredCapConstraints = void 0;
const desiredCapConstraints = {
  platformName: {
    presence: true,
    isString: true,
    inclusionCaseInsensitive: ['Windows']
  },
  browserName: {
    isString: true
  },
  app: {
    isString: true
  },
  launchTimeout: {},
  calendarFormat: {
    isString: true
  },
  bundleId: {
    isString: true
  },
  udid: {
    isString: true
  },
  locationServicesEnabled: {
    isBoolean: true
  },
  locationServicesAuthorized: {
    isBoolean: true
  },
  autoAcceptAlerts: {
    isBoolean: true
  },
  autoDismissAlerts: {
    isBoolean: true
  },
  nativeInstrumentsLib: {
    isBoolean: true
  },
  nativeWebTap: {
    isBoolean: true
  },
  safariInitialUrl: {
    isString: true
  },
  safariAllowPopups: {
    isBoolean: true
  },
  safariIgnoreFraudWarning: {
    isBoolean: true
  },
  safariOpenLinksInBackground: {
    isBoolean: true
  },
  keepKeyChains: {
    isBoolean: true
  },
  localizableStringsDir: {
    isString: true
  },
  processArguments: {},
  interKeyDelay: {
    isNumber: true
  },
  showIOSLog: {
    isBoolean: true
  },
  sendKeyStrategy: {
    isString: true,
    inclusion: ['oneByOne', 'grouped', 'setValue']
  },
  screenshotWaitTimeout: {
    isNumber: true
  },
  waitForAppScript: {
    isString: true
  },
  webviewConnectRetries: {
    isNumber: true
  },
  appName: {
    isString: true
  }
};
exports.desiredCapConstraints = desiredCapConstraints;
var _default = desiredCapConstraints;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9kZXNpcmVkLWNhcHMuanMiXSwibmFtZXMiOlsiZGVzaXJlZENhcENvbnN0cmFpbnRzIiwicGxhdGZvcm1OYW1lIiwicHJlc2VuY2UiLCJpc1N0cmluZyIsImluY2x1c2lvbkNhc2VJbnNlbnNpdGl2ZSIsImJyb3dzZXJOYW1lIiwiYXBwIiwibGF1bmNoVGltZW91dCIsImNhbGVuZGFyRm9ybWF0IiwiYnVuZGxlSWQiLCJ1ZGlkIiwibG9jYXRpb25TZXJ2aWNlc0VuYWJsZWQiLCJpc0Jvb2xlYW4iLCJsb2NhdGlvblNlcnZpY2VzQXV0aG9yaXplZCIsImF1dG9BY2NlcHRBbGVydHMiLCJhdXRvRGlzbWlzc0FsZXJ0cyIsIm5hdGl2ZUluc3RydW1lbnRzTGliIiwibmF0aXZlV2ViVGFwIiwic2FmYXJpSW5pdGlhbFVybCIsInNhZmFyaUFsbG93UG9wdXBzIiwic2FmYXJpSWdub3JlRnJhdWRXYXJuaW5nIiwic2FmYXJpT3BlbkxpbmtzSW5CYWNrZ3JvdW5kIiwia2VlcEtleUNoYWlucyIsImxvY2FsaXphYmxlU3RyaW5nc0RpciIsInByb2Nlc3NBcmd1bWVudHMiLCJpbnRlcktleURlbGF5IiwiaXNOdW1iZXIiLCJzaG93SU9TTG9nIiwic2VuZEtleVN0cmF0ZWd5IiwiaW5jbHVzaW9uIiwic2NyZWVuc2hvdFdhaXRUaW1lb3V0Iiwid2FpdEZvckFwcFNjcmlwdCIsIndlYnZpZXdDb25uZWN0UmV0cmllcyIsImFwcE5hbWUiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUVBLE1BQU1BLHFCQUFxQixHQUFHO0FBQzVCQyxFQUFBQSxZQUFZLEVBQUU7QUFDWkMsSUFBQUEsUUFBUSxFQUFFLElBREU7QUFFWkMsSUFBQUEsUUFBUSxFQUFFLElBRkU7QUFHWkMsSUFBQUEsd0JBQXdCLEVBQUUsQ0FBQyxTQUFEO0FBSGQsR0FEYztBQU01QkMsRUFBQUEsV0FBVyxFQUFFO0FBQ1hGLElBQUFBLFFBQVEsRUFBRTtBQURDLEdBTmU7QUFTNUJHLEVBQUFBLEdBQUcsRUFBRTtBQUNISCxJQUFBQSxRQUFRLEVBQUU7QUFEUCxHQVR1QjtBQWE1QkksRUFBQUEsYUFBYSxFQUFFLEVBYmE7QUFpQjVCQyxFQUFBQSxjQUFjLEVBQUU7QUFDZEwsSUFBQUEsUUFBUSxFQUFFO0FBREksR0FqQlk7QUFvQjVCTSxFQUFBQSxRQUFRLEVBQUU7QUFDUk4sSUFBQUEsUUFBUSxFQUFFO0FBREYsR0FwQmtCO0FBdUI1Qk8sRUFBQUEsSUFBSSxFQUFFO0FBQ0pQLElBQUFBLFFBQVEsRUFBRTtBQUROLEdBdkJzQjtBQTBCNUJRLEVBQUFBLHVCQUF1QixFQUFFO0FBQ3ZCQyxJQUFBQSxTQUFTLEVBQUU7QUFEWSxHQTFCRztBQTZCNUJDLEVBQUFBLDBCQUEwQixFQUFFO0FBQzFCRCxJQUFBQSxTQUFTLEVBQUU7QUFEZSxHQTdCQTtBQWdDNUJFLEVBQUFBLGdCQUFnQixFQUFFO0FBQ2hCRixJQUFBQSxTQUFTLEVBQUU7QUFESyxHQWhDVTtBQW1DNUJHLEVBQUFBLGlCQUFpQixFQUFFO0FBQ2pCSCxJQUFBQSxTQUFTLEVBQUU7QUFETSxHQW5DUztBQXNDNUJJLEVBQUFBLG9CQUFvQixFQUFFO0FBQ3BCSixJQUFBQSxTQUFTLEVBQUU7QUFEUyxHQXRDTTtBQXlDNUJLLEVBQUFBLFlBQVksRUFBRTtBQUNaTCxJQUFBQSxTQUFTLEVBQUU7QUFEQyxHQXpDYztBQTRDNUJNLEVBQUFBLGdCQUFnQixFQUFFO0FBQ2hCZixJQUFBQSxRQUFRLEVBQUU7QUFETSxHQTVDVTtBQStDNUJnQixFQUFBQSxpQkFBaUIsRUFBRTtBQUNqQlAsSUFBQUEsU0FBUyxFQUFFO0FBRE0sR0EvQ1M7QUFrRDVCUSxFQUFBQSx3QkFBd0IsRUFBRTtBQUN4QlIsSUFBQUEsU0FBUyxFQUFFO0FBRGEsR0FsREU7QUFxRDVCUyxFQUFBQSwyQkFBMkIsRUFBRTtBQUMzQlQsSUFBQUEsU0FBUyxFQUFFO0FBRGdCLEdBckREO0FBd0Q1QlUsRUFBQUEsYUFBYSxFQUFFO0FBQ2JWLElBQUFBLFNBQVMsRUFBRTtBQURFLEdBeERhO0FBMkQ1QlcsRUFBQUEscUJBQXFCLEVBQUU7QUFDckJwQixJQUFBQSxRQUFRLEVBQUU7QUFEVyxHQTNESztBQThENUJxQixFQUFBQSxnQkFBZ0IsRUFBRSxFQTlEVTtBQWtFNUJDLEVBQUFBLGFBQWEsRUFBRTtBQUNiQyxJQUFBQSxRQUFRLEVBQUU7QUFERyxHQWxFYTtBQXFFNUJDLEVBQUFBLFVBQVUsRUFBRTtBQUNWZixJQUFBQSxTQUFTLEVBQUU7QUFERCxHQXJFZ0I7QUF3RTVCZ0IsRUFBQUEsZUFBZSxFQUFFO0FBQ2Z6QixJQUFBQSxRQUFRLEVBQUUsSUFESztBQUVmMEIsSUFBQUEsU0FBUyxFQUFFLENBQUMsVUFBRCxFQUFhLFNBQWIsRUFBd0IsVUFBeEI7QUFGSSxHQXhFVztBQTRFNUJDLEVBQUFBLHFCQUFxQixFQUFFO0FBQ3JCSixJQUFBQSxRQUFRLEVBQUU7QUFEVyxHQTVFSztBQStFNUJLLEVBQUFBLGdCQUFnQixFQUFFO0FBQ2hCNUIsSUFBQUEsUUFBUSxFQUFFO0FBRE0sR0EvRVU7QUFrRjVCNkIsRUFBQUEscUJBQXFCLEVBQUU7QUFDckJOLElBQUFBLFFBQVEsRUFBRTtBQURXLEdBbEZLO0FBcUY1Qk8sRUFBQUEsT0FBTyxFQUFFO0FBQ1A5QixJQUFBQSxRQUFRLEVBQUU7QUFESDtBQXJGbUIsQ0FBOUI7O2VBMkZlSCxxQiIsInNvdXJjZXNDb250ZW50IjpbIlxuXG5jb25zdCBkZXNpcmVkQ2FwQ29uc3RyYWludHMgPSB7XG4gIHBsYXRmb3JtTmFtZToge1xuICAgIHByZXNlbmNlOiB0cnVlLFxuICAgIGlzU3RyaW5nOiB0cnVlLFxuICAgIGluY2x1c2lvbkNhc2VJbnNlbnNpdGl2ZTogWydXaW5kb3dzJ11cbiAgfSxcbiAgYnJvd3Nlck5hbWU6IHtcbiAgICBpc1N0cmluZzogdHJ1ZVxuICB9LFxuICBhcHA6IHtcbiAgICBpc1N0cmluZzogdHJ1ZVxuICB9LFxuXG4gIGxhdW5jaFRpbWVvdXQ6IHtcbiAgICAvLyByZWNvZ25pemUgdGhlIGNhcCxcbiAgICAvLyBidXQgdmFsaWRhdGUgaW4gdGhlIGRyaXZlciN2YWxpZGF0ZURlc2lyZWRDYXBzIG1ldGhvZFxuICB9LFxuICBjYWxlbmRhckZvcm1hdDoge1xuICAgIGlzU3RyaW5nOiB0cnVlXG4gIH0sXG4gIGJ1bmRsZUlkOiB7XG4gICAgaXNTdHJpbmc6IHRydWVcbiAgfSxcbiAgdWRpZDoge1xuICAgIGlzU3RyaW5nOiB0cnVlXG4gIH0sXG4gIGxvY2F0aW9uU2VydmljZXNFbmFibGVkOiB7XG4gICAgaXNCb29sZWFuOiB0cnVlXG4gIH0sXG4gIGxvY2F0aW9uU2VydmljZXNBdXRob3JpemVkOiB7XG4gICAgaXNCb29sZWFuOiB0cnVlXG4gIH0sXG4gIGF1dG9BY2NlcHRBbGVydHM6IHtcbiAgICBpc0Jvb2xlYW46IHRydWVcbiAgfSxcbiAgYXV0b0Rpc21pc3NBbGVydHM6IHtcbiAgICBpc0Jvb2xlYW46IHRydWVcbiAgfSxcbiAgbmF0aXZlSW5zdHJ1bWVudHNMaWI6IHtcbiAgICBpc0Jvb2xlYW46IHRydWVcbiAgfSxcbiAgbmF0aXZlV2ViVGFwOiB7XG4gICAgaXNCb29sZWFuOiB0cnVlXG4gIH0sXG4gIHNhZmFyaUluaXRpYWxVcmw6IHtcbiAgICBpc1N0cmluZzogdHJ1ZVxuICB9LFxuICBzYWZhcmlBbGxvd1BvcHVwczoge1xuICAgIGlzQm9vbGVhbjogdHJ1ZVxuICB9LFxuICBzYWZhcmlJZ25vcmVGcmF1ZFdhcm5pbmc6IHtcbiAgICBpc0Jvb2xlYW46IHRydWVcbiAgfSxcbiAgc2FmYXJpT3BlbkxpbmtzSW5CYWNrZ3JvdW5kOiB7XG4gICAgaXNCb29sZWFuOiB0cnVlXG4gIH0sXG4gIGtlZXBLZXlDaGFpbnM6IHtcbiAgICBpc0Jvb2xlYW46IHRydWVcbiAgfSxcbiAgbG9jYWxpemFibGVTdHJpbmdzRGlyOiB7XG4gICAgaXNTdHJpbmc6IHRydWVcbiAgfSxcbiAgcHJvY2Vzc0FyZ3VtZW50czoge1xuICAgIC8vIHJlY29nbml6ZSB0aGUgY2FwLFxuICAgIC8vIGJ1dCB2YWxpZGF0ZSBpbiB0aGUgZHJpdmVyI3ZhbGlkYXRlRGVzaXJlZENhcHMgbWV0aG9kXG4gIH0sXG4gIGludGVyS2V5RGVsYXk6IHtcbiAgICBpc051bWJlcjogdHJ1ZVxuICB9LFxuICBzaG93SU9TTG9nOiB7XG4gICAgaXNCb29sZWFuOiB0cnVlXG4gIH0sXG4gIHNlbmRLZXlTdHJhdGVneToge1xuICAgIGlzU3RyaW5nOiB0cnVlLFxuICAgIGluY2x1c2lvbjogWydvbmVCeU9uZScsICdncm91cGVkJywgJ3NldFZhbHVlJ11cbiAgfSxcbiAgc2NyZWVuc2hvdFdhaXRUaW1lb3V0OiB7XG4gICAgaXNOdW1iZXI6IHRydWVcbiAgfSxcbiAgd2FpdEZvckFwcFNjcmlwdDoge1xuICAgIGlzU3RyaW5nOiB0cnVlXG4gIH0sXG4gIHdlYnZpZXdDb25uZWN0UmV0cmllczoge1xuICAgIGlzTnVtYmVyOiB0cnVlXG4gIH0sXG4gIGFwcE5hbWU6IHtcbiAgICBpc1N0cmluZzogdHJ1ZVxuICB9XG59O1xuXG5leHBvcnQgeyBkZXNpcmVkQ2FwQ29uc3RyYWludHMgfTtcbmV4cG9ydCBkZWZhdWx0IGRlc2lyZWRDYXBDb25zdHJhaW50cztcbiJdLCJmaWxlIjoibGliL2Rlc2lyZWQtY2Fwcy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiJ9
