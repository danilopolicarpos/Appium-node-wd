"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.DEFAULT_WAD_PORT = exports.DEFAULT_WAD_HOST = exports.WinAppDriver = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _events = _interopRequireDefault(require("events"));

var _appiumBaseDriver = require("appium-base-driver");

var _logger = _interopRequireDefault(require("./logger"));

var _teen_process = require("teen_process");

var _installer = require("./installer");

var _asyncbox = require("asyncbox");

var _child_process = _interopRequireDefault(require("child_process"));

var _bluebird = _interopRequireDefault(require("bluebird"));

const REQUIRED_PARAMS = [];
const DEFAULT_WAD_HOST = '127.0.0.1';
exports.DEFAULT_WAD_HOST = DEFAULT_WAD_HOST;
const DEFAULT_WAD_PORT = 4724;
exports.DEFAULT_WAD_PORT = DEFAULT_WAD_PORT;

class WinAppDriver extends _events.default.EventEmitter {
  constructor(opts = {}) {
    const host = opts.host,
          port = opts.port;
    super();

    for (var _i = 0; _i < REQUIRED_PARAMS.length; _i++) {
      let req = REQUIRED_PARAMS[_i];

      if (!opts || !opts[req]) {
        throw new Error(`Option '${req}' is required!`);
      }

      this[req] = opts[req];
    }

    this.proxyHost = host || DEFAULT_WAD_HOST;
    this.proxyPort = port || DEFAULT_WAD_PORT;
    this.proc = null;
    this.state = WinAppDriver.STATE_STOPPED;
    this.jwproxy = new _appiumBaseDriver.JWProxy({
      server: this.proxyHost,
      port: this.proxyPort
    });
  }

  start() {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (!(yield (0, _installer.verifyWAD)())) {
        throw new Error("Could not verify WinAppDriver install; re-run install");
      }

      _this.changeState(WinAppDriver.STATE_STARTING);

      let args = [_this.proxyPort + "/wd/hub"];

      const startDetector = stdout => {
        return stdout.indexOf("listening for requests") !== -1;
      };

      let processIsAlive = false;

      try {
        yield _this.killAll();
        _this.proc = new _teen_process.SubProcess(_installer.WAD_INSTALL_PATH, args, {
          encoding: 'ucs2'
        });
        processIsAlive = true;
        var _arr = ['STDOUT', 'STDERR'];

        for (var _i2 = 0; _i2 < _arr.length; _i2++) {
          let stream = _arr[_i2];

          _this.proc.on(`lines-${stream.toLowerCase()}`, lines => {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (var _iterator = lines[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                let l = _step.value;

                _logger.default.info(`[${stream}] ${l.trim()}`);
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                  _iterator.return();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }
          });
        }

        _this.proc.on('exit', (code, signal) => {
          processIsAlive = false;

          if (_this.state !== WinAppDriver.STATE_STOPPED && _this.state !== WinAppDriver.STATE_STOPPING) {
            let msg = `WinAppDriver exited unexpectedly with code ${code}, ` + `signal ${signal}`;

            _logger.default.error(msg);

            _this.changeState(WinAppDriver.STATE_STOPPED);
          }
        });

        _logger.default.info(`Spawning winappdriver with: ${args.join(' ')}`);

        yield _this.proc.start(startDetector);
        yield _this.waitForOnline();
      } catch (e) {
        _this.emit(WinAppDriver.EVENT_ERROR, e);

        if (processIsAlive) {
          yield _this.proc.stop();
        }

        _logger.default.errorAndThrow(e);
      }
    })();
  }

  sessionId() {
    if (this.state !== WinAppDriver.STATE_ONLINE) {
      return null;
    }

    return this.jwproxy.sessionId;
  }

  waitForOnline() {
    var _this2 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let winappdriverStopped = false;
      yield (0, _asyncbox.retryInterval)(20, 200, (0, _asyncToGenerator2.default)(function* () {
        if ([WinAppDriver.STATE_STOPPED, WinAppDriver.STATE_ONLINE].indexOf(_this2.state) >= 0) {
          winappdriverStopped = _this2.state === WinAppDriver.STATE_STOPPED;
          return;
        }

        if (yield _this2.getStatus()) {
          _this2.changeState(WinAppDriver.STATE_ONLINE);
        }
      }));

      if (winappdriverStopped) {
        throw new Error('WinAppDriver crashed during startup.');
      }
    })();
  }

  getStatus() {
    var _this3 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      const resBlock = yield _this3.jwproxy.proxy('/status', 'GET');

      if (resBlock[0].statusCode === 200) {
        _logger.default.info(`Status call returned 200. we're online and ready to run tests`);

        return true;
      }

      return false;
    })();
  }

  startSession(caps) {
    var _this4 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _this4.proxyReqRes = _this4.jwproxy.proxyReqRes.bind(_this4.jwproxy);
      yield _this4.jwproxy.command('/session', 'POST', {
        desiredCapabilities: caps
      });
    })();
  }

  stop(emitStates = true) {
    var _this5 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (emitStates) {
        _this5.changeState(WinAppDriver.STATE_STOPPING);
      }

      try {
        if (_this5.proc) {
          yield _this5.proc.stop();
        }

        if (emitStates) {
          _this5.changeState(WinAppDriver.STATE_STOPPED);
        }
      } catch (e) {
        _logger.default.error(e);
      }
    })();
  }

  changeState(state) {
    this.state = state;

    _logger.default.debug(`WinAppDriver changed state to '${state}'`);

    this.emit(WinAppDriver.EVENT_CHANGED, {
      state
    });
  }

  sendCommand(url, method, body) {
    var _this6 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      return yield _this6.jwproxy.command(url, method, body);
    })();
  }

  proxyReq(req, res) {
    var _this7 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      return yield _this7.jwproxy.proxyReqRes(req, res);
    })();
  }

  killAll() {
    var _this8 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let cmd;
      cmd = "FOR /F \"usebackq tokens=5\" %a in (`netstat -nao ^| " + "findstr /R /C:\"" + _this8.proxyPort + " \"`) do (" + "FOR /F \"usebackq\" %b in (`TASKLIST /FI \"PID eq %a\" ^| " + "findstr /I winappdriver.exe`) do (IF NOT %b==\"\" TASKKILL " + "/F /PID %a))";

      _logger.default.info(`Killing any old WinAppDrivers on same port, running: ${cmd}`);

      try {
        yield _bluebird.default.promisify(_child_process.default.exec)(cmd);

        _logger.default.info("Successfully cleaned up old WinAppDrivers");
      } catch (err) {
        _logger.default.info("No old WinAppDrivers seemed to exist");
      }
    })();
  }

  deleteSession() {
    var _this9 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.debug('Deleting WinAppDriver server session');

      try {
        yield _this9.jwproxy.command('/', 'DELETE');
      } catch (err) {
        _logger.default.warn(`Did not get confirmation WinAppDriver deleteSession worked; ` + `Error was: ${err}`);
      }
    })();
  }

}

exports.WinAppDriver = WinAppDriver;
WinAppDriver.EVENT_ERROR = 'winappdriver_error';
WinAppDriver.EVENT_CHANGED = 'stateChanged';
WinAppDriver.STATE_STOPPED = 'stopped';
WinAppDriver.STATE_STARTING = 'starting';
WinAppDriver.STATE_ONLINE = 'online';
WinAppDriver.STATE_STOPPING = 'stopping';
var _default = WinAppDriver;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
