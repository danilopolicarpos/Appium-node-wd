"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.fs = void 0;

require("source-map-support/register");

var _fs2 = _interopRequireDefault(require("fs"));

var _rimraf = _interopRequireDefault(require("rimraf"));

var _md5File = _interopRequireDefault(require("md5-file"));

var _ncp = _interopRequireDefault(require("ncp"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _mv = _interopRequireDefault(require("mv"));

var _which = _interopRequireDefault(require("which"));

var _glob = _interopRequireDefault(require("glob"));

var _crypto = _interopRequireDefault(require("crypto"));

const md5 = _bluebird.default.promisify(_md5File.default);

let fs = {
  async hasAccess(path) {
    try {
      await this.access(path, _fs2.default.R_OK);
    } catch (err) {
      return false;
    }

    return true;
  },

  exists(path) {
    return this.hasAccess(path);
  },

  rimraf: _bluebird.default.promisify(_rimraf.default),

  async mkdir(dirName) {
    let _mkdir = _bluebird.default.promisify(_fs2.default.mkdir);

    try {
      await _mkdir(dirName);
    } catch (err) {
      if (err && err.code !== 'EEXIST') {
        throw err;
      }
    }
  },

  async copyFile(source, destination, ...otherArgs) {
    if (!(await this.hasAccess(source))) {
      throw new Error(`The file at '${source}' does not exist or is not accessible`);
    }

    return await _bluebird.default.promisify(_ncp.default)(source, destination, ...otherArgs);
  },

  async md5(filePath) {
    return await md5(filePath);
  },

  mv: _bluebird.default.promisify(_mv.default),
  which: _bluebird.default.promisify(_which.default),
  glob: _bluebird.default.promisify(_glob.default),

  async hash(filePath, algorithm = 'sha1') {
    return await new _bluebird.default((resolve, reject) => {
      const fileHash = _crypto.default.createHash(algorithm);

      const readStream = _fs2.default.createReadStream(filePath);

      readStream.on('error', e => reject(new Error(`Cannot calculate ${algorithm} hash for '${filePath}'. Original error: ${e.message}`)));
      readStream.on('data', chunk => fileHash.update(chunk));
      readStream.on('end', () => resolve(fileHash.digest('hex')));
    });
  }

};
exports.fs = fs;
const simples = ['open', 'close', 'access', 'readFile', 'writeFile', 'write', 'read', 'readlink', 'chmod', 'unlink', 'readdir', 'stat', 'rename', 'lstat'];

for (const s of simples) {
  fs[s] = _bluebird.default.promisify(_fs2.default[s]);
}

const syncFunctions = ['createReadStream', 'createWriteStream'];

for (const s of syncFunctions) {
  fs[s] = _fs2.default[s];
}

const constants = ['F_OK', 'R_OK', 'W_OK', 'X_OK', 'constants'];

for (const c of constants) {
  fs[c] = _fs2.default[c];
}

var _default = fs;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9mcy5qcyJdLCJuYW1lcyI6WyJtZDUiLCJCIiwicHJvbWlzaWZ5IiwibWQ1ZmlsZSIsImZzIiwiaGFzQWNjZXNzIiwicGF0aCIsImFjY2VzcyIsIl9mcyIsIlJfT0siLCJlcnIiLCJleGlzdHMiLCJyaW1yYWYiLCJta2RpciIsImRpck5hbWUiLCJfbWtkaXIiLCJjb2RlIiwiY29weUZpbGUiLCJzb3VyY2UiLCJkZXN0aW5hdGlvbiIsIm90aGVyQXJncyIsIkVycm9yIiwibmNwIiwiZmlsZVBhdGgiLCJtdiIsIndoaWNoIiwiZ2xvYiIsImhhc2giLCJhbGdvcml0aG0iLCJyZXNvbHZlIiwicmVqZWN0IiwiZmlsZUhhc2giLCJjcnlwdG8iLCJjcmVhdGVIYXNoIiwicmVhZFN0cmVhbSIsImNyZWF0ZVJlYWRTdHJlYW0iLCJvbiIsImUiLCJtZXNzYWdlIiwiY2h1bmsiLCJ1cGRhdGUiLCJkaWdlc3QiLCJzaW1wbGVzIiwicyIsInN5bmNGdW5jdGlvbnMiLCJjb25zdGFudHMiLCJjIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUdBLE1BQU1BLEdBQUcsR0FBR0Msa0JBQUVDLFNBQUYsQ0FBWUMsZ0JBQVosQ0FBWjs7QUFFQSxJQUFJQyxFQUFFLEdBQUc7QUFDUCxRQUFNQyxTQUFOLENBQWlCQyxJQUFqQixFQUF1QjtBQUNyQixRQUFJO0FBQ0YsWUFBTSxLQUFLQyxNQUFMLENBQVlELElBQVosRUFBa0JFLGFBQUlDLElBQXRCLENBQU47QUFDRCxLQUZELENBRUUsT0FBT0MsR0FBUCxFQUFZO0FBQ1osYUFBTyxLQUFQO0FBQ0Q7O0FBQ0QsV0FBTyxJQUFQO0FBQ0QsR0FSTTs7QUFTUEMsRUFBQUEsTUFBTSxDQUFFTCxJQUFGLEVBQVE7QUFBRSxXQUFPLEtBQUtELFNBQUwsQ0FBZUMsSUFBZixDQUFQO0FBQThCLEdBVHZDOztBQVVQTSxFQUFBQSxNQUFNLEVB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Q0FBdEI7O0FBSUEsS0FBSyxNQUFNRCxDQUFYLElBQWdCQyxhQUFoQixFQUErQjtBQUM3QnhDLEVBQUFBLEVBQUUsQ0FBQ3VDLENBQUQsQ0FBRixHQUFRbkMsYUFBSW1DLENBQUosQ0FBUjtBQUNEOztBQUdELE1BQU1FLFNBQVMsR0FBRyxDQUNoQixNQURnQixFQUNSLE1BRFEsRUFDQSxNQURBLEVBQ1EsTUFEUixFQUNnQixXQURoQixDQUFsQjs7QUFHQSxLQUFLLE1BQU1DLENBQVgsSUFBZ0JELFNBQWhCLEVBQTJCO0FBQ3pCekMsRUFBQUEsRUFBRSxDQUFDMEMsQ0FBRCxDQUFGLEdBQVF0QyxhQUFJc0MsQ0FBSixDQUFSO0FBQ0Q7O2VBR2MxQyxFIiwic291cmNlc0NvbnRlbnQiOlsiLy8ganNoaW50IGlnbm9yZTogc3RhcnRcbmltcG9ydCBfZnMgZnJvbSAnZnMnO1xuaW1wb3J0IHJpbXJhZiBmcm9tICdyaW1yYWYnO1xuaW1wb3J0IG1kNWZpbGUgZnJvbSAnbWQ1LWZpbGUnO1xuaW1wb3J0IG5jcCBmcm9tICduY3AnO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IG12IGZyb20gJ212JztcbmltcG9ydCB3aGljaCBmcm9tICd3aGljaCc7XG5pbXBvcnQgZ2xvYiBmcm9tICdnbG9iJztcbmltcG9ydCBjcnlwdG8gZnJvbSAnY3J5cHRvJztcblxuXG5jb25zdCBtZDUgPSBCLnByb21pc2lmeShtZDVmaWxlKTtcblxubGV0IGZzID0ge1xuICBhc3luYyBoYXNBY2Nlc3MgKHBhdGgpIHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy5hY2Nlc3MocGF0aCwgX2ZzLlJfT0spO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgZXhpc3RzIChwYXRoKSB7IHJldHVybiB0aGlzLmhhc0FjY2VzcyhwYXRoKTsgfSxcbiAgcmltcmFmOiBCLnByb21pc2lmeShyaW1yYWYpLFxuICBhc3luYyBta2RpciAoZGlyTmFtZSkge1xuICAgIGxldCBfbWtkaXIgPSBCLnByb21pc2lmeShfZnMubWtkaXIpO1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBfbWtkaXIoZGlyTmFtZSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBpZiAoZXJyICYmIGVyci5jb2RlICE9PSAnRUVYSVNUJykge1xuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBhc3luYyBjb3B5RmlsZSAoc291cmNlLCBkZXN0aW5hdGlvbiwgLi4ub3RoZXJBcmdzKSB7XG4gICAgaWYgKCFhd2FpdCB0aGlzLmhhc0FjY2Vzcyhzb3VyY2UpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBmaWxlIGF0ICcke3NvdXJjZX0nIGRvZXMgbm90IGV4aXN0IG9yIGlzIG5vdCBhY2Nlc3NpYmxlYCk7XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCAoQi5wcm9taXNpZnkobmNwKSkoc291cmNlLCBkZXN0aW5hdGlvbiwgLi4ub3RoZXJBcmdzKTtcbiAgfSxcbiAgYXN5bmMgbWQ1IChmaWxlUGF0aCkge1xuICAgIHJldHVybiBhd2FpdCBtZDUoZmlsZVBhdGgpO1xuICB9LFxuICBtdjogQi5wcm9taXNpZnkobXYpLFxuICB3aGljaDogQi5wcm9taXNpZnkod2hpY2gpLFxuICBnbG9iOiBCLnByb21pc2lmeShnbG9iKSxcbiAgYXN5bmMgaGFzaCAoZmlsZVBhdGgsIGFsZ29yaXRobSA9ICdzaGExJykge1xuICAgIHJldHVybiBhd2FpdCBuZXcgQigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBmaWxlSGFzaCA9IGNyeXB0by5jcmVhdGVIYXNoKGFsZ29yaXRobSk7XG4gICAgICBjb25zdCByZWFkU3RyZWFtID0gX2ZzLmNyZWF0ZVJlYWRTdHJlYW0oZmlsZVBhdGgpO1xuICAgICAgcmVhZFN0cmVhbS5vbignZXJyb3InLCAoZSkgPT4gcmVqZWN0KFxuICAgICAgICBuZXcgRXJyb3IoYENhbm5vdCBjYWxjdWxhdGUgJHthbGdvcml0aG19IGhhc2ggZm9yICcke2ZpbGVQYXRofScuIE9yaWdpbmFsIGVycm9yOiAke2UubWVzc2FnZX1gKSkpO1xuICAgICAgcmVhZFN0cmVhbS5vbignZGF0YScsIChjaHVuaykgPT4gZmlsZUhhc2gudXBkYXRlKGNodW5rKSk7XG4gICAgICByZWFkU3RyZWFtLm9uKCdlbmQnLCAoKSA9PiByZXNvbHZlKGZpbGVIYXNoLmRpZ2VzdCgnaGV4JykpKTtcbiAgICB9KTtcbiAgfSxcbn07XG5cbi8vIGFkZCB0aGUgc3VwcG9ydGVkIGBmc2AgZnVuY3Rpb25zXG5jb25zdCBzaW1wbGVzID0gW1xuICAnb3BlbicsICdjbG9zZScsICdhY2Nlc3MnLCAncmVhZEZpbGUnLCAnd3JpdGVGaWxlJywgJ3dyaXRlJywgJ3JlYWQnLFxuICAncmVhZGxpbmsnLCAnY2htb2QnLCAndW5saW5rJywgJ3JlYWRkaXInLCAnc3RhdCcsICdyZW5hbWUnLCAnbHN0YXQnLFxuXTtcbmZvciAoY29uc3QgcyBvZiBzaW1wbGVzKSB7XG4gIGZzW3NdID0gQi5wcm9taXNpZnkoX2ZzW3NdKTtcbn1cblxuY29uc3Qgc3luY0Z1bmN0aW9ucyA9IFtcbiAgJ2NyZWF0ZVJlYWRTdHJlYW0nLFxuICAnY3JlYXRlV3JpdGVTdHJlYW0nLFxuXTtcbmZvciAoY29uc3QgcyBvZiBzeW5jRnVuY3Rpb25zKSB7XG4gIGZzW3NdID0gX2ZzW3NdO1xufVxuXG4vLyBhZGQgdGhlIGNvbnN0YW50cyBmcm9tIGBmc2BcbmNvbnN0IGNvbnN0YW50cyA9IFtcbiAgJ0ZfT0snLCAnUl9PSycsICdXX09LJywgJ1hfT0snLCAnY29uc3RhbnRzJyxcbl07XG5mb3IgKGNvbnN0IGMgb2YgY29uc3RhbnRzKSB7XG4gIGZzW2NdID0gX2ZzW2NdO1xufVxuXG5leHBvcnQgeyBmcyB9O1xuZXhwb3J0IGRlZmF1bHQgZnM7XG4iXSwiZmlsZSI6ImxpYi9mcy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiJ9
