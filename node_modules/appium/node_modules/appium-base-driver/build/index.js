"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_WS_PATHNAME_PREFIX = exports.processCapabilities = exports.getSummaryByCode = exports.statusCodes = exports.JWProxy = exports.server = exports.STATIC_DIR = exports.isSessionCommand = exports.NO_SESSION_ID_COMMANDS = exports.routeToCommandName = exports.METHOD_MAP = exports.ALL_COMMANDS = exports.errorFromW3CJsonCode = exports.errorFromCode = exports.errorFromMJSONWPStatusCode = exports.isErrorType = exports.errors = exports.routeConfiguringFunction = exports.Protocol = exports.default = exports.BASEDRIVER_HANDLED_SETTINGS = exports.ImageElement = exports.DeviceSettings = exports.BaseDriver = void 0;

require("source-map-support/register");

var driver = _interopRequireWildcard(require("./lib/basedriver/driver"));

var image = _interopRequireWildcard(require("./lib/basedriver/image-element"));

var deviceSettings = _interopRequireWildcard(require("./lib/basedriver/device-settings"));

var protocol = _interopRequireWildcard(require("./lib/protocol"));

var staticIndex = _interopRequireWildcard(require("./lib/express/static"));

var serverIndex = _interopRequireWildcard(require("./lib/express/server"));

var proxyIndex = _interopRequireWildcard(require("./lib/jsonwp-proxy/proxy"));

var statusIndex = _interopRequireWildcard(require("./lib/jsonwp-status/status"));

var caps = _interopRequireWildcard(require("./lib/basedriver/capabilities"));

var ws = _interopRequireWildcard(require("./lib/express/websocket"));

const {
  BaseDriver
} = driver;
exports.BaseDriver = BaseDriver;
const {
  ImageElement
} = image;
exports.ImageElement = ImageElement;
const {
  DeviceSettings,
  BASEDRIVER_HANDLED_SETTINGS
} = deviceSettings;
exports.BASEDRIVER_HANDLED_SETTINGS = BASEDRIVER_HANDLED_SETTINGS;
exports.DeviceSettings = DeviceSettings;
var _default = BaseDriver;
exports.default = _default;
const {
  Protocol,
  routeConfiguringFunction,
  errors,
  isErrorType,
  errorFromMJSONWPStatusCode,
  errorFromW3CJsonCode,
  ALL_COMMANDS,
  METHOD_MAP,
  routeToCommandName,
  NO_SESSION_ID_COMMANDS,
  isSessionCommand
} = protocol;
exports.isSessionCommand = isSessionCommand;
exports.NO_SESSION_ID_COMMANDS = NO_SESSION_ID_COMMANDS;
exports.routeToCommandName = routeToCommandName;
exports.METHOD_MAP = METHOD_MAP;
exports.ALL_COMMANDS = ALL_COMMANDS;
exports.errorFromW3CJsonCode = errorFromW3CJsonCode;
exports.errorFromCode = exports.errorFromMJSONWPStatusCode = errorFromMJSONWPStatusCode;
exports.isErrorType = isErrorType;
exports.errors = errors;
exports.routeConfiguringFunction = routeConfiguringFunction;
exports.Protocol = Protocol;
const {
  STATIC_DIR
} = staticIndex;
exports.STATIC_DIR = STATIC_DIR;
const {
  server
} = serverIndex;
exports.server = server;
const {
  JWProxy
} = proxyIndex;
exports.JWProxy = JWProxy;
const {
  codes: statusCodes,
  getSummaryByCode
} = statusIndex;
exports.getSummaryByCode = getSummaryByCode;
exports.statusCodes = statusCodes;
const {
  processCapabilities
} = caps;
exports.processCapabilities = processCapabilities;
const {
  DEFAULT_WS_PATHNAME_PREFIX
} = ws;
exports.DEFAULT_WS_PATHNAME_PREFIX = DEFAULT_WS_PATHNAME_PREFIX;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIkJhc2VEcml2ZXIiLCJkcml2ZXIiLCJJbWFnZUVsZW1lbnQiLCJpbWFnZSIsIkRldmljZVNldHRpbmdzIiwiQkFTRURSSVZFUl9IQU5ETEVEX1NFVFRJTkdTIiwiZGV2aWNlU2V0dGluZ3MiLCJQcm90b2NvbCIsInJvdXRlQ29uZmlndXJpbmdGdW5jdGlvbiIsImVycm9ycyIsImlzRXJyb3JUeXBlIiwiZXJyb3JGcm9tTUpTT05XUFN0YXR1c0NvZGUiLCJlcnJvckZyb21XM0NKc29uQ29kZSIsIkFMTF9DT01NQU5EUyIsIk1FVEhPRF9NQVAiLCJyb3V0ZVRvQ29tbWFuZE5hbWUiLCJOT19TRVNTSU9OX0lEX0NPTU1BTkRTIiwiaXNTZXNzaW9uQ29tbWFuZCIsInByb3RvY29sIiwiU1RBVElDX0RJUiIsInN0YXRpY0luZGV4Iiwic2VydmVyIiwic2VydmVySW5kZXgiLCJKV1Byb3h5IiwicHJveHlJbmRleCIsImNvZGVzIiwic3RhdHVzQ29kZXMiLCJnZXRTdW1tYXJ5QnlDb2RlIiwic3RhdHVzSW5kZXgiLCJwcm9jZXNzQ2FwYWJpbGl0aWVzIiwiY2FwcyIsIkRFRkFVTFRfV1NfUEFUSE5BTUVfUFJFRklYIiwid3MiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBR0E7O0FBQ0E7O0FBQ0E7O0FBV0E7O0FBZUE7O0FBSUE7O0FBS0E7O0FBS0E7O0FBS0E7O0FBS0E7O0FBaERBLE1BQU07QUFBRUEsRUFBQUE7QUFBRixJQUFpQkMsTUFBdkI7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQTtBQUFGLElBQW1CQyxLQUF6Qjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBLGNBQUY7QUFBa0JDLEVBQUFBO0FBQWxCLElBQWtEQyxjQUF4RDs7O2VBR2VOLFU7O0FBTWYsTUFBTTtBQUNKTyxFQUFBQSxRQURJO0FBQ01DLEVBQUFBLHdCQUROO0FBQ2dDQyxFQUFBQSxNQURoQztBQUN3Q0MsRUFBQUEsV0FEeEM7QUFFSkMsRUFBQUEsMEJBRkk7QUFFd0JDLEVBQUFBLG9CQUZ4QjtBQUU4Q0MsRUFBQUEsWUFGOUM7QUFFNERDLEVBQUFBLFVBRjVEO0FBR0pDLEVBQUFBLGtCQUhJO0FBR2dCQyxFQUFBQSxzQkFIaEI7QUFHd0NDLEVBQUFBO0FBSHhDLElBSUZDLFFBSko7Ozs7Ozs7Ozs7OztBQWNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUFpQkMsV0FBdkI7O0FBSUEsTUFBTTtBQUFFQyxFQUFBQTtBQUFGLElBQWFDLFdBQW5COztBQUtBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUFjQyxVQUFwQjs7QUFLQSxNQUFNO0FBQUVDLEVBQUFBLEtBQUssRUFBRUMsV0FBVDtBQUFzQkMsRUFBQUE7QUFBdEIsSUFBMkNDLFdBQWpEOzs7QUFLQSxNQUFNO0FBQUVDLEVBQUFBO0FBQUYsSUFBMEJDLElBQWhDOztBQUtBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUFpQ0MsRUFBdkMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0cmFuc3BpbGU6bWFpblxuXG4vLyBCYXNlRHJpdmVyIGV4cG9ydHNcbmltcG9ydCAqIGFzIGRyaXZlciBmcm9tICcuL2xpYi9iYXNlZHJpdmVyL2RyaXZlcic7XG5pbXBvcnQgKiBhcyBpbWFnZSBmcm9tICcuL2xpYi9iYXNlZHJpdmVyL2ltYWdlLWVsZW1lbnQnO1xuaW1wb3J0ICogYXMgZGV2aWNlU2V0dGluZ3MgZnJvbSAnLi9saWIvYmFzZWRyaXZlci9kZXZpY2Utc2V0dGluZ3MnO1xuXG5jb25zdCB7IEJhc2VEcml2ZXIgfSA9IGRyaXZlcjtcbmNvbnN0IHsgSW1hZ2VFbGVtZW50IH0gPSBpbWFnZTtcbmNvbnN0IHsgRGV2aWNlU2V0dGluZ3MsIEJBU0VEUklWRVJfSEFORExFRF9TRVRUSU5HUyB9ID0gZGV2aWNlU2V0dGluZ3M7XG5cbmV4cG9ydCB7IEJhc2VEcml2ZXIsIERldmljZVNldHRpbmdzLCBJbWFnZUVsZW1lbnQsIEJBU0VEUklWRVJfSEFORExFRF9TRVRUSU5HUyB9O1xuZXhwb3J0IGRlZmF1bHQgQmFzZURyaXZlcjtcblxuXG4vLyBNSlNPTldQIGV4cG9ydHNcbmltcG9ydCAqIGFzIHByb3RvY29sIGZyb20gJy4vbGliL3Byb3RvY29sJztcblxuY29uc3Qge1xuICBQcm90b2NvbCwgcm91dGVDb25maWd1cmluZ0Z1bmN0aW9uLCBlcnJvcnMsIGlzRXJyb3JUeXBlLFxuICBlcnJvckZyb21NSlNPTldQU3RhdHVzQ29kZSwgZXJyb3JGcm9tVzNDSnNvbkNvZGUsIEFMTF9DT01NQU5EUywgTUVUSE9EX01BUCxcbiAgcm91dGVUb0NvbW1hbmROYW1lLCBOT19TRVNTSU9OX0lEX0NPTU1BTkRTLCBpc1Nlc3Npb25Db21tYW5kLFxufSA9IHByb3RvY29sO1xuXG5leHBvcnQge1xuICBQcm90b2NvbCwgcm91dGVDb25maWd1cmluZ0Z1bmN0aW9uLCBlcnJvcnMsIGlzRXJyb3JUeXBlLFxuICBlcnJvckZyb21NSlNPTldQU3RhdHVzQ29kZSwgZXJyb3JGcm9tVzNDSnNvbkNvZGUsXG4gIGVycm9yRnJvbU1KU09OV1BTdGF0dXNDb2RlIGFzIGVycm9yRnJvbUNvZGUsIEFMTF9DT01NQU5EUywgTUVUSE9EX01BUCxcbiAgcm91dGVUb0NvbW1hbmROYW1lLCBOT19TRVNTSU9OX0lEX0NPTU1BTkRTLCBpc1Nlc3Npb25Db21tYW5kIH07XG5cbi8vIEV4cHJlc3MgZXhwb3J0c1xuaW1wb3J0ICogYXMgc3RhdGljSW5kZXggZnJvbSAnLi9saWIvZXhwcmVzcy9zdGF0aWMnO1xuY29uc3QgeyBTVEFUSUNfRElSIH0gPSBzdGF0aWNJbmRleDtcbmV4cG9ydCB7IFNUQVRJQ19ESVIgfTtcblxuaW1wb3J0ICogYXMgc2VydmVySW5kZXggZnJvbSAnLi9saWIvZXhwcmVzcy9zZXJ2ZXInO1xuY29uc3QgeyBzZXJ2ZXIgfSA9IHNlcnZlckluZGV4O1xuZXhwb3J0IHsgc2VydmVyIH07XG5cbi8vIGpzb253cC1wcm94eSBleHBvcnRzXG5pbXBvcnQgKiBhcyBwcm94eUluZGV4IGZyb20gJy4vbGliL2pzb253cC1wcm94eS9wcm94eSc7XG5jb25zdCB7IEpXUHJveHkgfSA9IHByb3h5SW5kZXg7XG5leHBvcnQgeyBKV1Byb3h5IH07XG5cbi8vIGpzb253cC1zdGF0dXMgZXhwb3J0c1xuaW1wb3J0ICogYXMgc3RhdHVzSW5kZXggZnJvbSAnLi9saWIvanNvbndwLXN0YXR1cy9zdGF0dXMnO1xuY29uc3QgeyBjb2Rlczogc3RhdHVzQ29kZXMsIGdldFN1bW1hcnlCeUNvZGUgfSA9IHN0YXR1c0luZGV4O1xuZXhwb3J0IHsgc3RhdHVzQ29kZXMsIGdldFN1bW1hcnlCeUNvZGUgfTtcblxuLy8gVzNDIGNhcGFiaWxpdGllcyBwYXJzZXJcbmltcG9ydCAqIGFzIGNhcHMgZnJvbSAnLi9saWIvYmFzZWRyaXZlci9jYXBhYmlsaXRpZXMnO1xuY29uc3QgeyBwcm9jZXNzQ2FwYWJpbGl0aWVzIH0gPSBjYXBzO1xuZXhwb3J0IHsgcHJvY2Vzc0NhcGFiaWxpdGllcyB9O1xuXG4vLyBXZWIgc29ja2V0IGhlbHBlcnNcbmltcG9ydCAqIGFzIHdzIGZyb20gJy4vbGliL2V4cHJlc3Mvd2Vic29ja2V0JztcbmNvbnN0IHsgREVGQVVMVF9XU19QQVRITkFNRV9QUkVGSVggfSA9IHdzO1xuZXhwb3J0IHsgREVGQVVMVF9XU19QQVRITkFNRV9QUkVGSVggfTtcbiJdLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiLi4ifQ==
