"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("../logger"));

var _lodash = _interopRequireDefault(require("lodash"));

const commands = {},
      helpers = {},
      extensions = {};
exports.helpers = helpers;
exports.commands = commands;
extensions.supportedLogTypes = {};

commands.getLogTypes = function getLogTypes() {
  _logger.default.debug('Retrieving supported log types');

  return _lodash.default.keys(this.supportedLogTypes);
};

commands.getLog = async function getLog(logType) {
  _logger.default.debug(`Retrieving '${logType}' logs`);

  if (!this.getLogTypes().includes(logType)) {
    const logsTypesWithDescriptions = _lodash.default.reduce(this.supportedLogTypes, function getDescriptions(result, value, key) {
      result[key] = value.description;
      return result;
    }, {});

    throw new Error(`Unsupported log type '${logType}'. ` + `Supported types: ${JSON.stringify(logsTypesWithDescriptions)}`);
  }

  return await this.supportedLogTypes[logType].getter(this);
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9iYXNlZHJpdmVyL2NvbW1hbmRzL2xvZy5qcyJdLCJuYW1lcyI6WyJjb21tYW5kcyIsImhlbHBlcnMiLCJleHRlbnNpb25zIiwic3VwcG9ydGVkTG9nVHlwZXMiLCJnZXRMb2dUeXBlcyIsImxvZyIsImRlYnVnIiwiXyIsImtleXMiLCJnZXRMb2ciLCJsb2dUeXBlIiwiaW5jbHVkZXMiLCJsb2dzVHlwZXNXaXRoRGVzY3JpcHRpb25zIiwicmVkdWNlIiwiZ2V0RGVzY3JpcHRpb25zIiwicmVzdWx0IiwidmFsdWUiLCJrZXkiLCJkZXNjcmlwdGlvbiIsIkVycm9yIiwiSlNPTiIsInN0cmluZ2lmeSIsImdldHRlciIsIk9iamVjdCIsImFzc2lnbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFHQSxNQUFNQSxRQUFRLEdBQUcsRUFBakI7QUFBQSxNQUFxQkMsT0FBTyxHQUFHLEVBQS9CO0FBQUEsTUFBbUNDLFVBQVUsR0FBRyxFQUFoRDs7O0FBVUFBLFVBQVUsQ0FBQ0MsaUJBQVgsR0FBK0IsRUFBL0I7O0FBRUFILFFBQVEsQ0FBQ0ksV0FBVCxHQUF1QixTQUFTQSxXQUFULEdBQXdCO0FBQzdDQyxrQkFBSUMsS0FBSixDQUFVLGdDQUFWOztBQUNBLFNBQU9DLGdCQUFFQyxJQUFGLENBQU8sS0FBS0wsaUJBQVosQ0FBUDtBQUNELENBSEQ7O0FBS0FILFFBQVEsQ0FBQ1MsTUFBVCxHQUFrQixlQUFlQSxNQUFmLENBQXVCQyxPQUF2QixFQUFnQztBQUNoREwsa0JBQUlDLEtBQUosQ0FBVyxlQUFjSSxPQUFRLFFBQWpDOztBQUVBLE1BQUksQ0FBQyxLQUFLTixXQUFMLEdBQW1CTyxRQUFuQixDQUE0QkQsT0FBNUIsQ0FBTCxFQUEyQztBQUN6QyxVQUFNRSx5QkFBeUIsR0FBR0wsZ0JBQUVNLE1BQUYsQ0FBUyxLQUFLVixpQkFBZCxFQUFpQyxTQUFTVyxlQUFULENBQTBCQyxNQUExQixFQUFrQ0MsS0FBbEMsRUFBeUNDLEdBQXpDLEVBQThDO0FBQy9HRixNQUFBQSxNQUFNLENBQUNFLEdBQUQsQ0FBTixHQUFjRCxLQUFLLENBQUNFLFdBQXBCO0FBQ0EsYUFBT0gsTUFBUDtBQUNELEtBSGlDLEVBRy9CLEVBSCtCLENBQWxDOztBQUlBLFVBQU0sSUFBSUksS0FBSixDQUFXLHlCQUF3QlQsT0FBUSxLQUFqQyxHQUNiLG9CQUFtQlUsSUFBSSxDQUFDQyxTQUFMLENBQWVULHlCQUFmLENBQTBDLEVBRDFELENBQU47QUFFRDs7QUFFRCxTQUFPLE1BQU0sS0FBS1QsaUJBQUwsQ0FBdUJPLE9BQXZCLEVBQWdDWSxNQUFoQyxDQUF1QyxJQUF2QyxDQUFiO0FBQ0QsQ0FiRDs7QUFlQUMsTUFBTSxDQUFDQyxNQUFQLENBQWN0QixVQUFkLEVBQTBCRixRQUExQixFQUFvQ0MsT0FBcEM7ZUFFZUMsVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cblxuY29uc3QgY29tbWFuZHMgPSB7fSwgaGVscGVycyA9IHt9LCBleHRlbnNpb25zID0ge307XG5cbi8vIG92ZXJyaWRlIGluIHN1Yi1jbGFzc2VzLCB3aXRoIGFwcHJvcHJpYXRlIGxvZ3Ncbi8vIGluIHRoZSBmb3JtIG9mXG4vLyAgIHtcbi8vICAgICB0eXBlOiB7XG4vLyAgICAgICBkZXNjcmlwdGlvbjogJ3NvbWUgdXNlZnVsIHRleHQnLFxuLy8gICAgICAgZ2V0dGVyOiAoKSA9PiB7fSwgLy8gc29tZSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkIHRvIGdldCB0aGUgbG9nc1xuLy8gICAgIH1cbi8vICAgfVxuZXh0ZW5zaW9ucy5zdXBwb3J0ZWRMb2dUeXBlcyA9IHt9O1xuXG5jb21tYW5kcy5nZXRMb2dUeXBlcyA9IGZ1bmN0aW9uIGdldExvZ1R5cGVzICgpIHtcbiAgbG9nLmRlYnVnKCdSZXRyaWV2aW5nIHN1cHBvcnRlZCBsb2cgdHlwZXMnKTtcbiAgcmV0dXJuIF8ua2V5cyh0aGlzLnN1cHBvcnRlZExvZ1R5cGVzKTtcbn07XG5cbmNvbW1hbmRzLmdldExvZyA9IGFzeW5jIGZ1bmN0aW9uIGdldExvZyAobG9nVHlwZSkge1xuICBsb2cuZGVidWcoYFJldHJpZXZpbmcgJyR7bG9nVHlwZX0nIGxvZ3NgKTtcblxuICBpZiAoIXRoaXMuZ2V0TG9nVHlwZXMoKS5pbmNsdWRlcyhsb2dUeXBlKSkge1xuICAgIGNvbnN0IGxvZ3NUeXBlc1dpdGhEZXNjcmlwdGlvbnMgPSBfLnJlZHVjZSh0aGlzLnN1cHBvcnRlZExvZ1R5cGVzLCBmdW5jdGlvbiBnZXREZXNjcmlwdGlvbnMgKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWx1ZS5kZXNjcmlwdGlvbjtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSwge30pO1xuICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgbG9nIHR5cGUgJyR7bG9nVHlwZX0nLiBgICtcbiAgICAgIGBTdXBwb3J0ZWQgdHlwZXM6ICR7SlNPTi5zdHJpbmdpZnkobG9nc1R5cGVzV2l0aERlc2NyaXB0aW9ucyl9YCk7XG4gIH1cblxuICByZXR1cm4gYXdhaXQgdGhpcy5zdXBwb3J0ZWRMb2dUeXBlc1tsb2dUeXBlXS5nZXR0ZXIodGhpcyk7XG59O1xuXG5PYmplY3QuYXNzaWduKGV4dGVuc2lvbnMsIGNvbW1hbmRzLCBoZWxwZXJzKTtcbmV4cG9ydCB7IGNvbW1hbmRzLCBoZWxwZXJzfTtcbmV4cG9ydCBkZWZhdWx0IGV4dGVuc2lvbnM7XG4iXSwiZmlsZSI6ImxpYi9iYXNlZHJpdmVyL2NvbW1hbmRzL2xvZy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLiJ9
