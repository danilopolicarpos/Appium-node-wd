"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getImgElFromArgs = getImgElFromArgs;
exports.makeImageElementCache = makeImageElementCache;
exports.DEFAULT_TEMPLATE_IMAGE_SCALE = exports.IMAGE_EL_TAP_STRATEGY_W3C = exports.IMAGE_EL_TAP_STRATEGY_MJSONWP = exports.ImageElement = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _2 = require("../..");

var _lruCache = _interopRequireDefault(require("lru-cache"));

var _protocol = require("../protocol/protocol");

var _logger = _interopRequireDefault(require("./logger"));

var _uuidJs = _interopRequireDefault(require("uuid-js"));

const MAX_CACHE_SIZE = 1024 * 1024 * 40;
const TAP_DURATION_MS = 125;
const IMAGE_EL_TAP_STRATEGY_W3C = 'w3cActions';
exports.IMAGE_EL_TAP_STRATEGY_W3C = IMAGE_EL_TAP_STRATEGY_W3C;
const IMAGE_EL_TAP_STRATEGY_MJSONWP = 'touchActions';
exports.IMAGE_EL_TAP_STRATEGY_MJSONWP = IMAGE_EL_TAP_STRATEGY_MJSONWP;
const IMAGE_TAP_STRATEGIES = [IMAGE_EL_TAP_STRATEGY_MJSONWP, IMAGE_EL_TAP_STRATEGY_W3C];
const DEFAULT_TEMPLATE_IMAGE_SCALE = 1.0;
exports.DEFAULT_TEMPLATE_IMAGE_SCALE = DEFAULT_TEMPLATE_IMAGE_SCALE;

class ImageElement {
  constructor(b64Template, rect) {
    this.template = b64Template;
    this.rect = rect;
    this.id = `${_protocol.IMAGE_ELEMENT_PREFIX}${_uuidJs.default.create().hex}`;
  }

  get size() {
    return {
      width: this.rect.width,
      height: this.rect.height
    };
  }

  get location() {
    return {
      x: this.rect.x,
      y: this.rect.y
    };
  }

  get center() {
    return {
      x: this.rect.x + this.rect.width / 2,
      y: this.rect.y + this.rect.height / 2
    };
  }

  asElement(protocolKey) {
    return {
      [protocolKey]: this.id
    };
  }

  equals(other) {
    return this.rect.x === other.rect.x && this.rect.y === other.rect.y && this.rect.width === other.rect.width && this.rect.height === other.rect.height;
  }

  async click(driver) {
    let newImgEl;
    const {
      autoUpdateImageElementPosition: updatePos,
      checkForImageElementStaleness,
      imageElementTapStrategy
    } = driver.settings.getSettings();

    if (!IMAGE_TAP_STRATEGIES.includes(imageElementTapStrategy)) {
      throw new Error(`Incorrect imageElementTapStrategy setting ` + `'${imageElementTapStrategy}'. Must be one of ` + JSON.stringify(IMAGE_TAP_STRATEGIES));
    }

    if (checkForImageElementStaleness || updatePos) {
      _logger.default.info('Checking image element for staleness before clicking');

      try {
        newImgEl = await driver.findByImage(this.template, {
          shouldCheckStaleness: true,
          ignoreDefaultImageTemplateScale: true
        });
      } catch (err) {
        throw new _2.errors.StaleElementReferenceError();
      }

      if (!this.equals(newImgEl)) {
        _logger.default.warn(`When trying to click on an image element, the image changed ` + `position from where it was originally found. It is now at ` + `${JSON.stringify(newImgEl.rect)} and was originally at ` + `${JSON.stringify(this.rect)}.`);

        if (updatePos) {
          _logger.default.warn('Click will proceed at new coordinates');

          this.rect = _lodash.default.clone(newImgEl.rect);
        } else {
          _logger.default.warn('Click will take place at original coordinates. If you ' + 'would like Appium to automatically click the new ' + "coordinates, set the 'autoUpdateImageElementPosition' " + 'setting to true');
        }
      }
    }

    const {
      x,
      y
    } = this.center;

    _logger.default.info(`Will tap on image element at coordinate [${x}, ${y}]`);

    if (imageElementTapStrategy === IMAGE_EL_TAP_STRATEGY_W3C) {
      _logger.default.info('Will tap using W3C actions');

      const action = {
        type: 'pointer',
        id: 'mouse',
        parameters: {
          pointerType: 'touch'
        },
        actions: [{
          type: 'pointerMove',
          x,
          y,
          duration: 0
        }, {
          type: 'pointerDown'
        }, {
          type: 'pause',
          duration: TAP_DURATION_MS
        }, {
          type: 'pointerUp'
        }]
      };

      if (driver.performActions) {
        return await driver.performActions([action]);
      }

      _logger.default.warn('Driver does not seem to implement W3C actions, falling back ' + 'to TouchActions');
    }

    _logger.default.info('Will tap using MJSONWP TouchActions');

    const action = {
      action: 'tap',
      options: {
        x,
        y
      }
    };

    if (driver.performTouch) {
      return await driver.performTouch([action]);
    }

    throw new Error("Driver did not implement the 'performTouch' command. " + 'For drivers to support finding image elements, they ' + "should support 'performTouch' and 'performActions'");
  }

  static async execute(driver, cmd, imgElId) {
    if (!driver._imgElCache.has(imgElId)) {
      throw new _2.errors.NoSuchElementError();
    }

    const imgEl = driver._imgElCache.get(imgElId);

    switch (cmd) {
      case 'click':
        return await imgEl.click(driver);

      case 'elementDisplayed':
        return true;

      case 'getSize':
        return imgEl.size;

      case 'getLocation':
      case 'getLocationInView':
        return imgEl.location;

      case 'getElementRect':
        return imgEl.rect;

      default:
        throw new _2.errors.NotYetImplementedError();
    }
  }

}

exports.ImageElement = ImageElement;

function makeImageElementCache(max = MAX_CACHE_SIZE) {
  return new _lruCache.default({
    max,
    length: el => el.template.length
  });
}

function getImgElFromArgs(args) {
  for (let arg of args) {
    if (_lodash.default.isString(arg) && arg.startsWith(_protocol.IMAGE_ELEMENT_PREFIX)) {
      return arg;
    }
  }
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
