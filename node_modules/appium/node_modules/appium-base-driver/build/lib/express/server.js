"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.server = server;
exports.configureServer = configureServer;

require("source-map-support/register");

var _path = _interopRequireDefault(require("path"));

var _express = _interopRequireDefault(require("express"));

var _http = _interopRequireDefault(require("http"));

var _serveFavicon = _interopRequireDefault(require("serve-favicon"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _methodOverride = _interopRequireDefault(require("method-override"));

var _logger = _interopRequireDefault(require("./logger"));

var _expressLogging = require("./express-logging");

var _middleware = require("./middleware");

var _static = require("./static");

var _crash = require("./crash");

var _websocket = require("./websocket");

var _bluebird = _interopRequireDefault(require("bluebird"));

async function server(configureRoutes, port, hostname = null, allowCors = true) {
  let app = (0, _express.default)();

  let httpServer = _http.default.createServer(app);

  httpServer.addWebSocketHandler = _websocket.addWebSocketHandler;
  httpServer.removeWebSocketHandler = _websocket.removeWebSocketHandler;
  httpServer.removeAllWebSocketHandlers = _websocket.removeAllWebSocketHandlers;
  httpServer.getWebSocketHandlers = _websocket.getWebSocketHandlers;
  let close = httpServer.close.bind(httpServer);

  httpServer.close = async () => {
    return await new _bluebird.default((resolve, reject) => {
      httpServer.on('close', resolve);
      close(err => {
        if (err) reject(err);
      });
    });
  };

  return await new _bluebird.default((resolve, reject) => {
    httpServer.on('error', err => {
      if (err.code === 'EADDRNOTAVAIL') {
        _logger.default.error('Could not start REST http interface listener. ' + 'Requested address is not available.');
      } else {
        _logger.default.error('Could not start REST http interface listener. The requested ' + 'port may already be in use. Please make sure there is no ' + 'other instance of this server running already.');
      }

      reject(err);
    });
    httpServer.on('connection', socket => {
      socket.setTimeout(600 * 1000);
      socket.on('error', reject);
    });
    configureServer(app, configureRoutes, allowCors);
    let serverArgs = [port];

    if (hostname) {
      serverArgs.push(hostname);
    }

    httpServer.listen(...serverArgs, err => {
      if (err) {
        reject(err);
      }

      resolve(httpServer);
    });
  });
}

function configureServer(app, configureRoutes, allowCors = true) {
  app.use(_expressLogging.endLogFormatter);
  app.use((0, _serveFavicon.default)(_path.default.resolve(_static.STATIC_DIR, 'favicon.ico')));
  app.use(_express.default.static(_static.STATIC_DIR));
  app.use('/wd/hub/produce_error', _crash.produceError);
  app.use('/wd/hub/crash', _crash.produceCrash);

  if (allowCors) {
    app.use(_middleware.allowCrossDomain);
  }

  app.use(_middleware.fixPythonContentType);
  app.use(_middleware.defaultToJSONContentType);
  app.use(_bodyParser.default.urlencoded({
    extended: true
  }));
  app.use((0, _methodOverride.default)());
  app.use(_middleware.catch4XXHandler);
  app.use(_middleware.catchAllHandler);
  app.use(_bodyParser.default.json({
    limit: '1gb'
  }));
  app.use(_expressLogging.startLogFormatter);
  configureRoutes(app);
  app.all('/welcome', _static.welcome);
  app.all('/test/guinea-pig', _static.guineaPig);
  app.all('/test/guinea-pig-scrollable', _static.guineaPigScrollable);
  app.all('/test/guinea-pig-app-banner', _static.guineaPigAppBanner);
  app.use(_middleware.catch404Handler);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
