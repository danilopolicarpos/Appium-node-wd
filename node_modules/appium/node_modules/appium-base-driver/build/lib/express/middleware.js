"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.allowCrossDomain = allowCrossDomain;
exports.fixPythonContentType = fixPythonContentType;
exports.defaultToJSONContentType = defaultToJSONContentType;
exports.catchAllHandler = catchAllHandler;
exports.catch404Handler = catch404Handler;
exports.catch4XXHandler = catch4XXHandler;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("./logger"));

var _protocol = require("../protocol");

function allowCrossDomain(req, res, next) {
  try {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, OPTIONS, DELETE');
    res.header('Access-Control-Allow-Headers', 'Cache-Control, Pragma, Origin, X-Requested-With, Content-Type, Accept, User-Agent');

    if ('OPTIONS' === req.method) {
      return res.sendStatus(200);
    }
  } catch (err) {
    _logger.default.error(`Unexpected error: ${err.stack}`);
  }

  next();
}

function fixPythonContentType(req, res, next) {
  if (/^\/wd/.test(req.path) && /^Python/.test(req.headers['user-agent'])) {
    if (req.headers['content-type'] === 'application/x-www-form-urlencoded') {
      req.headers['content-type'] = 'application/json; charset=utf-8';
    }
  }

  next();
}

function defaultToJSONContentType(req, res, next) {
  if (!req.headers['content-type']) {
    req.headers['content-type'] = 'application/json; charset=utf-8';
  }

  next();
}

function catchAllHandler(err, req, res, next) {
  _logger.default.error(`Uncaught error: ${err.message}`);

  _logger.default.error('Sending generic error response');

  try {
    res.status(500).send({
      status: _protocol.errors.UnknownError.code(),
      value: `ERROR running Appium command: ${err.message}`
    });

    _logger.default.error(err);
  } catch (ign) {
    next(ign);
  }
}

function catch4XXHandler(err, req, res, next) {
  if (err.status >= 400 && err.status < 500) {
    _logger.default.debug(`Setting content type to 'text/plain' for HTTP status '${err.status}'`);

    res.set('content-type', 'text/plain');
    res.status(err.status).send(`Unable to process request: ${err.message}`);
  } else {
    next(err);
  }
}

function catch404Handler(req, res) {
  _logger.default.debug('No route found. Setting content type to \'text/plain\'');

  res.set('content-type', 'text/plain');
  res.status(404).send(`The URL '${req.originalUrl}' did not map to a valid resource`);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9leHByZXNzL21pZGRsZXdhcmUuanMiXSwibmFtZXMiOlsiYWxsb3dDcm9zc0RvbWFpbiIsInJlcSIsInJlcyIsIm5leHQiLCJoZWFkZXIiLCJtZXRob2QiLCJzZW5kU3RhdHVzIiwiZXJyIiwibG9nIiwiZXJyb3IiLCJzdGFjayIsImZpeFB5dGhvbkNvbnRlbnRUeXBlIiwidGVzdCIsInBhdGgiLCJoZWFkZXJzIiwiZGVmYXVsdFRvSlNPTkNvbnRlbnRUeXBlIiwiY2F0Y2hBbGxIYW5kbGVyIiwibWVzc2FnZSIsInN0YXR1cyIsInNlbmQiLCJlcnJvcnMiLCJVbmtub3duRXJyb3IiLCJjb2RlIiwidmFsdWUiLCJpZ24iLCJjYXRjaDRYWEhhbmRsZXIiLCJkZWJ1ZyIsInNldCIsImNhdGNoNDA0SGFuZGxlciIsIm9yaWdpbmFsVXJsIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBR0EsU0FBU0EsZ0JBQVQsQ0FBMkJDLEdBQTNCLEVBQWdDQyxHQUFoQyxFQUFxQ0MsSUFBckMsRUFBMkM7QUFDekMsTUFBSTtBQUNGRCxJQUFBQSxHQUFHLENBQUNFLE1BQUosQ0FBVyw2QkFBWCxFQUEwQyxHQUExQztBQUNBRixJQUFBQSxHQUFHLENBQUNFLE1BQUosQ0FBVyw4QkFBWCxFQUEyQyxpQ0FBM0M7QUFDQUYsSUFBQUEsR0FBRyxDQUFDRSxNQUFKLENBQVcsOEJBQVgsRUFBMkMsbUZBQTNDOztBQUdBLFFBQUksY0FBY0gsR0FBRyxDQUFDSSxNQUF0QixFQUE4QjtBQUM1QixhQUFPSCxHQUFHLENBQUNJLFVBQUosQ0FBZSxHQUFmLENBQVA7QUFDRDtBQUNGLEdBVEQsQ0FTRSxPQUFPQyxHQUFQLEVBQVk7QUFDWkMsb0JBQUlDLEtBQUosQ0FBVyxxQkFBb0JGLEdBQUcsQ0FBQ0csS0FBTSxFQUF6QztBQUNEOztBQUNEUCxFQUFBQSxJQUFJO0FBQ0w7O0FBRUQsU0FBU1Esb0JBQVQsQ0FBK0JWLEdBQS9CLEVBQW9DQyxHQUFwQyxFQUF5Q0MsSUFBekMsRUFBK0M7QUFFN0MsTUFBSSxRQUFRUyxJQUFSLENBQWFYLEdBQUcsQ0FBQ1ksSUFBakIsS0FBMEIsVUFBVUQsSUFBVixDQUFlWCxHQUFHLENBQUNhLE9BQUosQ0FBWSxZQUFaLENBQWYsQ0FBOUIsRUFBeUU7QUFDdkUsUUFBSWIsR0FBRyxDQUFDYSxPQUFKLENBQVksY0FBWixNQUFnQyxtQ0FBcEMsRUFBeUU7QUFDdkViLE1BQUFBLEdBQUcsQ0FBQ2EsT0FBSixDQUFZLGNBQVosSUFBOEIsaUNBQTlCO0FBQ0Q7QUFDRjs7QUFDRFgsRUFBQUEsSUFBSTtBQUNMOztBQUVELFNBQVNZLHdCQUFULENBQW1DZCxHQUFuQyxFQUF3Q0MsR0FBeEMsRUFBNkNDLElBQTdDLEVBQW1EO0FBQ2pELE1BQUksQ0FBQ0YsR0FBRyxDQUFDYSxPQUFKLENBQVksY0FBWixDQUFMLEVBQWtDO0FBQ2hDYixJQUFBQSxHQUFHLENBQUNhLE9BQUosQ0FBWSxjQUFaLElBQThCLGlDQUE5QjtBQUNEOztBQUNEWCxFQUFBQSxJQUFJO0FBQ0w7O0FBRUQsU0FBU2EsZUFBVCxDQUEwQlQsR0FBMUIsRUFBK0JOLEdBQS9CLEVBQW9DQyxHQUFwQyxFQUF5Q0MsSUFBekMsRUFBK0M7QUFDN0NLLGtCQUFJQyxLQUFKLENBQVcsbUJBQWtCRixHQUFHLENBQUNVLE9BQVEsRUFBekM7O0FBQ0FULGtCQUFJQyxLQUFKLENBQVUsZ0NBQVY7O0FBQ0EsTUFBSTtBQUNGUCxJQUFBQSxHQUFHLENBQUNnQixNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUI7QUFDbkJELE1BQUFBLE1BQU0sRUFBRUUsaUJBQU9DLFlBQVAsQ0FBb0JDLElBQXBCLEVBRFc7QUFFbkJDLE1BQUFBLEtBQUssRUFBRyxpQ0FBZ0NoQixHQUFHLENBQUNVLE9BQVE7QUFGakMsS0FBckI7O0FBSUFULG9CQUFJQyxLQUFKLENBQVVGLEdBQVY7QUFDRCxHQU5ELENBTUUsT0FBT2lCLEdBQVAsRUFBWTtBQUNackIsSUFBQUEsSUFBSSxDQUFDcUIsR0FBRCxDQUFKO0FBQ0Q7QUFDRjs7QUFFRCxTQUFTQyxlQUFULENBQTBCbEIsR0FBMUIsRUFBK0JOLEdBQS9CLEVBQW9DQyxHQUFwQyxFQUF5Q0MsSUFBekMsRUFBK0M7QUFDN0MsTUFBSUksR0FBRyxDQUFDVyxNQUFKLElBQWMsR0FBZCxJQUFxQlgsR0FBRyxDQUFDVyxNQUFKLEdBQWEsR0FBdEMsRUFBMkM7QUFHekNWLG9CQUFJa0IsS0FBSixDQUFXLHlEQUF3RG5CLEdBQUcsQ0FBQ1csTUFBTyxHQUE5RTs7QUFDQWhCLElBQUFBLEdBQUcsQ0FBQ3lCLEdBQUosQ0FBUSxjQUFSLEVBQXdCLFlBQXhCO0FBQ0F6QixJQUFBQSxHQUFHLENBQUNnQixNQUFKLENBQVdYLEdBQUcsQ0FBQ1csTUFBZixFQUF1QkMsSUFBdkIsQ0FBNkIsOEJBQTZCWixHQUFHLENBQUNVLE9BQVEsRUFBdEU7QUFDRCxHQU5ELE1BTU87QUFDTGQsSUFBQUEsSUFBSSxDQUFDSSxHQUFELENBQUo7QUFDRDtBQUNGOztBQUVELFNBQVNxQixlQUFULENBQTBCM0IsR0FBMUIsRUFBK0JDLEdBQS9CLEVBQW9DO0FBR2xDTSxrQkFBSWtCLEtBQUosQ0FBVSx3REFBVjs7QUFDQXhCLEVBQUFBLEdBQUcsQ0FBQ3lCLEdBQUosQ0FBUSxjQUFSLEVBQXdCLFlBQXhCO0FBQ0F6QixFQUFBQSxHQUFHLENBQUNnQixNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBc0IsWUFBV2xCLEdBQUcsQ0FBQzRCLFdBQVksbUNBQWpEO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCB7IGVycm9ycyB9IGZyb20gJy4uL3Byb3RvY29sJztcblxuXG5mdW5jdGlvbiBhbGxvd0Nyb3NzRG9tYWluIChyZXEsIHJlcywgbmV4dCkge1xuICB0cnkge1xuICAgIHJlcy5oZWFkZXIoJ0FjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbicsICcqJyk7XG4gICAgcmVzLmhlYWRlcignQWNjZXNzLUNvbnRyb2wtQWxsb3ctTWV0aG9kcycsICdHRVQsIFBPU1QsIFBVVCwgT1BUSU9OUywgREVMRVRFJyk7XG4gICAgcmVzLmhlYWRlcignQWNjZXNzLUNvbnRyb2wtQWxsb3ctSGVhZGVycycsICdDYWNoZS1Db250cm9sLCBQcmFnbWEsIE9yaWdpbiwgWC1SZXF1ZXN0ZWQtV2l0aCwgQ29udGVudC1UeXBlLCBBY2NlcHQsIFVzZXItQWdlbnQnKTtcblxuICAgIC8vIG5lZWQgdG8gcmVzcG9uZCAyMDAgdG8gT1BUSU9OU1xuICAgIGlmICgnT1BUSU9OUycgPT09IHJlcS5tZXRob2QpIHtcbiAgICAgIHJldHVybiByZXMuc2VuZFN0YXR1cygyMDApO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nLmVycm9yKGBVbmV4cGVjdGVkIGVycm9yOiAke2Vyci5zdGFja31gKTtcbiAgfVxuICBuZXh0KCk7XG59XG5cbmZ1bmN0aW9uIGZpeFB5dGhvbkNvbnRlbnRUeXBlIChyZXEsIHJlcywgbmV4dCkge1xuICAvLyBoYWNrIGJlY2F1c2UgcHl0aG9uIGNsaWVudCBsaWJyYXJ5IGdpdmVzIHVzIHdyb25nIGNvbnRlbnQtdHlwZVxuICBpZiAoL15cXC93ZC8udGVzdChyZXEucGF0aCkgJiYgL15QeXRob24vLnRlc3QocmVxLmhlYWRlcnNbJ3VzZXItYWdlbnQnXSkpIHtcbiAgICBpZiAocmVxLmhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddID09PSAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJykge1xuICAgICAgcmVxLmhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddID0gJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLTgnO1xuICAgIH1cbiAgfVxuICBuZXh0KCk7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRUb0pTT05Db250ZW50VHlwZSAocmVxLCByZXMsIG5leHQpIHtcbiAgaWYgKCFyZXEuaGVhZGVyc1snY29udGVudC10eXBlJ10pIHtcbiAgICByZXEuaGVhZGVyc1snY29udGVudC10eXBlJ10gPSAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOCc7XG4gIH1cbiAgbmV4dCgpO1xufVxuXG5mdW5jdGlvbiBjYXRjaEFsbEhhbmRsZXIgKGVyciwgcmVxLCByZXMsIG5leHQpIHtcbiAgbG9nLmVycm9yKGBVbmNhdWdodCBlcnJvcjogJHtlcnIubWVzc2FnZX1gKTtcbiAgbG9nLmVycm9yKCdTZW5kaW5nIGdlbmVyaWMgZXJyb3IgcmVzcG9uc2UnKTtcbiAgdHJ5IHtcbiAgICByZXMuc3RhdHVzKDUwMCkuc2VuZCh7XG4gICAgICBzdGF0dXM6IGVycm9ycy5Vbmtub3duRXJyb3IuY29kZSgpLFxuICAgICAgdmFsdWU6IGBFUlJPUiBydW5uaW5nIEFwcGl1bSBjb21tYW5kOiAke2Vyci5tZXNzYWdlfWBcbiAgICB9KTtcbiAgICBsb2cuZXJyb3IoZXJyKTtcbiAgfSBjYXRjaCAoaWduKSB7XG4gICAgbmV4dChpZ24pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhdGNoNFhYSGFuZGxlciAoZXJyLCByZXEsIHJlcywgbmV4dCkge1xuICBpZiAoZXJyLnN0YXR1cyA+PSA0MDAgJiYgZXJyLnN0YXR1cyA8IDUwMCkge1xuICAgIC8vIHNldCB0aGUgY29udGVudCB0eXBlIHRvIGB0ZXh0L3BsYWluYFxuICAgIC8vIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3Avc2VsZW5pdW0vd2lraS9Kc29uV2lyZVByb3RvY29sI1Jlc3BvbnNlc1xuICAgIGxvZy5kZWJ1ZyhgU2V0dGluZyBjb250ZW50IHR5cGUgdG8gJ3RleHQvcGxhaW4nIGZvciBIVFRQIHN0YXR1cyAnJHtlcnIuc3RhdHVzfSdgKTtcbiAgICByZXMuc2V0KCdjb250ZW50LXR5cGUnLCAndGV4dC9wbGFpbicpO1xuICAgIHJlcy5zdGF0dXMoZXJyLnN0YXR1cykuc2VuZChgVW5hYmxlIHRvIHByb2Nlc3MgcmVxdWVzdDogJHtlcnIubWVzc2FnZX1gKTtcbiAgfSBlbHNlIHtcbiAgICBuZXh0KGVycik7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2F0Y2g0MDRIYW5kbGVyIChyZXEsIHJlcykge1xuICAvLyBzZXQgdGhlIGNvbnRlbnQgdHlwZSB0byBgdGV4dC9wbGFpbmBcbiAgLy8gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9zZWxlbml1bS93aWtpL0pzb25XaXJlUHJvdG9jb2wjUmVzcG9uc2VzXG4gIGxvZy5kZWJ1ZygnTm8gcm91dGUgZm91bmQuIFNldHRpbmcgY29udGVudCB0eXBlIHRvIFxcJ3RleHQvcGxhaW5cXCcnKTtcbiAgcmVzLnNldCgnY29udGVudC10eXBlJywgJ3RleHQvcGxhaW4nKTtcbiAgcmVzLnN0YXR1cyg0MDQpLnNlbmQoYFRoZSBVUkwgJyR7cmVxLm9yaWdpbmFsVXJsfScgZGlkIG5vdCBtYXAgdG8gYSB2YWxpZCByZXNvdXJjZWApO1xufVxuXG5leHBvcnQgeyBhbGxvd0Nyb3NzRG9tYWluLCBmaXhQeXRob25Db250ZW50VHlwZSwgZGVmYXVsdFRvSlNPTkNvbnRlbnRUeXBlLCBjYXRjaEFsbEhhbmRsZXIsIGNhdGNoNDA0SGFuZGxlciwgY2F0Y2g0WFhIYW5kbGVyIH07XG4iXSwiZmlsZSI6ImxpYi9leHByZXNzL21pZGRsZXdhcmUuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
