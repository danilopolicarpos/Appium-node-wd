"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validators = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

function isNumber(o) {
  return _lodash.default.isNumber(o) || !_lodash.default.isNaN(parseInt(o, 10)) || !_lodash.default.isNaN(parseFloat(o));
}

function msValidator(ms) {
  if (!_lodash.default.isNumber(ms) || ms < 0) {
    throw new Error('Wait ms must be a number equal to 0 or greater');
  }
}

const validators = {
  setUrl: url => {
    if (!url || !url.match(/^([a-zA-Z0-9_+.-]+:\/\/)|(about:)|(data:)/)) {
      throw new Error('Url or Uri must start with <scheme>://');
    }
  },
  implicitWait: ms => {
    msValidator(ms);
  },
  asyncScriptTimeout: ms => {
    msValidator(ms);
  },
  clickCurrent: button => {
    if (!(isNumber(button) || _lodash.default.isUndefined(button)) || button < 0 || button > 2) {
      throw new Error('Click button must be 0, 1, or 2');
    }
  },
  setNetworkConnection: type => {
    if (!isNumber(type) || [0, 1, 2, 4, 6].indexOf(type) === -1) {
      throw new Error('Network type must be one of 0, 1, 2, 4, 6');
    }
  }
};
exports.validators = validators;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9wcm90b2NvbC92YWxpZGF0b3JzLmpzIl0sIm5hbWVzIjpbImlzTnVtYmVyIiwibyIsIl8iLCJpc05hTiIsInBhcnNlSW50IiwicGFyc2VGbG9hdCIsIm1zVmFsaWRhdG9yIiwibXMiLCJFcnJvciIsInZhbGlkYXRvcnMiLCJzZXRVcmwiLCJ1cmwiLCJtYXRjaCIsImltcGxpY2l0V2FpdCIsImFzeW5jU2NyaXB0VGltZW91dCIsImNsaWNrQ3VycmVudCIsImJ1dHRvbiIsImlzVW5kZWZpbmVkIiwic2V0TmV0d29ya0Nvbm5lY3Rpb24iLCJ0eXBlIiwiaW5kZXhPZiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFFQSxTQUFTQSxRQUFULENBQW1CQyxDQUFuQixFQUFzQjtBQUNwQixTQUFPQyxnQkFBRUYsUUFBRixDQUFXQyxDQUFYLEtBQWlCLENBQUNDLGdCQUFFQyxLQUFGLENBQVFDLFFBQVEsQ0FBQ0gsQ0FBRCxFQUFJLEVBQUosQ0FBaEIsQ0FBbEIsSUFBOEMsQ0FBQ0MsZ0JBQUVDLEtBQUYsQ0FBUUUsVUFBVSxDQUFDSixDQUFELENBQWxCLENBQXREO0FBQ0Q7O0FBRUQsU0FBU0ssV0FBVCxDQUFzQkMsRUFBdEIsRUFBMEI7QUFDeEIsTUFBSSxDQUFDTCxnQkFBRUYsUUFBRixDQUFXTyxFQUFYLENBQUQsSUFBbUJBLEVBQUUsR0FBRyxDQUE1QixFQUErQjtBQUM3QixVQUFNLElBQUlDLEtBQUosQ0FBVSxnREFBVixDQUFOO0FBQ0Q7QUFDRjs7QUFFRCxNQUFNQyxVQUFVLEdBQUc7QUFDakJDLEVBQUFBLE1BQU0sRUFBR0MsR0FBRCxJQUFTO0FBRWYsUUFBSSxDQUFDQSxHQUFELElBQVEsQ0FBQ0EsR0FBRyxDQUFDQyxLQUFKLENBQVUsMkNBQVYsQ0FBYixFQUFxRTtBQUNuRSxZQUFNLElBQUlKLEtBQUosQ0FBVSx3Q0FBVixDQUFOO0FBQ0Q7QUFDRixHQU5nQjtBQU9qQkssRUFBQUEsWUFBWSxFQUFHTixFQUFELElBQVE7QUFDcEJELElBQUFBLFdBQVcsQ0FBQ0MsRUFBRCxDQUFYO0FBQ0QsR0FUZ0I7QUFVakJPLEVBQUFBLGtCQUFrQixFQUFHUCxFQUFELElBQVE7QUFDMUJELElBQUFBLFdBQVcsQ0FBQ0MsRUFBRCxDQUFYO0FBQ0QsR0FaZ0I7QUFhakJRLEVBQUFBLFlBQVksRUFBR0MsTUFBRCxJQUFZO0FBQ3hCLFFBQUksRUFBRWhCLFFBQVEsQ0FBQ2dCLE1BQUQsQ0FBUixJQUFvQmQsZ0JBQUVlLFdBQUYsQ0FBY0QsTUFBZCxDQUF0QixLQUFpREEsTUFBTSxHQUFHLENBQVQsSUFBY0EsTUFBTSxHQUFHLENBQTVFLEVBQWdGO0FBQzlFLFlBQU0sSUFBSVIsS0FBSixDQUFVLGlDQUFWLENBQU47QUFDRDtBQUNGLEdBakJnQjtBQWtCakJVLEVBQUFBLG9CQUFvQixFQUFHQyxJQUFELElBQVU7QUFDOUIsUUFBSSxDQUFDbkIsUUFBUSxDQUFDbUIsSUFBRCxDQUFULElBQW1CLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsQ0FBVixFQUFhLENBQWIsRUFBZ0JDLE9BQWhCLENBQXdCRCxJQUF4QixNQUFrQyxDQUFDLENBQTFELEVBQTZEO0FBQzNELFlBQU0sSUFBSVgsS0FBSixDQUFVLDJDQUFWLENBQU47QUFDRDtBQUNGO0FBdEJnQixDQUFuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cbmZ1bmN0aW9uIGlzTnVtYmVyIChvKSB7XG4gIHJldHVybiBfLmlzTnVtYmVyKG8pIHx8ICFfLmlzTmFOKHBhcnNlSW50KG8sIDEwKSkgfHwgIV8uaXNOYU4ocGFyc2VGbG9hdChvKSk7XG59XG5cbmZ1bmN0aW9uIG1zVmFsaWRhdG9yIChtcykge1xuICBpZiAoIV8uaXNOdW1iZXIobXMpIHx8IG1zIDwgMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignV2FpdCBtcyBtdXN0IGJlIGEgbnVtYmVyIGVxdWFsIHRvIDAgb3IgZ3JlYXRlcicpO1xuICB9XG59XG5cbmNvbnN0IHZhbGlkYXRvcnMgPSB7XG4gIHNldFVybDogKHVybCkgPT4ge1xuICAgIC8vIGVpdGhlciBhbiBgeHl6Oi8vYCwgYGFib3V0OmAsIG9yIGBkYXRhOmAgc2NoZW1lIGlzIGFsbG93ZWRcbiAgICBpZiAoIXVybCB8fCAhdXJsLm1hdGNoKC9eKFthLXpBLVowLTlfKy4tXSs6XFwvXFwvKXwoYWJvdXQ6KXwoZGF0YTopLykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVXJsIG9yIFVyaSBtdXN0IHN0YXJ0IHdpdGggPHNjaGVtZT46Ly8nKTtcbiAgICB9XG4gIH0sXG4gIGltcGxpY2l0V2FpdDogKG1zKSA9PiB7XG4gICAgbXNWYWxpZGF0b3IobXMpO1xuICB9LFxuICBhc3luY1NjcmlwdFRpbWVvdXQ6IChtcykgPT4ge1xuICAgIG1zVmFsaWRhdG9yKG1zKTtcbiAgfSxcbiAgY2xpY2tDdXJyZW50OiAoYnV0dG9uKSA9PiB7XG4gICAgaWYgKCEoaXNOdW1iZXIoYnV0dG9uKSB8fCBfLmlzVW5kZWZpbmVkKGJ1dHRvbikpIHx8IChidXR0b24gPCAwIHx8IGJ1dHRvbiA+IDIpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NsaWNrIGJ1dHRvbiBtdXN0IGJlIDAsIDEsIG9yIDInKTtcbiAgICB9XG4gIH0sXG4gIHNldE5ldHdvcmtDb25uZWN0aW9uOiAodHlwZSkgPT4ge1xuICAgIGlmICghaXNOdW1iZXIodHlwZSkgfHwgWzAsIDEsIDIsIDQsIDZdLmluZGV4T2YodHlwZSkgPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05ldHdvcmsgdHlwZSBtdXN0IGJlIG9uZSBvZiAwLCAxLCAyLCA0LCA2Jyk7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgeyB2YWxpZGF0b3JzIH07XG4iXSwiZmlsZSI6ImxpYi9wcm90b2NvbC92YWxpZGF0b3JzLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
