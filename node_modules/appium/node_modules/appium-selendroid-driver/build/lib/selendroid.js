"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _appiumBaseDriver = require("appium-base-driver");

var _asyncbox = require("asyncbox");

var _logger = _interopRequireDefault(require("./logger"));

var _path = _interopRequireDefault(require("path"));

var _appiumSupport = require("appium-support");

var _installer = require("./installer");

const REQD_PARAMS = ['adb', 'appPackage', 'appActivity', 'tmpDir', 'apk', 'host', 'systemPort', 'devicePort'];

class SelendroidServer {
  constructor(opts = {}) {
    for (let req of REQD_PARAMS) {
      if (!opts || !opts[req]) {
        throw new Error(`Option '${req}' is required!`);
      }

      this[req] = opts[req];
    }

    this.modServerPkg = `selendroid.${this.appPackage}`;
    this.modServerPath = _path.default.resolve(this.tmpDir, `${this.modServerPkg}.apk`);
    this.jwproxy = new _appiumBaseDriver.JWProxy({
      server: this.host,
      port: this.systemPort
    });
    this.proxyReqRes = this.jwproxy.proxyReqRes.bind(this.jwproxy);
  }

  async prepareModifiedServer() {
    let needsUninstall = false;

    if (!(await _appiumSupport.fs.exists(this.modServerPath))) {
      await this.buildNewModServer();
      needsUninstall = true;
    }

    needsUninstall = (await this.checkAndSignCert(this.modServerPath)) || needsUninstall;

    if (needsUninstall) {
      _logger.default.info('New server was built, uninstalling any instances of it');

      await this.adb.uninstallApk(this.modServerPkg);
    }
  }

  async installModifiedServer() {
    let installed = await this.adb.isAppInstalled(this.modServerPkg);

    if (!installed) {
      await this.adb.install(this.modServerPath);
    }
  }

  async buildNewModServer() {
    _logger.default.info(`Repackaging selendroid for: '${this.appPackage}'`);

    let packageTmpDir = _path.default.resolve(this.tmpDir, this.appPackage);

    let newManifestPath = _path.default.resolve(this.tmpDir, 'AndroidManifest.xml');

    _logger.default.info(`Creating new manifest: '${newManifestPath}'`);

    await _appiumSupport.fs.mkdir(packageTmpDir);
    await _appiumSupport.fs.copyFile(_installer.SE_MANIFEST_PATH, newManifestPath);
    await this.adb.initAapt();
    await this.adb.compileManifest(newManifestPath, this.modServerPkg, this.appPackage);
    await this.adb.insertManifest(newManifestPath, _installer.SE_APK_PATH, this.modServerPath);

    _logger.default.info(`Repackaged selendroid ready: '${this.modServerPath}'`);
  }

  async checkAndSignCert(apk) {
    let signed = await this.adb.checkApkCert(apk, this.appPackage);

    if (!signed) {
      await this.adb.sign(apk);
    }

    return !signed;
  }

  async startSession(caps) {
    let instrumentWith = `${this.modServerPkg}/` + `io.selendroid.server.ServerInstrumentation`;

    _logger.default.info(`Starting selendroid server with instrumentation: ` + `${instrumentWith}`);

    await this.adb.instrument(this.appPackage, this.appActivity, instrumentWith);

    _logger.default.info('Waiting for Selendroid to be online...');

    await (0, _asyncbox.retryInterval)(20, 1000, async () => {
      await this.jwproxy.command('/status', 'GET');
    });
    await this.jwproxy.command('/session', 'POST', {
      desiredCapabilities: caps
    });
  }

  async deleteSession() {
    _logger.default.debug('Deleting Selendroid server session');

    try {
      await this.jwproxy.command('/', 'DELETE');
    } catch (err) {
      _logger.default.warn(`Did not get confirmation Selendroid deleteSession worked; ` + `Error was: ${err}`);
    }
  }

}

var _default = SelendroidServer;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
