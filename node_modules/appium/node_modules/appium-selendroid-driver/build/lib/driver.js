"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.DEVICE_PORT = exports.SelendroidDriver = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumBaseDriver = require("appium-base-driver");

var _selendroid = _interopRequireDefault(require("./selendroid"));

var _appiumSupport = require("appium-support");

var _installer = require("./installer");

var _asyncbox = require("asyncbox");

var _logger = _interopRequireDefault(require("./logger"));

var _commands = _interopRequireDefault(require("./commands"));

var _appiumAdb = require("appium-adb");

var _helpers = _interopRequireDefault(require("./helpers"));

var _appiumAndroidDriver = require("appium-android-driver");

var _desiredCaps = _interopRequireDefault(require("./desired-caps"));

let helpers = {};
Object.assign(helpers, _helpers.default, _appiumAndroidDriver.androidHelpers);
const SYSTEM_PORT_RANGE = [8200, 8299];
const DEVICE_PORT = 8080;
exports.DEVICE_PORT = DEVICE_PORT;
const NO_PROXY = [['GET', new RegExp('^/session/[^/]+/log/types$')], ['POST', new RegExp('^/session/[^/]+/log')], ['POST', new RegExp('^/session/[^/]+/location')], ['POST', new RegExp('^/session/[^/]+/appium')], ['GET', new RegExp('^/session/[^/]+/appium')], ['POST', new RegExp('^/session/[^/]+/context')], ['GET', new RegExp('^/session/[^/]+/context')], ['GET', new RegExp('^/session/[^/]+/contexts')], ['POST', new RegExp('^/session/[^/]+/element/[^/]+/value')], ['GET', new RegExp('^/session/[^/]+/element/[^/]+/rect')], ['GET', new RegExp('^/session/[^/]+/network_connection')], ['POST', new RegExp('^/session/[^/]+/network_connection')], ['POST', new RegExp('^/session/[^/]+/ime')], ['GET', new RegExp('^/session/[^/]+/ime')], ['POST', new RegExp('^/session/[^/]+/keys')], ['POST', new RegExp('^/session/[^/]+/touch/multi/perform')]];
const APP_EXTENSION = '.apk';

class SelendroidDriver extends _appiumBaseDriver.BaseDriver {
  constructor(opts = {}, shouldValidateCaps = true) {
    delete opts.shell;
    super(opts, shouldValidateCaps);
    this.desiredCapConstraints = _desiredCaps.default;
    this.selendroid = null;
    this.jwpProxyActive = false;
    this.defaultIME = null;
    this.jwpProxyAvoid = NO_PROXY;
    this.apkStrings = {};
    this.chromedriver = null;
    this.sessionChromedrivers = {};
    this.opts.systemPort = opts.selendroidPort || SYSTEM_PORT_RANGE[0];
    this.opts.adbPort = opts.adbPort || _appiumAdb.DEFAULT_ADB_PORT;
  }

  async createSession(caps) {
    try {
      if (!(await (0, _installer.serverExists)())) {
        throw new Error('Cannot start a selendroid session because the server ' + 'apk does not exist. Please run `npm run-script ' + 'selendroid` in the appium-selendroid-driver package');
      }

      let sessionId;
      [sessionId] = await super.createSession(caps);
      this.curContext = this.defaultContextName();
      this.opts.app = await this.helpers.configureApp(this.opts.app, APP_EXTENSION);
      await this.checkAppPresent();
      this.opts.systemPort = this.opts.selendroidPort || SYSTEM_PORT_RANGE[0];
      this.opts.adbPort = this.opts.adbPort || _appiumAdb.DEFAULT_ADB_PORT;
      await this.startSelendroidSession();
      return [sessionId, caps];
    } catch (e) {
      await this.deleteSession();
      throw e;
    }
  }

  validateDesiredCaps(caps) {
    let res = super.validateDesiredCaps(caps);
    if (!res) return res;

    if (this.opts.reboot) {
      this.setAvdFromCapabilities(caps);
    }
  }

  setAvdFromCapabilities(caps) {
    if (this.opts.avd) {
      _logger.default.info('avd name defined, ignoring device name and platform version');
    } else {
      if (!caps.deviceName) {
        _logger.default.errorAndThrow('avd or deviceName should be specified when reboot option is enabled');
      }

      if (!caps.platformVersion) {
        _logger.default.errorAndThrow('avd or platformVersion should be specified when reboot option is enabled');
      }

      let avdDevice = caps.deviceName.replace(/[^a-zA-Z0-9_.]/g, '-');
      this.opts.avd = `${avdDevice}__${caps.platformVersion}`;
    }
  }

  get driverData() {
    return {};
  }

  isEmulator() {
    return !!this.opts.avd;
  }

  async startSelendroidSession() {
    if (!this.opts.javaVersion) {
      this.opts.javaVersion = await helpers.getJavaVersion();
    }

    let {
      udid,
      emPort
    } = await helpers.getDeviceInfoFromCaps(this.opts);
    this.opts.udid = udid;
    this.opts.emPort = emPort;
    this.adb = await _appiumAndroidDriver.androidHelpers.createADB(this.opts);
    await helpers.ensureInternetPermissionForApp(this.adb, this.opts.app);
    let appInfo = await helpers.getLaunchInfo(this.adb, this.opts);
    Object.assign(this.opts, appInfo);
    await this.initSelendroidServer();
    await helpers.initDevice(this.adb, this.opts);
    await this.adb.forwardPort(this.opts.systemPort, DEVICE_PORT);
    await this.initAUT();
    await helpers.unlock(this, this.adb, this.caps);
    await this.selendroid.startSession(this.caps);
    await this.ensureAppStarts();

    if (this.opts.autoWebview) {
      await (0, _asyncbox.retryInterval)(20, this.opts.autoWebviewTimeout || 2000, async () => {
        await this.setContext(this.defaultWebviewName());
      });
    }

    this.jwpProxyActive = true;
  }

  async initSelendroidServer() {
    this.selendroid = new _selendroid.default({
      host: this.opts.host || 'localhost',
      systemPort: this.opts.systemPort,
      devicePort: DEVICE_PORT,
      adb: this.adb,
      apk: this.opts.app,
      tmpDir: this.opts.tmpDir,
      appPackage: this.opts.appPackage,
      appActivity: this.opts.appActivity
    });
    this.proxyReqRes = this.selendroid.proxyReqRes.bind(this.selendroid);
    await this.selendroid.prepareModifiedServer();
  }

  async initAUT() {
    _logger.default.debug('Initializing application under test');

    this.apkStrings[this.opts.language] = await helpers.pushStrings(this.opts.language, this.adb, this.opts);

    if (!this.opts.skipUninstall) {
      await this.adb.uninstallApk(this.opts.appPackage);
    }

    if (!this.opts.noSign) {
      let signed = await this.adb.checkApkCert(this.opts.app, this.opts.appPackage);

      if (!signed) {
        _logger.default.debug('Application not signed. Signing.');

        await this.adb.sign(this.opts.app, this.opts.appPackage);
      }
    }

    await helpers.installApk(this.adb, this.opts);
    await this.selendroid.installModifiedServer();
  }

  async ensureAppStarts() {
    let appWaitPackage = this.opts.appWaitPackage || this.opts.appPackage;
    let appWaitActivity = this.opts.appWaitActivity || this.opts.appActivity;

    try {
      await this.adb.waitForActivity(appWaitPackage, appWaitActivity, 5000);
    } catch (e) {
      _logger.default.info(`Selendroid did not start the activity we were waiting for, ` + `'${appWaitPackage}/${appWaitActivity}'. ` + `Starting it ourselves`);

      await this.adb.startApp({
        pkg: this.opts.appPackage,
        activity: this.opts.appActivity,
        action: this.opts.intentAction,
        category: this.opts.intentCategory,
        flags: this.opts.intentFlags,
        waitPkg: this.opts.appWaitPackage,
        waitActivity: this.opts.appWaitActivity,
        optionalIntentArguments: this.opts.optionalIntentArguments,
        stopApp: !this.opts.dontStopAppOnReset,
        retry: false
      });
    }
  }

  async deleteSession() {
    _logger.default.debug('Deleting Selendroid session');

    if (this.selendroid) {
      if (this.jwpProxyActive) {
        await this.selendroid.deleteSession();
      }

      this.selendroid = null;
    }

    this.jwpProxyActive = false;

    if (this.adb) {
      if (this.opts.unicodeKeyboard && this.opts.resetKeyboard && this.defaultIME) {
        _logger.default.debug(`Resetting IME to '${this.defaultIME}'`);

        await this.adb.setIME(this.defaultIME);
      }

      await this.adb.forceStop(this.opts.appPackage);
      await this.adb.stopLogcat();

      if (this.opts.reboot) {
        let avdName = this.opts.avd.replace('@', '');

        _logger.default.debug(`closing emulator '${avdName}'`);

        await this.adb.killEmulator(avdName);
      }
    }

    await super.deleteSession();
  }

  async checkAppPresent() {
    _logger.default.debug('Checking whether app is actually present');

    if (!(await _appiumSupport.fs.exists(this.opts.app))) {
      _logger.default.errorAndThrow(`Could not find app apk at '${this.opts.app}'`);
    }
  }

  defaultWebviewName() {
    return `${_appiumAndroidDriver.WEBVIEW_BASE}0`;
  }

  proxyActive(sessionId) {
    super.proxyActive(sessionId);
    return true;
  }

  getProxyAvoidList(sessionId) {
    super.getProxyAvoidList(sessionId);
    return this.jwpProxyAvoid;
  }

  canProxy(sessionId) {
    super.canProxy(sessionId);
    return true;
  }

}

exports.SelendroidDriver = SelendroidDriver;

for (let [cmd, fn] of _lodash.default.toPairs(_appiumAndroidDriver.androidCommands)) {
  if (!_lodash.default.includes(['defaultWebviewName'], cmd)) {
    SelendroidDriver.prototype[cmd] = fn;
  }
}

for (let [cmd, fn] of _lodash.default.toPairs(_commands.default)) {
  SelendroidDriver.prototype[cmd] = fn;
}

var _default = SelendroidDriver;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
