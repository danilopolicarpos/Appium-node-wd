"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("./logger"));

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

var _bufferpack = _interopRequireDefault(require("bufferpack"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _remoteDebugger = require("./remote-debugger");

var _uuidJs = _interopRequireDefault(require("uuid-js"));

var _net = _interopRequireDefault(require("net"));

var _remoteDebuggerMessageHandler = _interopRequireDefault(require("./remote-debugger-message-handler"));

var _helpers = require("./helpers");

var _rpcClient = _interopRequireDefault(require("./rpc-client"));

const DATA_LOG_LENGTH = {
  length: 200
};

class RemoteDebuggerRpcClient extends _rpcClient.default {
  constructor(opts = {}) {
    super({
      shouldCheckForTarget: false
    });
    const {
      platformVersion = {},
      isSafari = true,
      host = '::1',
      port = _remoteDebugger.REMOTE_DEBUGGER_PORT,
      socketPath,
      specialMessageHandlers = {},
      messageProxy,
      logFullResponse = false
    } = opts;
    this.host = host;
    this.port = port;
    this.socketPath = socketPath;
    this.messageProxy = messageProxy;
    this.socket = null;
    this.connected = false;
    this.connId = _uuidJs.default.create().toString();
    this.senderId = _uuidJs.default.create().toString();
    this.msgId = 0;
    this.received = Buffer.alloc(0);
    this.readPos = 0;
    this.logFullResponse = logFullResponse;
    this.specialMessageHandlers = specialMessageHandlers;
    this.setCommunicationProtocol((0, _helpers.isTargetBased)(isSafari, platformVersion));
  }

  setCommunicationProtocol(isTargetBased = false) {
    super.setCommunicationProtocol(isTargetBased);

    if (!this.messageHandler) {
      this.messageHandler = new _remoteDebuggerMessageHandler.default(this.specialMessageHandlers, isTargetBased);
    } else {
      this.messageHandler.setCommunicationProtocol(isTargetBased);
    }
  }

  async connect() {
    if (this.socketPath) {
      if (this.messageProxy) {
        _logger.default.debug(`Connecting to remote debugger via proxy through unix domain socket: '${this.messageProxy}'`);

        this.socket = _net.default.connect(this.messageProxy);
        this.socket.once('connect', () => {
          _logger.default.debug(`Forwarding the actual web inspector socket to the proxy: '${this.socketPath}'`);

          this.socket.write(JSON.stringify({
            socketPath: this.socketPath
          }));
        });
      } else {
        _logger.default.debug(`Connecting to remote debugger through unix domain socket: '${this.socketPath}'`);

        this.socket = _net.default.connect(this.socketPath);
      }
    } else {
      if (this.messageProxy) {
        this.port = this.messageProxy;
      }

      _logger.default.debug(`Connecting to remote debugger ${this.messageProxy ? 'via proxy ' : ''}through TCP: ${this.host}:${this.port}`);

      this.socket = new _net.default.Socket({
        type: 'tcp6'
      });
      this.socket.connect(this.port, this.host);
    }

    this.socket.setNoDelay(true);
    this.socket.on('close', () => {
      if (this.connected) {
        _logger.default.debug('Debugger socket disconnected');
      }

      this.connected = false;
      this.socket = null;
    });
    this.socket.on('end', () => {
      this.connected = false;
    });
    this.socket.on('data', this.receive.bind(this));
    return await new _bluebird.default((resolve, reject) => {
      this.socket.on('connect', () => {
        _logger.default.debug(`Debugger socket connected`);

        this.connected = true;
        resolve();
      });
      this.socket.on('error', err => {
        if (this.connected) {
          _logger.default.error(`Socket error: ${err.message}`);

          this.connected = false;
        }

        reject(err);
      });
    });
  }

  async disconnect() {
    if (this.isConnected()) {
      _logger.default.debug('Disconnecting from remote debugger');

      this.socket.destroy();
    }

    this.connected = false;
  }

  isConnected() {
    return this.connected;
  }

  setSpecialMessageHandler(key, errorHandler, handler) {
    this.messageHandler.setSpecialMessageHandler(key, errorHandler, handler);
  }

  getSpecialMessageHandler(key) {
    return this.messageHandler.getSpecialMessageHandler(key);
  }

  setDataMessageHandler(key, errorHandler, handler) {
    this.messageHandler.setDataMessageHandler(key, errorHandler, handler);
  }

  allowNavigationWithoutReload(allow = true) {
    this.messageHandler.allowNavigationWithoutReload(allow);
  }

  async selectApp(appIdKey, applicationConnectedHandler) {
    return await new _bluebird.default((resolve, reject) => {
      let onAppChange = dict => {
        let oldAppIdKey = dict.WIRHostApplicationIdentifierKey;
        let correctAppIdKey = dict.WIRApplicationIdentifierKey;

        if (oldAppIdKey && correctAppIdKey !== oldAppIdKey) {
          _logger.default.debug(`We were notified we might have connected to the wrong app. ` + `Using id ${correctAppIdKey} instead of ${oldAppIdKey}`);
        }

        applicationConnectedHandler(dict);
        reject(new Error('New application has connected'));
      };

      this.setSpecialMessageHandler('_rpc_applicationConnected:', reject, onAppChange);
      return (async () => {
        let [connectedAppIdKey, pageDict] = await this.send('connectToApp', {
          appIdKey
        });

        if (_lodash.default.isEmpty(pageDict)) {
          let msg = 'Empty page dictionary received';

          _logger.default.debug(msg);

          reject(new Error(msg));
        } else {
          resolve([connectedAppIdKey, pageDict]);
        }
      })();
    }).finally(() => {
      this.setSpecialMessageHandler('_rpc_applicationConnected:', null, applicationConnectedHandler);
    });
  }

  async sendMessage(command, opts = {}) {
    let onSocketError;
    return await new _bluebird.default((resolve, reject) => {
      const msgId = this.msgId++;

      const sendOpts = _lodash.default.defaults({
        connId: this.connId,
        senderId: this.senderId
      }, opts);

      const cmd = this.remoteMessages.getRemoteCommand(command, sendOpts);
      let socketCb = _lodash.default.noop;

      onSocketError = exception => {
        if (this.connected) {
          _logger.default.error(`Socket error: ${exception.message}`);
        }

        reject(exception);
      };

      this.socket.on('error', onSocketError);

      if (this.messageHandler.hasSpecialMessageHandler(cmd.__selector)) {
        const specialMessageHandler = this.getSpecialMessageHandler(cmd.__selector);
        this.setSpecialMessageHandler(cmd.__selector, reject, (...args) => {
          const response = this.logFullResponse ? JSON.stringify(args, null, 2) : _lodash.default.truncate(JSON.stringify(args), DATA_LOG_LENGTH);

          _logger.default.debug(`Received response from socket send: '${response}'`);

          specialMessageHandler(...args);

          if (this.messageHandler.hasSpecialMessageHandler(cmd.__selector)) {
            this.setSpecialMessageHandler(cmd.__selector, null, specialMessageHandler);
          }

          resolve(args);
        });
      } else if (cmd.__argument && cmd.__argument.WIRSocketDataKey) {
        const errorHandler = function (err) {
          const msg = `Remote debugger error with code '${err.code}': ${err.message}`;
          reject(new Error(msg));
        };

        this.setDataMessageHandler(msgId.toString(), errorHandler, function dataMessageHandler(value) {
          const msg = _lodash.default.truncate(_lodash.default.isString(value) ? value : JSON.stringify(value), {
            length: 50
          });

          _logger.default.debug(`Received data response from socket send: '${msg}'`);

          _logger.default.debug(`Original command: ${command}`);

          resolve(value);
        });

        if (cmd.__argument.WIRSocketDataKey.params) {
          cmd.__argument.WIRSocketDataKey.params.id = msgId;

          if (!cmd.__argument.WIRSocketDataKey.params.targetId) {
            cmd.__argument.WIRSocketDataKey.params.targetId = `page-${sendOpts.pageIdKey}`;
          }

          if (cmd.__argument.WIRSocketDataKey.params.message) {
            cmd.__argument.WIRSocketDataKey.params.message.id = msgId;
            cmd.__argument.WIRSocketDataKey.params.message = JSON.stringify(cmd.__argument.WIRSocketDataKey.params.message);
          }
        }

        cmd.__argument.WIRSocketDataKey.id = msgId;
        cmd.__argument.WIRSocketDataKey = Buffer.from(JSON.stringify(cmd.__argument.WIRSocketDataKey));
      } else {
        socketCb = resolve;
      }

      _logger.default.debug(`Sending '${cmd.__selector}' message to remote debugger (id: ${msgId})`);

      let plist;

      try {
        plist = _appiumSupport.plist.createBinaryPlist(cmd);
      } catch (e) {
        let msg = `Could not create binary plist from data: ${e.message}`;

        _logger.default.error(msg);

        return reject(new Error(msg));
      }

      if (this.socket && this.connected) {
        this.socket.cork();

        try {
          this.socket.write(_bufferpack.default.pack('L', [plist.length]));
          this.socket.write(plist, socketCb);
        } finally {
          this.socket.uncork();
        }
      } else {
        let msg = 'Attempted to write data to socket after it was closed!';

        _logger.default.error(msg);

        reject(new Error(msg));
      }
    }).finally(() => {
      if (_lodash.default.isFunction(onSocketError)) {
        this.socket.removeListener('error', onSocketError);
      }
    });
  }

  async receive(data) {
    this.received = Buffer.concat([this.received, data]);
    let dataLeftOver = true;

    while (dataLeftOver) {
      const oldReadPos = this.readPos;
      const prefix = this.received.slice(this.readPos, this.readPos + 4);

      if (_lodash.default.isEmpty(prefix)) {
        return;
      }

      let msgLength;

      try {
        msgLength = _bufferpack.default.unpack('L', prefix)[0];
      } catch (err) {
        _logger.default.error(`Buffer could not unpack: ${err}`);

        return;
      }

      this.readPos += 4;

      if (this.received.length < msgLength + this.readPos) {
        this.readPos = oldReadPos;
        break;
      }

      const body = this.received.slice(this.readPos, msgLength + this.readPos);
      let plist;

      try {
        plist = _appiumSupport.plist.parseBinaryPlist(body);
      } catch (e) {
        _logger.default.error(`Error parsing binary plist: ${e}`);

        return;
      }

      if (plist.length === 1) {
        plist = plist[0];
      }

      for (const key of ['WIRMessageDataKey', 'WIRDestinationKey', 'WIRSocketDataKey']) {
        if (!_lodash.default.isUndefined(plist[key])) {
          plist[key] = plist[key].toString('utf8');
        }
      }

      this.readPos += msgLength;
      let leftOver = this.received.length - this.readPos;

      if (leftOver !== 0) {
        let chunk = Buffer.alloc(leftOver);
        this.received.copy(chunk, 0, this.readPos);
        this.received = chunk;
      } else {
        this.received = Buffer.alloc(0);
        dataLeftOver = false;
      }

      this.readPos = 0;

      if (plist) {
        await this.messageHandler.handleMessage(plist);
      }
    }
  }

  setTimelineEventHandler(timelineEventHandler) {
    this.timelineEventHandler = timelineEventHandler;
    this.messageHandler.setTimelineEventHandler(timelineEventHandler);
  }

  setConsoleLogEventHandler(consoleEventHandler) {
    this.consoleEventHandler = consoleEventHandler;
    this.messageHandler.setConsoleLogEventHandler(consoleEventHandler);
  }

  setNetworkLogEventHandler(networkEventHandler) {
    this.networkEventHandler = networkEventHandler;
    this.messageHandler.setNetworkEventHandler(networkEventHandler);
  }

}

exports.default = RemoteDebuggerRpcClient;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
