"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("./logger"));

var _remoteMessages = _interopRequireDefault(require("./remote-messages"));

var _asyncbox = require("asyncbox");

var _lodash = _interopRequireDefault(require("lodash"));

const WAIT_FOR_TARGET_RETRIES = 10;
const WAIT_FOR_TARGET_INTERVAL = 1000;

class RpcClient {
  constructor(opts = {}) {
    this._targets = [];
    this._shouldCheckForTarget = !!opts.shouldCheckForTarget;
  }

  setCommunicationProtocol(isTargetBased = false) {
    _logger.default.warn(`Setting communication protocol: using ${isTargetBased ? 'Target-based' : 'full Web Inspector protocol'} communication`);

    this.isTargetBased = isTargetBased;

    if (!this.remoteMessages) {
      this.remoteMessages = new _remoteMessages.default(isTargetBased);
    } else {
      this.remoteMessages.setCommunicationProtocol(isTargetBased);
    }
  }

  async waitForTarget() {
    if (!this.shouldCheckForTarget || !this.isTargetBased) {
      return;
    }

    await (0, _asyncbox.retryInterval)(WAIT_FOR_TARGET_RETRIES, WAIT_FOR_TARGET_INTERVAL, () => {
      if (_lodash.default.isEmpty(this.targets)) {
        throw new Error('No targets found, unable to communicate with device');
      }
    });
  }

  async send(command, opts = {}) {
    try {
      await this.waitForTarget();
      return await this.sendMessage(command, opts);
    } catch (err) {
      if (err.message.includes(`'Target' domain was not found`)) {
        this.setCommunicationProtocol(false);
        return await this.sendMessage(command, opts);
      } else if (err.message.includes(`domain was not found`)) {
        this.setCommunicationProtocol(true);
        await this.waitForTarget();
        return await this.sendMessage(command, opts);
      }

      throw err;
    }
  }

  async sendMessage() {
    throw new Error(`Sub-classes need to implement a 'sendMessage' function`);
  }

  addTarget(targetInfo) {
    if (_lodash.default.isUndefined(targetInfo) || _lodash.default.isUndefined(targetInfo.targetId)) {
      _logger.default.debug(`Received 'targetCreated' event with no target. Skipping`);

      return;
    }

    _logger.default.debug(`Target created: ${JSON.stringify(targetInfo)}`);

    if (!this.targets.includes(targetInfo.targetId)) {
      this.targets.push(targetInfo.targetId);
    }
  }

  removeTarget(targetInfo) {
    if (_lodash.default.isUndefined(targetInfo) || _lodash.default.isUndefined(targetInfo.targetId)) {
      _logger.default.debug(`Received 'taretDestroyed' event with no target. Skipping`);

      return;
    }

    _logger.default.debug(`Target destroyed: ${JSON.stringify(targetInfo)}`);

    _lodash.default.pull(this.targets, targetInfo.targetId);
  }

  get targets() {
    this._targets = this._targets || [];
    return this._targets;
  }

  get target() {
    if (_lodash.default.isEmpty(this.targets)) {
      throw new Error('No targets found, unable to communicate with device');
    }

    return _lodash.default.first(this.targets);
  }

  get shouldCheckForTarget() {
    return this._shouldCheckForTarget;
  }

  set shouldCheckForTarget(shouldCheckForTarget) {
    this._shouldCheckForTarget = !!shouldCheckForTarget;
  }

}

exports.default = RpcClient;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9ycGMtY2xpZW50LmpzIl0sIm5hbWVzIjpbIldBSVRfRk9SX1RBUkdFVF9SRVRSSUVTIiwiV0FJVF9GT1JfVEFSR0VUX0lOVEVSVkFMIiwiUnBjQ2xpZW50IiwiY29uc3RydWN0b3IiLCJvcHRzIiwiX3RhcmdldHMiLCJfc2hvdWxkQ2hlY2tGb3JUYXJnZXQiLCJzaG91bGRDaGVja0ZvclRhcmdldCIsInNldENvbW11bmljYXRpb25Qcm90b2NvbCIsImlzVGFyZ2V0QmFzZWQiLCJsb2ciLCJ3YXJuIiwicmVtb3RlTWVzc2FnZXMiLCJSZW1vdGVNZXNzYWdlcyIsIndhaXRGb3JUYXJnZXQiLCJfIiwiaXNFbXB0eSIsInRhcmdldHMiLCJFcnJvciIsInNlbmQiLCJjb21tYW5kIiwic2VuZE1lc3NhZ2UiLCJlcnIiLCJtZXNzYWdlIiwiaW5jbHVkZXMiLCJhZGRUYXJnZXQiLCJ0YXJnZXRJbmZvIiwiaXNVbmRlZmluZWQiLCJ0YXJnZXRJZCIsImRlYnVnIiwiSlNPTiIsInN0cmluZ2lmeSIsInB1c2giLCJyZW1vdmVUYXJnZXQiLCJwdWxsIiwidGFyZ2V0IiwiZmlyc3QiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBR0EsTUFBTUEsdUJBQXVCLEdBQUcsRUFBaEM7QUFDQSxNQUFNQyx3QkFBd0IsR0FBRyxJQUFqQzs7QUFFZSxNQUFNQyxTQUFOLENBQWdCO0FBQzdCQyxFQUFBQSxXQUFXLENBQUVDLElBQUksR0FBRyxFQUFULEVBQWE7QUFDdEIsU0FBS0MsUUFBTCxHQUFnQixFQUFoQjtBQUNBLFNBQUtDLHFCQUFMLEdBQTZCLENBQUMsQ0FBQ0YsSUFBSSxDQUFDRyxvQkFBcEM7QUFDRDs7QUFFREMsRUFBQUEsd0JBQXdCLENBQUVDLGFBQWEsR0FBRyxLQUFsQixFQUF5QjtBQUMvQ0Msb0JBQUlDLElBQUosQ0FBVSx5Q0FBd0NGLGFBQWEsR0FBRyxjQUFILEdBQW9CLDZCQUE4QixnQkFBakg7O0FBQ0EsU0FB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QUNBLFdBQU8sS0FBS0EsUUFBWjtBQUNEOztBQUVELE1BQUk4QixNQUFKLEdBQWM7QUFDWixRQUFJcEIsZ0JBQUVDLE9BQUYsQ0FBVSxLQUFLQyxPQUFmLENBQUosRUFBNkI7QUFDM0IsWUFBTSxJQUFJQyxLQUFKLENBQVUscURBQVYsQ0FBTjtBQUNEOztBQUlELFdBQU9ILGdCQUFFcUIsS0FBRixDQUFRLEtBQUtuQixPQUFiLENBQVA7QUFDRDs7QUFFRCxNQUFJVixvQkFBSixHQUE0QjtBQUMxQixXQUFPLEtBQUtELHFCQUFaO0FBQ0Q7O0FBRUQsTUFBSUMsb0JBQUosQ0FBMEJBLG9CQUExQixFQUFnRDtBQUM5QyxTQUFLRCxxQkFBTCxHQUE2QixDQUFDLENBQUNDLG9CQUEvQjtBQUNEOztBQTNGNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCBSZW1vdGVNZXNzYWdlcyBmcm9tICcuL3JlbW90ZS1tZXNzYWdlcyc7XG5pbXBvcnQgeyByZXRyeUludGVydmFsIH0gZnJvbSAnYXN5bmNib3gnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuXG5jb25zdCBXQUlUX0ZPUl9UQVJHRVRfUkVUUklFUyA9IDEwO1xuY29uc3QgV0FJVF9GT1JfVEFSR0VUX0lOVEVSVkFMID0gMTAwMDtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUnBjQ2xpZW50IHtcbiAgY29uc3RydWN0b3IgKG9wdHMgPSB7fSkge1xuICAgIHRoaXMuX3RhcmdldHMgPSBbXTtcbiAgICB0aGlzLl9zaG91bGRDaGVja0ZvclRhcmdldCA9ICEhb3B0cy5zaG91bGRDaGVja0ZvclRhcmdldDtcbiAgfVxuXG4gIHNldENvbW11bmljYXRpb25Qcm90b2NvbCAoaXNUYXJnZXRCYXNlZCA9IGZhbHNlKSB7XG4gICAgbG9nLndhcm4oYFNldHRpbmcgY29tbXVuaWNhdGlvbiBwcm90b2NvbDogdXNpbmcgJHtpc1RhcmdldEJhc2VkID8gJ1RhcmdldC1iYXNlZCcgOiAnZnVsbCBXZWIgSW5zcGVjdG9yIHByb3RvY29sJ30gY29tbXVuaWNhdGlvbmApO1xuICAgIHRoaXMuaXNUYXJnZXRCYXNlZCA9IGlzVGFyZ2V0QmFzZWQ7XG5cbiAgICBpZiAoIXRoaXMucmVtb3RlTWVzc2FnZXMpIHtcbiAgICAgIHRoaXMucmVtb3RlTWVzc2FnZXMgPSBuZXcgUmVtb3RlTWVzc2FnZXMoaXNUYXJnZXRCYXNlZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVtb3RlTWVzc2FnZXMuc2V0Q29tbXVuaWNhdGlvblByb3RvY29sKGlzVGFyZ2V0QmFzZWQpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHdhaXRGb3JUYXJnZXQgKCkge1xuICAgIGlmICghdGhpcy5zaG91bGRDaGVja0ZvclRhcmdldCB8fCAhdGhpcy5pc1RhcmdldEJhc2VkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgYXdhaXQgcmV0cnlJbnRlcnZhbChXQUlUX0ZPUl9UQVJHRVRfUkVUUklFUywgV0FJVF9GT1JfVEFSR0VUX0lOVEVSVkFMLCAoKSA9PiB7XG4gICAgICBpZiAoXy5pc0VtcHR5KHRoaXMudGFyZ2V0cykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyB0YXJnZXRzIGZvdW5kLCB1bmFibGUgdG8gY29tbXVuaWNhdGUgd2l0aCBkZXZpY2UnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIHNlbmQgKGNvbW1hbmQsIG9wdHMgPSB7fSkge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLndhaXRGb3JUYXJnZXQoKTtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnNlbmRNZXNzYWdlKGNvbW1hbmQsIG9wdHMpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKGVyci5tZXNzYWdlLmluY2x1ZGVzKGAnVGFyZ2V0JyBkb21haW4gd2FzIG5vdCBmb3VuZGApKSB7XG4gICAgICAgIHRoaXMuc2V0Q29tbXVuaWNhdGlvblByb3RvY29sKGZhbHNlKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuc2VuZE1lc3NhZ2UoY29tbWFuZCwgb3B0cyk7XG4gICAgICB9IGVsc2UgaWYgKGVyci5tZXNzYWdlLmluY2x1ZGVzKGBkb21haW4gd2FzIG5vdCBmb3VuZGApKSB7XG4gICAgICAgIHRoaXMuc2V0Q29tbXVuaWNhdGlvblByb3RvY29sKHRydWUpO1xuICAgICAgICBhd2FpdCB0aGlzLndhaXRGb3JUYXJnZXQoKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuc2VuZE1lc3NhZ2UoY29tbWFuZCwgb3B0cyk7XG4gICAgICB9XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgc2VuZE1lc3NhZ2UgKC8qIGNvbW1hbmQsIG9wdHMgPSB7fSAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtYXdhaXRcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFN1Yi1jbGFzc2VzIG5lZWQgdG8gaW1wbGVtZW50IGEgJ3NlbmRNZXNzYWdlJyBmdW5jdGlvbmApO1xuICB9XG5cbiAgYWRkVGFyZ2V0ICh0YXJnZXRJbmZvKSB7XG4gICAgaWYgKF8uaXNVbmRlZmluZWQodGFyZ2V0SW5mbykgfHwgXy5pc1VuZGVmaW5lZCh0YXJnZXRJbmZvLnRhcmdldElkKSkge1xuICAgICAgbG9nLmRlYnVnKGBSZWNlaXZlZCAndGFyZ2V0Q3JlYXRlZCcgZXZlbnQgd2l0aCBubyB0YXJnZXQuIFNraXBwaW5nYCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxvZy5kZWJ1ZyhgVGFyZ2V0IGNyZWF0ZWQ6ICR7SlNPTi5zdHJpbmdpZnkodGFyZ2V0SW5mbyl9YCk7XG4gICAgaWYgKCF0aGlzLnRhcmdldHMuaW5jbHVkZXModGFyZ2V0SW5mby50YXJnZXRJZCkpIHtcbiAgICAgIHRoaXMudGFyZ2V0cy5wdXNoKHRhcmdldEluZm8udGFyZ2V0SWQpO1xuICAgIH1cbiAgfVxuXG4gIHJlbW92ZVRhcmdldCAodGFyZ2V0SW5mbykge1xuICAgIGlmIChfLmlzVW5kZWZpbmVkKHRhcmdldEluZm8pIHx8IF8uaXNVbmRlZmluZWQodGFyZ2V0SW5mby50YXJnZXRJZCkpIHtcbiAgICAgIGxvZy5kZWJ1ZyhgUmVjZWl2ZWQgJ3RhcmV0RGVzdHJveWVkJyBldmVudCB3aXRoIG5vIHRhcmdldC4gU2tpcHBpbmdgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbG9nLmRlYnVnKGBUYXJnZXQgZGVzdHJveWVkOiAke0pTT04uc3RyaW5naWZ5KHRhcmdldEluZm8pfWApO1xuICAgIF8ucHVsbCh0aGlzLnRhcmdldHMsIHRhcmdldEluZm8udGFyZ2V0SWQpO1xuICB9XG5cbiAgZ2V0IHRhcmdldHMgKCkge1xuICAgIHRoaXMuX3RhcmdldHMgPSB0aGlzLl90YXJnZXRzIHx8IFtdO1xuICAgIHJldHVybiB0aGlzLl90YXJnZXRzO1xuICB9XG5cbiAgZ2V0IHRhcmdldCAoKSB7XG4gICAgaWYgKF8uaXNFbXB0eSh0aGlzLnRhcmdldHMpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHRhcmdldHMgZm91bmQsIHVuYWJsZSB0byBjb21tdW5pY2F0ZSB3aXRoIGRldmljZScpO1xuICAgIH1cblxuICAgIC8vIGF0IHRoZSBtb21lbnQsIHRoZXJlIGlzIG5vIGluZGljYXRpb24gb2YgaG93IHRoZSBtYXBwaW5nIHdvcmtzXG4gICAgLy8gc28gdGFrZSB0aGUgZmlyc3Q/XG4gICAgcmV0dXJuIF8uZmlyc3QodGhpcy50YXJnZXRzKTtcbiAgfVxuXG4gIGdldCBzaG91bGRDaGVja0ZvclRhcmdldCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Nob3VsZENoZWNrRm9yVGFyZ2V0O1xuICB9XG5cbiAgc2V0IHNob3VsZENoZWNrRm9yVGFyZ2V0IChzaG91bGRDaGVja0ZvclRhcmdldCkge1xuICAgIHRoaXMuX3Nob3VsZENoZWNrRm9yVGFyZ2V0ID0gISFzaG91bGRDaGVja0ZvclRhcmdldDtcbiAgfVxufVxuIl0sImZpbGUiOiJsaWIvcnBjLWNsaWVudC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiJ9
