"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("./logger"));

var _remoteDebugger = require("./remote-debugger");

var _ws = _interopRequireDefault(require("ws"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _lodash = _interopRequireDefault(require("lodash"));

var _helpers = require("./helpers");

var _es6Error = _interopRequireDefault(require("es6-error"));

var _appiumSupport = require("appium-support");

var _rpcClient = _interopRequireDefault(require("./rpc-client"));

const DATA_LOG_LENGTH = {
  length: 200
};

class WebKitRpcClient extends _rpcClient.default {
  constructor(opts = {}) {
    super({
      shouldCheckForTarget: true
    });
    const {
      host,
      port = _remoteDebugger.REMOTE_DEBUGGER_PORT,
      responseTimeout = _remoteDebugger.RPC_RESPONSE_TIMEOUT_MS,
      platformVersion = {},
      isSafari = true
    } = opts;
    this.host = host || 'localhost';
    this.port = port;
    this.responseTimeout = responseTimeout;
    this.platformVersion = platformVersion;
    this.isSafari = isSafari;
    this.curMsgId = 0;
    this.dataHandlers = {};
    this.dataMethods = {};
    this.errorHandlers = {};
    this.setCommunicationProtocol((0, _helpers.isTargetBased)(isSafari, platformVersion));
  }

  async connect(pageId) {
    return await new _bluebird.default((resolve, reject) => {
      const url = `ws://${this.host}:${this.port}/devtools/page/${pageId}`;
      this.pageIdKey = pageId;

      _logger.default.debug(`Connecting to WebKit socket: '${url}'`);

      this.socket = new _ws.default(url);
      this.socket.on('open', () => {
        _logger.default.debug(`WebKit debugger web socket connected to url: ${url}`);

        this.connected = true;
        resolve();
      });
      this.socket.on('close', () => {
        _logger.default.debug('WebKit remote debugger socket disconnected');

        this.connected = false;
      });
      this.socket.on('error', exception => {
        if (this.connected) {
          _logger.default.debug(`WebKit debugger web socket error: ${exception.message}`);

          this.connected = false;
        }

        reject(exception);
      });
      this.socket.on('message', this.receive.bind(this));
    });
  }

  disconnect() {
    _logger.default.debug('Disconnecting from WebKit remote debugger');

    if (this.isConnected()) {
      this.socket.close(1001);
    }

    this.connected = false;
  }

  isConnected() {
    return this.socket !== null && this.connected;
  }

  async sendMessage(command, opts) {
    let data = this.remoteMessages.getRemoteCommand(command, _lodash.default.defaults({
      connId: this.connId,
      senderId: this.senderId
    }, opts));

    _logger.default.debug(`Sending WebKit data: ${_lodash.default.truncate(JSON.stringify(data), DATA_LOG_LENGTH)}`);

    _logger.default.debug(`Webkit response timeout: ${this.responseTimeout}`);

    const msgId = this.curMsgId++;
    data.id = msgId;
    let method = data.method;

    if (this.isTargetBased) {
      method = data.params.message.method;
      data.params.id = msgId;
      data.params.message.id = msgId;
      data.params.message = JSON.stringify(data.params.message);
      data.params.targetId = this.target;
    }

    const id = msgId.toString();
    return await new _bluebird.default((resolve, reject) => {
      this.dataHandlers[id] = resolve;
      this.dataMethods[id] = method;
      this.errorHandlers[id] = reject;
      this.socket.send(JSON.stringify(data), function socketReceipt(error) {
        if (_appiumSupport.util.hasValue(error)) {
          _logger.default.debug(`WebKit socket error occurred: ${error}`);

          reject(new Error(error));
        }
      });
    }).catch(e => {
      if (e.constructor.name !== WebKitRPCWarning.name) {
        throw e;
      }

      _logger.default.warn(e.message);

      return _bluebird.default.resolve();
    }).finally(res => {
      delete this.dataHandlers[id];
      delete this.dataMethods[id];
      delete this.errorHandlers[id];
      return res;
    }).timeout(this.responseTimeout);
  }

  receive(data) {
    const response = this.logFullResponse ? JSON.stringify(data, null, 2) : _lodash.default.truncate(data, DATA_LOG_LENGTH);

    _logger.default.debug(`Received WebKit data: '${response}'`);

    data = _appiumSupport.util.safeJsonParse(data);

    const rejectCall = error => {
      if (data && this.errorHandlers[data.id]) {
        return this.errorHandlers[data.id](error);
      }

      if (error.constructor.name === WebKitRPCWarning.name) {
        _logger.default.warn(error.message);
      } else {
        _logger.default.errorAndThrow(error);
      }
    };

    if (!_lodash.default.isPlainObject(data)) {
      return rejectCall(new WebKitRPCWarning(`No parseable data found`));
    }

    if (data.wasThrown || data.result && data.result.wasThrown) {
      const message = data.wasThrown ? data.result.value || data.result.description : data.result.result.value || data.result.result.description;
      return rejectCall(new Error(message));
    }

    let {
      id: msgId,
      result,
      params,
      error
    } = data;
    let method = this.dataMethods[msgId] || data.method;

    if (this.isTargetBased) {
      if (!_lodash.default.startsWith(data.method, 'Target')) {
        _logger.default.debug(`Received receipt for message '${msgId}'`);

        return;
      }

      if (data.params.message) {
        let message;

        try {
          message = JSON.parse(data.params.message);
        } catch (err) {
          _logger.default.error(`Unable to parse message: ${err.message}`);

          _logger.default.error(`Data:`);

          _logger.default.error(`${JSON.stringify(data, null, 2)}`);
        }

        params = message.params || params;

        if (message.result) {
          result = message.result;

          if (message.result.result) {
            result = message.result.result;

            if (message.result.result.value) {
              result = message.result.result.value;

              if (_lodash.default.isString(result)) {
                try {
                  result = JSON.parse(result);
                } catch (ign) {}
              }
            }
          }
        }

        msgId = message.id;
        method = message.method || method;
      }
    }

    if (!method) {
      return rejectCall(new WebKitRPCWarning(`Did not find any handlers for ${msgId ? `'${msgId}'` : 'recent'} message`));
    }

    _logger.default.debug(`Found method '${method}' ${msgId ? `for message '${msgId}'` : ''}`);

    let isEventHandled = false;

    switch (method) {
      case 'Profiler.resetProfiles':
        _logger.default.debug('Device is telling us to reset profiles. Should probably ' + 'do some kind of callback here');

        isEventHandled = true;
        break;

      case 'Timeline.eventRecorded':
        if (this.timelineEventHandler) {
          this.timelineEventHandler(result);
          isEventHandled = true;
        }

        break;

      case 'Console.messagesCleared':
        isEventHandled = true;
        break;

      case 'Console.messageAdded':
        if (this.consoleEventHandler) {
          this.consoleEventHandler(params.message);
          isEventHandled = true;
        }

        break;

      case 'Page.navigate':
        _logger.default.debug(`Received page navigated message: ${(0, _helpers.simpleStringify)(data)}`);

        isEventHandled = true;
        break;

      case 'Network.dataReceived':
      case 'Network.requestWillBeSent':
      case 'Network.responseReceived':
      case 'Network.loadingFinished':
      case 'Network.loadingFailed':
        if (_lodash.default.isFunction(this.networkEventHandler)) {
          this.networkEventHandler(method, params);
          return;
        }

        break;

      case 'Target.targetCreated':
        this.addTarget(params.targetInfo);
        isEventHandled = true;
        break;

      case 'Target.targetDestroyed':
        this.removeTarget(params);
        isEventHandled = true;
        break;
    }

    if (!data.error && _lodash.default.has(this.dataHandlers, msgId)) {
      return this.dataHandlers[msgId](result);
    }

    if (data.error && _lodash.default.has(this.errorHandlers, msgId)) {
      return this.errorHandlers[msgId](error);
    }

    if (!isEventHandled) {
      _logger.default.debug(`There is no handler scheduled for method '${method}' in ${msgId ? `message '${msgId}'` : 'recent messages'}`);
    }
  }

  setTimelineEventHandler(timelineEventHandler) {
    this.timelineEventHandler = timelineEventHandler;
  }

  setConsoleLogEventHandler(consoleEventHandler) {
    this.consoleEventHandler = consoleEventHandler;
  }

  setNetworkLogEventHandler(networkEventHandler) {
    this.networkEventHandler = networkEventHandler;
  }

}

exports.default = WebKitRpcClient;

class WebKitRPCWarning extends _es6Error.default {}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
