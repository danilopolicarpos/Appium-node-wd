"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WebKitRemoteDebugger = exports.default = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("./logger"));

var _appiumBaseDriver = require("appium-base-driver");

var _remoteDebugger = require("./remote-debugger");

var _webkitRpcClient = _interopRequireDefault(require("./webkit-rpc-client"));

var _lodash = _interopRequireDefault(require("lodash"));

var _url = _interopRequireDefault(require("url"));

var _requestPromise = _interopRequireDefault(require("request-promise"));

var _helpers = require("./helpers");

class WebKitRemoteDebugger extends _remoteDebugger.RemoteDebugger {
  constructor(opts = {}) {
    opts = Object.assign({
      host: 'localhost'
    }, opts);
    super(_lodash.default.defaults({
      debuggerType: _remoteDebugger.DEBUGGER_TYPES.webkit
    }, opts));
    this.webkitResponseTimeout = opts.webkitResponseTimeout || _remoteDebugger.RPC_RESPONSE_TIMEOUT_MS;
    this.platformVersion = opts.platformVersion;
    this.isSafari = opts.isSafari;
    this.dataMethods = {};
  }

  async connect(pageId) {
    this.rpcClient = new _webkitRpcClient.default({
      host: this.host,
      port: this.port,
      responseTimeout: this.webkitResponseTimeout,
      platformVersion: this.platformVersion,
      isSafari: this.isSafari
    });
    await this.rpcClient.connect(pageId);
  }

  disconnect() {
    if (this.rpcClient && this.rpcClient.isConnected()) {
      this.rpcClient.disconnect();
    }
  }

  isConnected() {
    return !!(this.rpcClient && this.rpcClient.isConnected());
  }

  async pageArrayFromJson(ignoreAboutBlankUrl = false) {
    _logger.default.debug(`Getting WebKitRemoteDebugger pageArray. Host: '${this.host}', port: '${this.port}'`);

    let pageElementJSON = await this.getJsonFromUrl(this.host, this.port, '/json');

    if (pageElementJSON[0] && pageElementJSON[0].deviceId) {
      _logger.default.debug(`Device JSON: ${(0, _helpers.simpleStringify)(pageElementJSON)}`);

      const devices = pageElementJSON.filter(device => device.deviceId !== 'SIMULATOR');

      if (devices.length > 1) {
        _logger.default.debug(`Connected to ${devices.length} devices. ` + `Choosing the first, with udid '${devices[0].deviceId}'.`);
      }

      this.port = devices[0].url.split(':')[1];

      _logger.default.debug(`Received notification that ios-webkit-debug-proxy is listening on port '${this.port}'`);

      pageElementJSON = await this.getJsonFromUrl(this.host, this.port, '/json');
    }

    _logger.default.debug(`Page element JSON: ${(0, _helpers.simpleStringify)(pageElementJSON)}`);

    const newPageArray = pageElementJSON.filter(pageObject => {
      return pageObject.url && (!ignoreAboutBlankUrl || pageObject.url !== 'about:blank');
    }).map(pageObject => {
      const urlArray = pageObject.webSocketDebuggerUrl.split('/').reverse();
      const id = urlArray[0];
      return {
        id,
        title: pageObject.title,
        url: pageObject.url,
        isKey: !!id
      };
    });
    return newPageArray;
  }

  async getJsonFromUrl(hostname, port, pathname) {
    const uri = _url.default.format({
      protocol: 'http',
      hostname,
      port,
      pathname,
      json: true
    });

    _logger.default.debug(`Sending request to: ${uri}`);

    return JSON.parse((await (0, _requestPromise.default)({
      uri,
      method: 'GET'
    })));
  }

  convertResult(res) {
    if (res && res.wasThrown) {
      let message = res.result.value || res.result;
      throw new _appiumBaseDriver.errors.JavaScriptError(message);
    }

    if (res && res.result && res.result.type === 'undefined') {
      res.result.value = {};
    }

    return super.convertResult(res && res.result ? res.result.value : res);
  }

}

exports.WebKitRemoteDebugger = exports.default = WebKitRemoteDebugger;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
