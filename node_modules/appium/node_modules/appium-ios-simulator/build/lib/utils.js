"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.killAllSimulators = killAllSimulators;
exports.endAllSimulatorDaemons = endAllSimulatorDaemons;
exports.safeRimRaf = safeRimRaf;
exports.simExists = simExists;
exports.getSimulatorInfo = getSimulatorInfo;
exports.installSSLCert = installSSLCert;
exports.uninstallSSLCert = uninstallSSLCert;
exports.hasSSLCert = hasSSLCert;
exports.execSQLiteQuery = execSQLiteQuery;
exports.toBiometricDomainComponent = toBiometricDomainComponent;
exports.getDeveloperRoot = getDeveloperRoot;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("./logger"));

var _lodash = _interopRequireDefault(require("lodash"));

var _teen_process = require("teen_process");

var _asyncbox = require("asyncbox");

var _appiumXcode = require("appium-xcode");

var _nodeSimctl = require("node-simctl");

var _appiumSupport = require("appium-support");

var _certificate = require("./certificate");

var _path = _interopRequireDefault(require("path"));

var _simulatorXcode = _interopRequireDefault(require("./simulator-xcode-6"));

var _fkill = _interopRequireDefault(require("fkill"));

const DEFAULT_SIM_SHUTDOWN_TIMEOUT = 30000;
const BIOMETRICS = {
  touchId: 'fingerTouch',
  faceId: 'pearl'
};

function toBiometricDomainComponent(name) {
  if (!BIOMETRICS[name]) {
    throw new Error(`'${name}' is not a valid biometric. Use one of: ${JSON.stringify(_lodash.default.keys(BIOMETRICS))}`);
  }

  return BIOMETRICS[name];
}

async function pkill(appName, forceKill = false) {
  let args = forceKill ? ['-9'] : [];
  args.push('-x', appName);

  try {
    await (0, _teen_process.exec)('pkill', args);
    return 0;
  } catch (err) {
    if (!_lodash.default.isUndefined(err.code)) {
      throw new Error(`Cannot forcefully terminate ${appName}. pkill error code: ${err.code}`);
    }

    _logger.default.error(`Received unexpected error while trying to kill ${appName}: ${err.message}`);

    throw err;
  }
}

async function killAllSimulators(timeout = DEFAULT_SIM_SHUTDOWN_TIMEOUT) {
  _logger.default.debug('Killing all iOS Simulators');

  const xcodeVersion = await (0, _appiumXcode.getVersion)(true);
  const appName = xcodeVersion.major >= 7 ? 'Simulator' : 'iOS Simulator';
  timeout = timeout * (xcodeVersion.major >= 8 ? 2 : 1);

  try {
    await (0, _teen_process.exec)('xcrun', ['simctl', 'shutdown', xcodeVersion.major > 8 ? 'all' : 'booted'], {
      timeout
    });
  } catch (ign) {}

  const pids = [];

  try {
    const {
      stdout
    } = await (0, _teen_process.exec)('pgrep', ['-f', `${appName}.app/Contents/MacOS/`]);

    if (stdout.trim()) {
      pids.push(...stdout.trim().split(/\s+/));
    }
  } catch (e) {
    if (e.code === 1) {
      _logger.default.debug(`${appName} is not running. Continuing...`);

      return;
    }

    if (_lodash.default.isEmpty(pids)) {
      _logger.default.warn(`pgrep error ${e.code} while detecting whether ${appName} is running. Trying to kill anyway.`);
    }
  }

  if (!_lodash.default.isEmpty(pids)) {
    _logger.default.debug(`Using fkill to kill processes: ${pids.join(', ')}`);

    try {
      await (0, _fkill.default)(pids, {
        force: true
      });
    } catch (ign) {}
  }

  _logger.default.debug(`Using pkill to kill application: ${appName}`);

  try {
    await pkill(appName, true);
  } catch (ign) {}

  let remainingDevices = [];

  async function allSimsAreDown() {
    remainingDevices = [];
    let devices = await (0, _nodeSimctl.getDevices)();
    devices = _lodash.default.flatten(_lodash.default.values(devices));
    return _lodash.default.every(devices, sim => {
      let state = sim.state.toLowerCase();
      let done = state === 'shutdown' || state === 'unavailable' || state === 'disconnected';

      if (!done) {
        remainingDevices.push(`${sim.name} (${sim.sdk}, udid: ${sim.udid}) is still in state '${state}'`);
      }

      return done;
    });
  }

  try {
    await (0, _asyncbox.waitForCondition)(allSimsAreDown, {
      waitMs: timeout,
      intervalMs: 200
    });
  } catch (err) {
    if (remainingDevices.length > 0) {
      _logger.default.warn(`The following devices are still not in the correct state after ${timeout} ms:`);

      for (let device of remainingDevices) {
        _logger.default.warn(`    ${device}`);
      }
    }

    throw err;
  }
}

async function endAllSimulatorDaemons() {
  _logger.default.debug('Ending all simulator daemons');

  for (let servicePattern of ['com.apple.iphonesimulator', 'com.apple.CoreSimulator']) {
    _logger.default.debug(`Killing any other ${servicePattern} daemons`);

    let launchCtlCommand = `launchctl list | grep ${servicePattern} | cut -f 3 | xargs -n 1 launchctl`;

    try {
      let stopCmd = `${launchCtlCommand} stop`;
      await (0, _teen_process.exec)('bash', ['-c', stopCmd]);
    } catch (err) {
      _logger.default.warn(`Could not stop ${servicePattern} daemons, carrying on anyway!`);
    }

    try {
      let removeCmd = `${launchCtlCommand} remove`;
      await (0, _teen_process.exec)('bash', ['-c', removeCmd]);
    } catch (err) {
      _logger.default.warn(`Could not remove ${servicePattern} daemons, carrying on anyway!`);
    }
  }

  try {
    await (0, _asyncbox.waitForCondition)(async () => {
      let {
        stdout
      } = await (0, _teen_process.exec)('bash', ['-c', `ps -e  | grep launchd_sim | grep -v bash | grep -v grep | awk {'print$1'}`]);
      return stdout.trim().length === 0;
    }, {
      waitMs: 5000,
      intervalMs: 500
    });
  } catch (err) {
    _logger.default.warn(`Could not end all simulator daemons, carrying on!`);
  }

  _logger.default.debug('Finishing ending all simulator daemons');
}

async function getSimulatorInfo(udid) {
  let devices = await (0, _nodeSimctl.getDevices)();
  devices = _lodash.default.toPairs(devices).map(pair => pair[1]).reduce((a, b) => a.concat(b), []);
  return _lodash.default.find(devices, sim => sim.udid === udid);
}

async function simExists(udid) {
  return !!(await getSimulatorInfo(udid));
}

async function safeRimRaf(delPath, tryNum = 0) {
  try {
    await _appiumSupport.fs.rimraf(delPath);
  } catch (err) {
    if (tryNum < 20) {
      if (err.message.indexOf('ENOTEMPTY') !== -1) {
        _logger.default.debug(`Path '${delPath}' was not empty during delete; retrying`);

        return await safeRimRaf(delPath, tryNum + 1);
      } else if (err.message.indexOf('ENOENT') !== -1) {
        _logger.default.debug(`Path '${delPath}' did not exist when we tried to delete, ignoring`);

        return await safeRimRaf(delPath, tryNum + 1);
      }
    }
  }
}

async function installSSLCert(pemText, udid) {
  try {
    await _appiumSupport.fs.which('openssl');
  } catch (e) {
    _logger.default.debug(`customSSLCert requires openssl to be available on path`);

    _logger.default.errorAndThrow(`Command 'openssl' not found`);
  }

  try {
    await _appiumSupport.fs.which('sqlite3');
  } catch (e) {
    _logger.default.debug(`customSSLCert requires sqlite3 to be available on path`);

    _logger.default.errorAndThrow(`Command 'sqlite3' not found`);
  }

  let tempFileName = _path.default.resolve((await _appiumSupport.tempDir.openDir()), 'temp-ssl-cert.pem');

  let pathToKeychain = new _simulatorXcode.default(udid).getDir();
  await _appiumSupport.fs.writeFile(tempFileName, pemText);

  try {
    await _appiumSupport.fs.stat(pathToKeychain);
  } catch (e) {
    _logger.default.debug(`Could not install SSL certificate. No simulator with udid '${udid}'`);

    _logger.default.errorAndThrow(e);
  }

  let certificate = new _certificate.Certificate(tempFileName);

  _logger.default.debug(`Installing certificate to ${pathToKeychain}`);

  await certificate.add(pathToKeychain);
  await _appiumSupport.fs.unlink(tempFileName);
  return certificate;
}

async function uninstallSSLCert(pemText, udid) {
  try {
    let tempFileName = _path.default.resolve(__dirname, 'temp-ssl-cert.pem');

    let pathToKeychain = _path.default.resolve(new _simulatorXcode.default(udid).getDir());

    await _appiumSupport.fs.writeFile(tempFileName, pemText);
    let certificate = new _certificate.Certificate(tempFileName);
    await certificate.remove(pathToKeychain);
    await _appiumSupport.fs.unlink(tempFileName);
    return certificate;
  } catch (e) {
    _logger.default.debug(`Could not uninstall SSL certificate. No simulator with udid '${udid}'`);

    _logger.default.errorAndThrow(e);
  }
}

async function hasSSLCert(pemText, udid) {
  const tempFileName = _path.default.resolve((await _appiumSupport.tempDir.openDir()), 'temp-ssl-cert.pem');

  const pathToKeychain = new _simulatorXcode.default(udid).getDir();
  await _appiumSupport.fs.writeFile(tempFileName, pemText);
  const certificate = new _certificate.Certificate(tempFileName);
  return certificate.has(pathToKeychain);
}

async function execSQLiteQuery(db, query, ...queryParams) {
  query = query.replace(/\n+/g, ' ');
  let queryTokens = query.split('?');
  let formattedQuery = [];
  queryParams.map(param => `${param}`).forEach((param, i) => {
    formattedQuery.push(queryTokens[i]);
    formattedQuery.push(param.replace(/'/g, "''"));
  });
  formattedQuery.push(queryTokens[queryTokens.length - 1]);

  _logger.default.debug(`Executing SQL query "${formattedQuery.join('')}" on '${db}'`);

  try {
    return (await (0, _teen_process.exec)('sqlite3', ['-line', db, formattedQuery.join('')])).stdout;
  } catch (err) {
    throw new Error(`Cannot execute SQLite query "${formattedQuery.join('')}" to '${db}'. ` + `Original error: ${err.stderr}`);
  }
}

async function getDeveloperRoot() {
  const {
    stdout
  } = await (0, _teen_process.exec)('xcode-select', ['-p']);
  return stdout.trim();
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
