"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _teen_process = require("teen_process");

var _logger = _interopRequireDefault(require("./logger"));

var _lodash = _interopRequireDefault(require("lodash"));

var _through = require("through");

var _path = _interopRequireDefault(require("path"));

var _appiumSupport = require("appium-support");

var _appiumXcode = _interopRequireDefault(require("appium-xcode"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _appiumIosSimulator = require("appium-ios-simulator");

var _utils = require("./utils");

var _streams = require("./streams");

require("colors");

const ERR_NEVER_CHECKED_IN = 'Instruments never checked in';
const ERR_CRASHED_ON_STARTUP = 'Instruments crashed on startup';
const ERR_AMBIGUOUS_DEVICE = 'Instruments Usage Error : Ambiguous device name/identifier';

class Instruments {
  static async quickInstruments(opts) {
    opts = _lodash.default.clone(opts);
    let xcodeTraceTemplatePath = await _appiumXcode.default.getAutomationTraceTemplatePath();

    _lodash.default.defaults(opts, {
      launchTimeout: 60000,
      template: xcodeTraceTemplatePath,
      withoutDelay: true,
      xcodeVersion: '8.1',
      webSocket: null,
      flakeyRetries: 2
    });

    return new Instruments(opts);
  }

  constructor(opts) {
    opts = _lodash.default.cloneDeep(opts);

    _lodash.default.defaults(opts, {
      termTimeout: 5000,
      tmpDir: '/tmp/appium-instruments',
      launchTimeout: 90000,
      flakeyRetries: 0,
      realDevice: false
    });

    const props = ['app', 'termTimeout', 'flakeyRetries', 'udid', 'bootstrap', 'template', 'withoutDelay', 'processArguments', 'realDevice', 'simulatorSdkAndDevice', 'tmpDir', 'traceDir', 'locale', 'language'];

    for (const f of props) {
      this[f] = opts[f];
    }

    this.traceDir = this.traceDir || this.tmpDir;
    this.launchTimeout = (0, _utils.parseLaunchTimeout)(opts.launchTimeout);
    this.proc = null;
    this.webSocket = opts.webSocket;
    this.instrumentsPath = opts.instrumentsPath;
    this.launchTries = 0;
    this.socketConnectDelays = [];
    this.gotFBSOpenApplicationError = false;
    this.onShutdown = new _bluebird.default((resolve, reject) => {
      this.onShutdownDeferred = {
        resolve,
        reject
      };
    });
    this.onShutdown.catch(() => {}).done();
  }

  async configure() {
    if (!this.xcodeVersion) {
      this.xcodeVersion = await _appiumXcode.default.getVersion(true);
    }

    if (this.xcodeVersion.versionFloat === 6.0 && this.withoutDelay) {
      _logger.default.info('In xcode 6.0, instruments-without-delay does not work. ' + 'If using Appium, you can disable instruments-without-delay ' + 'with the --native-instruments-lib server flag');
    }

    if (this.xcodeVersion.versionString === '5.0.1') {
      throw new Error('Xcode 5.0.1 ships with a broken version of ' + 'Instruments. please upgrade to 5.0.2');
    }

    if (this.xcodeVersion.major > 7) {
      throw new Error(`Instruments-based automation was removed in Xcode 8. ` + `Xcode ${this.xcodeVersion.versionString} is not supported. ` + `Please try the XCUItest driver.`);
    }

    if (!this.template) {
      this.template = await _appiumXcode.default.getAutomationTraceTemplatePath();
    }

    if (!this.instrumentsPath) {
      this.instrumentsPath = await (0, _utils.getInstrumentsPath)();
    }
  }

  async launchOnce() {
    _logger.default.info('Launching instruments');

    await _appiumSupport.fs.rimraf(this.tmpDir);
    await (0, _appiumSupport.mkdirp)(this.tmpDir);
    await (0, _appiumSupport.mkdirp)(this.traceDir);
    this.exitListener = null;
    this.proc = await this.spawnInstruments();
    this.proc.on('exit', (code, signal) => {
      const msg = code !== null ? `code: ${code}` : `signal: ${signal}`;

      _logger.default.debug(`Instruments exited with ${msg}`);
    });
    let launchResultPromise = new _bluebird.default((resolve, reject) => {
      this.launchResultDeferred = {
        resolve,
        reject
      };
    });
    this.setExitListener(() => {
      this.proc = null;
      this.launchResultDeferred.reject(new Error(ERR_CRASHED_ON_STARTUP));
    });
    this.proc.on('error', err => {
      _logger.default.debug(`Error with instruments proc: ${err.message}`);

      if (err.message.indexOf('ENOENT') !== -1) {
        this.proc = null;

        _logger.default.error(`Unable to spawn instruments: ${err.message}`);

        this.launchResultDeferred.reject(err);
      }
    });
    this.proc.stdout.setEncoding('utf8');
    this.proc.stdout.pipe((0, _streams.outputStream)()).pipe((0, _streams.dumpStream)());
    this.proc.stderr.setEncoding('utf8');

    let actOnStderr = output => {
      if (this.launchTimeout.afterSimLaunch && output && output.match(/CLTilesManagerClient: initialize/)) {
        this.addSocketConnectTimer(this.launchTimeout.afterSimLaunch, 'afterLaunch', async () => {
          await this.killInstruments();
          this.launchResultDeferred.reject(new Error(ERR_NEVER_CHECKED_IN));
        });
      }

      let fbsErrStr = '(FBSOpenApplicationErrorDomain error 8.)';

      if (output.indexOf(fbsErrStr) !== -1) {
        this.gotFBSOpenApplicationError = true;
      }

      if (output.indexOf(ERR_AMBIGUOUS_DEVICE) !== -1) {
        let msg = `${ERR_AMBIGUOUS_DEVICE}: '${this.simulatorSdkAndDevice}'`;
        this.launchResultDeferred.reject(new Error(msg));
      }
    };

    this.proc.stderr.pipe((0, _through.through)(function onStderr(output) {
      actOnStderr(output);
      this.queue(output);
    })).pipe((0, _streams.errorStream)()).pipe((0, _streams.webSocketAlertStream)(this.webSocket)).pipe((0, _streams.dumpStream)());
    this.addSocketConnectTimer(this.launchTimeout.global, 'global', async () => {
      await this.killInstruments();
      this.launchResultDeferred.reject(new Error(ERR_NEVER_CHECKED_IN));
    });

    try {
      await launchResultPromise;
    } finally {
      this.clearSocketConnectTimers();
    }

    this.setExitListener((code, signal) => {
      this.proc = null;
      const msg = code !== null ? `code: ${code}` : `signal: ${signal}`;
      this.onShutdownDeferred.reject(new Error(`Abnormal exit with ${msg}`));
    });
  }

  async launch() {
    await this.configure();
    let launchTries = 0;

    do {
      launchTries++;

      _logger.default.debug(`Attempting to launch instruments, this is try #${launchTries}`);

      try {
        await this.launchOnce();
        break;
      } catch (err) {
        _logger.default.error(`Error launching instruments: ${err.message}`);

        let errIsCatchable = err.message === ERR_NEVER_CHECKED_IN || err.message === ERR_CRASHED_ON_STARTUP;

        if (!errIsCatchable) {
          throw err;
        }

        if (launchTries <= this.flakeyRetries) {
          if (this.gotFBSOpenApplicationError) {
            _logger.default.debug('Got the FBSOpenApplicationError, not killing the ' + 'sim but leaving it open so the app will launch');

            this.gotFBSOpenApplicationError = false;
            await _bluebird.default.delay(1000);
          } else {
            if (!this.realDevice) {
              await (0, _appiumIosSimulator.killAllSimulators)();
            }

            await _bluebird.default.delay(5000);
          }
        } else {
          _logger.default.errorAndThrow('We exceeded the number of retries allowed for ' + 'instruments to successfully start; failing launch');
        }
      }
    } while (true);
  }

  registerLaunch() {
    this.launchResultDeferred.resolve();
  }

  async spawnInstruments() {
    let traceDir;

    for (let i = 0;; i++) {
      traceDir = _path.default.resolve(this.traceDir, `instrumentscli${i}.trace`);
      if (!(await _appiumSupport.fs.exists(traceDir))) break;
    }

    let args = ['-t', this.template, '-D', traceDir];

    if (this.udid) {
      args = args.concat(['-w', this.udid]);

      _logger.default.debug(`Attempting to run app on real device with UDID '${this.udid}'`);
    }

    if (!this.udid && this.simulatorSdkAndDevice) {
      args = args.concat(['-w', this.simulatorSdkAndDevice]);

      _logger.default.debug(`Attempting to run app on ${this.simulatorSdkAndDevice}`);
    }

    args = args.concat([this.app]);

    if (this.processArguments) {
      _logger.default.debug(`Attempting to run app with process arguments: ${JSON.stringify(this.processArguments)}`);

      if (_lodash.default.isString(this.processArguments)) {
        if (this.processArguments.indexOf('-e ') === -1) {
          _logger.default.debug('Plain string process arguments being pushed into arguments');

          args.push(this.processArguments);
        } else {
          _logger.default.debug('Environment variables being pushed into arguments');

          for (let arg of this.processArguments.split('-e ')) {
            arg = arg.trim();

            if (arg.length) {
              let space = arg.indexOf(' ');
              let flag = arg.substring(0, space);
              let value = arg.substring(space + 1);
              args.push('-e', flag, value);
            }
          }
        }
      } else {
        for (let [flag, value] of _lodash.default.toPairs(this.processArguments)) {
          args.push('-e', flag, value);
        }
      }
    }

    args = args.concat(['-e', 'UIASCRIPT', this.bootstrap]);
    args = args.concat(['-e', 'UIARESULTSPATH', this.tmpDir]);

    if (this.language) {
      args = args.concat([`-AppleLanguages (${this.language})`]);
      args = args.concat([`-NSLanguages (${this.language})`]);
    }

    if (this.locale) {
      args = args.concat([`-AppleLocale ${this.locale}`]);
    }

    let env = _lodash.default.clone(process.env);

    if (this.xcodeVersion.major >= 7 && !this.udid) {
      _logger.default.info('On xcode 7.0+, instruments-without-delay does not work, ' + 'skipping instruments-without-delay');

      this.withoutDelay = false;
    }

    let iwdPath = await (0, _utils.getIwdPath)(this.xcodeVersion.major);
    env.CA_DEBUG_TRANSACTIONS = 1;

    if (this.withoutDelay && !this.udid) {
      env.DYLD_INSERT_LIBRARIES = _path.default.resolve(iwdPath, 'InstrumentsShim.dylib');
      env.LIB_PATH = iwdPath;
    }

    let instrumentsExecArgs = [this.instrumentsPath, ...args];
    instrumentsExecArgs = _lodash.default.map(instrumentsExecArgs, function instrumentArgs(arg) {
      if (arg === null) {
        throw new Error('A null value was passed as an arg to execute ' + 'instruments on the command line. A letiable is ' + 'probably not getting set. Array of command args: ' + JSON.stringify(instrumentsExecArgs));
      }

      if (_lodash.default.isString(arg) && arg.indexOf(' ') !== -1) {
        return `"${arg}"`;
      }

      return arg;
    });

    _logger.default.debug(`Spawning instruments with command: '${instrumentsExecArgs.join(' ')}'`);

    if (this.withoutDelay) {
      _logger.default.debug('And extra without-delay env: ' + JSON.stringify({
        DYLD_INSERT_LIBRARIES: env.DYLD_INSERT_LIBRARIES,
        LIB_PATH: env.LIB_PATH
      }));
    }

    _logger.default.debug(`And launch timeouts (in ms): ${JSON.stringify(this.launchTimeout)}`);

    return await (0, _teen_process.spawn)(this.instrumentsPath, args, {
      env
    });
  }

  addSocketConnectTimer(delay, type, doAction) {
    let socketConnectDelay = (0, _appiumSupport.cancellableDelay)(delay);
    socketConnectDelay.then(() => {
      _logger.default.warn(`Instruments socket client never checked in; timing out (${type})`);

      return doAction();
    }).catch(_bluebird.default.CancellationError, () => {}).done();
    this.socketConnectDelays.push(socketConnectDelay);
  }

  clearSocketConnectTimers() {
    for (let delay of this.socketConnectDelays) {
      delay.cancel();
    }

    this.socketConnectDelays = [];
  }

  setExitListener(exitListener) {
    if (!this.proc) return;

    if (this.exitListener) {
      this.proc.removeListener('exit', this.exitListener);
    }

    this.exitListener = exitListener;
    this.proc.on('exit', exitListener);
  }

  killInstruments() {
    if (!this.proc) return;

    _logger.default.debug(`Kill Instruments process (pid: ${this.proc.pid})`);

    return new _bluebird.default(async resolve => {
      let wasTerminated = false;
      let termDelay = (0, _appiumSupport.cancellableDelay)(this.termTimeout);
      let termPromise = termDelay.catch(_bluebird.default.CancellationError, () => {});
      this.setExitListener(() => {
        this.proc = null;
        wasTerminated = true;
        termDelay.cancel();
        resolve();
      });

      _logger.default.debug('Sending SIGTERM');

      this.proc.kill('SIGTERM');
      await termPromise;

      if (!wasTerminated) {
        _logger.default.warn(`Instruments did not terminate after ${this.termTimeout / 1000} seconds!`);

        _logger.default.debug('Sending SIGKILL');

        this.proc.kill('SIGKILL');

        if (_lodash.default.isFunction(this.exitListener)) {
          this.exitListener();
        }
      }
    });
  }

  async shutdown() {
    _logger.default.debug('Starting shutdown.');

    await this.killInstruments();
    this.onShutdownDeferred.resolve();
  }

}

var _default = Instruments;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9pbnN0cnVtZW50cy9pbnN0cnVtZW50cy5qcyJdLCJuYW1lcyI6WyJFUlJfTkVWRVJfQ0hFQ0tFRF9JTiIsIkVSUl9DUkFTSEVEX09OX1NUQVJUVVAiLCJFUlJfQU1CSUdVT1VTX0RFVklDRSIsIkluc3RydW1lbnRzIiwicXVpY2tJbnN0cnVtZW50cyIsIm9wdHMiLCJfIiwiY2xvbmUiLCJ4Y29kZVRyYWNlVGVtcGxhdGVQYXRoIiwieGNvZGUiLCJnZXRBdXRvbWF0aW9uVHJhY2VUZW1wbGF0ZVBhdGgiLCJkZWZhdWx0cyIsImxhdW5jaFRpbWVvdXQiLCJ0ZW1wbGF0ZSIsIndpdGhvdXREZWxheSIsInhjb2RlVmVyc2lvbiIsIndlYlNvY2tldCIsImZsYWtleVJldHJpZXMiLCJjb25zdHJ1Y3RvciIsImNsb25lRGVlcCIsInRlcm1UaW1lb3V0IiwidG1wRGlyIiwicmVhbERldmljZSIsInByb3BzIiwiZiIsInRyYWNlRGlyIiwicHJvYyIsImluc3RydW1lbnRzUGF0aCIsImxhdW5jaFRyaWVzIiwic29ja2V0Q29ubmVjdERlbGF5cyIsImdvdEZCU09wZW5BcHBsaWNhdGlvbkVycm9yIiwib25TaHV0ZG93biIsIkIiLCJyZXNvbHZlIiwicmVqZWN0Iiwib25TaHV0ZG93bkRlZmVycmVkIiwiY2F0Y2giLCJkb25lIiwiY29uZmlndXJlIiwiZ2V0VmVyc2lvbiIsInZlcnNpb25GbG9hdCIsImxvZyIsImluZm8iLCJ2ZXJzaW9uU3RyaW5nIiwiRXJyb3IiLCJtYWpvciIsImxhdW5jaE9uY2UiLCJmcyIsInJpbXJhZiIsImV4aXRMaXN0ZW5lciIsInNwYXduSW5zdHJ1bWVudHMiLCJvbiIsImNvZGUiLCJzaWduYWwiLCJtc2ciLCJkZWJ1ZyIsImxhdW5jaFJlc3VsdFByb21pc2UiLCJsYXVuY2hSZXN1bHREZWZlcnJlZCIsInNldEV4aXRMaXN0ZW5lciIsImVyciIsIm1lc3NhZ2UiLCJpbmRleE9mIiwiZXJyb3IiLCJzdGRvdXQiLCJzZXRFbmNvZGluZyIsInBpcGUiLCJzdGRlcnIiLCJhY3RPblN0ZGVyciIsIm91dHB1dCIsImFmdGVyU2ltTGF1bmNoIiwibWF0Y2giLCJhZGRTb2NrZXRDb25uZWN0VGltZXIiLCJraWxsSW5zdHJ1bWVudHMiLCJmYnNFcnJTdHIiLCJzaW11bGF0b3JTZGtBbmREZXZpY2UiLCJvblN0ZGVyciIsInF1ZXVlIiwiZ2xvYmFsIiwiY2xlYXJTb2NrZXRDb25uZWN0VGltZXJzIiwibGF1bmNoIiwiZXJySXNDYXRjaGFibGUiLCJkZWxheSIsImVycm9yQW5kVGhyb3ciLCJyZWdpc3RlckxhdW5jaCIsImkiLCJwYXRoIiwiZXhpc3RzIiwiYXJncyIsInVkaWQiLCJjb25jYXQiLCJhcHAiLCJwcm9jZXNzQXJndW1lbnRzIiwiSlNPTiIsInN0cmluZ2lmeSIsImlzU3RyaW5nIiwicHVzaCIsImFyZyIsInNwbGl0IiwidHJpbSIsImxlbmd0aCIsInNwYWNlIiwiZmxhZyIsInN1YnN0cmluZyIsInZhbHVlIiwidG9QYWlycyIsImJvb3RzdHJhcCIsImxhbmd1YWdlIiwibG9jYWxlIiwiZW52IiwicHJvY2VzcyIsIml3ZFBhdGgiLCJDQV9ERUJVR19UUkFOU0FDVElPTlMiLCJEWUxEX0lOU0VSVF9MSUJSQVJJRVMiLCJMSUJfUEFUSCIsImluc3RydW1lbnRzRXhlY0FyZ3MiLCJtYXAiLCJpbnN0cnVtZW50QXJncyIsImpvaW4iLCJ0eXBlIiwiZG9BY3Rpb24iLCJzb2NrZXRDb25uZWN0RGVsYXkiLCJ0aGVuIiwid2FybiIsIkNhbmNlbGxhdGlvbkVycm9yIiwiY2FuY2VsIiwicmVtb3ZlTGlzdGVuZXIiLCJwaWQiLCJ3YXNUZXJtaW5hdGVkIiwidGVybURlbGF5IiwidGVybVByb21pc2UiLCJraWxsIiwiaXNGdW5jdGlvbiIsInNodXRkb3duIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUdBLE1BQU1BLG9C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LGFBQUs3QixJQUFMLENBQVV3RyxJQUFWLENBQWUsU0FBZjs7QUFDQSxZQUFJNUgsZ0JBQUU2SCxVQUFGLENBQWEsS0FBS2xGLFlBQWxCLENBQUosRUFBcUM7QUFDbkMsZUFBS0EsWUFBTDtBQUNEO0FBQ0Y7QUFDRixLQXRCTSxDQUFQO0FBdUJEOztBQUdELFFBQU1tRixRQUFOLEdBQWtCO0FBQ2hCM0Ysb0JBQUljLEtBQUosQ0FBVSxvQkFBVjs7QUFDQSxVQUFNLEtBQUtpQixlQUFMLEVBQU47QUFDQSxTQUFLckMsa0JBQUwsQ0FBd0JGLE9BQXhCO0FBQ0Q7O0FBN1hlOztlQWdZSDlCLFciLCJzb3VyY2VzQ29udGVudCI6WyIvLyBXcmFwcGVyIGFyb3VuZCBBcHBsZSdzIEluc3RydW1lbnRzIGFwcFxuXG5pbXBvcnQgeyBzcGF3biB9IGZyb20gJ3RlZW5fcHJvY2Vzcyc7XG5pbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyB0aHJvdWdoIH0gZnJvbSAndGhyb3VnaCc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IG1rZGlycCwgZnMsIGNhbmNlbGxhYmxlRGVsYXkgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgeGNvZGUgZnJvbSAnYXBwaXVtLXhjb2RlJztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCB7IGtpbGxBbGxTaW11bGF0b3JzIH0gZnJvbSAnYXBwaXVtLWlvcy1zaW11bGF0b3InO1xuaW1wb3J0IHsgZ2V0SW5zdHJ1bWVudHNQYXRoLCBwYXJzZUxhdW5jaFRpbWVvdXQsIGdldEl3ZFBhdGggfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IG91dHB1dFN0cmVhbSwgZXJyb3JTdHJlYW0sIHdlYlNvY2tldEFsZXJ0U3RyZWFtLCBkdW1wU3RyZWFtIH0gZnJvbSAnLi9zdHJlYW1zJztcbmltcG9ydCAnY29sb3JzJztcblxuXG5jb25zdCBFUlJfTkVWRVJfQ0hFQ0tFRF9JTiA9ICdJbnN0cnVtZW50cyBuZXZlciBjaGVja2VkIGluJztcbmNvbnN0IEVSUl9DUkFTSEVEX09OX1NUQVJUVVAgPSAnSW5zdHJ1bWVudHMgY3Jhc2hlZCBvbiBzdGFydHVwJztcbmNvbnN0IEVSUl9BTUJJR1VPVVNfREVWSUNFID0gJ0luc3RydW1lbnRzIFVzYWdlIEVycm9yIDogQW1iaWd1b3VzIGRldmljZSBuYW1lL2lkZW50aWZpZXInO1xuXG5jbGFzcyBJbnN0cnVtZW50cyB7XG4gIC8vIHNpbXBsZSBmYWN0b3J5IHdpdGggc2FuZSBkZWZhdWx0c1xuICBzdGF0aWMgYXN5bmMgcXVpY2tJbnN0cnVtZW50cyAob3B0cykge1xuICAgIG9wdHMgPSBfLmNsb25lKG9wdHMpO1xuICAgIGxldCB4Y29kZVRyYWNlVGVtcGxhdGVQYXRoID0gYXdhaXQgeGNvZGUuZ2V0QXV0b21hdGlvblRyYWNlVGVtcGxhdGVQYXRoKCk7XG4gICAgXy5kZWZhdWx0cyhvcHRzLCB7XG4gICAgICBsYXVuY2hUaW1lb3V0OiA2MDAwMCxcbiAgICAgIHRlbXBsYXRlOiB4Y29kZVRyYWNlVGVtcGxhdGVQYXRoLFxuICAgICAgd2l0aG91dERlbGF5OiB0cnVlLFxuICAgICAgeGNvZGVWZXJzaW9uOiAnOC4xJyxcbiAgICAgIHdlYlNvY2tldDogbnVsbCxcbiAgICAgIGZsYWtleVJldHJpZXM6IDJcbiAgICB9KTtcbiAgICByZXR1cm4gbmV3IEluc3RydW1lbnRzKG9wdHMpO1xuICB9XG5cbiAgLypcbiAgICogb3B0czpcbiAgICogICAtIGFwcFxuICAgKiAgIC0gdGVybVRpbWVvdXQgLSBkZWZhdWx0cyB0byA1MDAwXG4gICAqICAgLSBmbGFrZXlSZXRyaWVzIC0gZGVmYXVsdHMgdG8gMFxuICAgKiAgIC0gdWRpZFxuICAgKiAgIC0gYm9vdHN0cmFwXG4gICAqICAgLSB0ZW1wbGF0ZVxuICAgKiAgIC0gd2l0aG91dERlbGF5XG4gICAqICAgLSBwcm9jZXNzQXJndW1lbnRzXG4gICAqICAgLSBzaW11bGF0b3JTZGtBbmREZXZpY2VcbiAgICogICAtIHRtcERpciAtIGRlZmF1bHRzIHRvIGAvdG1wL2FwcGl1bS1pbnN0cnVtZW50c2BcbiAgICogICAtIHRyYWNlRGlyXG4gICAqICAgLSBsYXVuY2hUaW1lb3V0IC0gZGVmYXVsdHMgdG8gOTAwMDBcbiAgICogICAtIHdlYlNvY2tldFxuICAgKiAgIC0gaW5zdHJ1bWVudHNQYXRoXG4gICAqICAgLSByZWFsRGV2aWNlIC0gdHJ1ZS9mYWxzZSwgZGVmYXVsdHMgdG8gZmFsc2VcbiAgICovXG4gIGNvbnN0cnVjdG9yIChvcHRzKSB7XG4gICAgb3B0cyA9IF8uY2xvbmVEZWVwKG9wdHMpO1xuICAgIF8uZGVmYXVsdHMob3B0cywge1xuICAgICAgdGVybVRpbWVvdXQ6IDUwMDAsXG4gICAgICB0bXBEaXI6ICcvdG1wL2FwcGl1bS1pbnN0cnVtZW50cycsXG4gICAgICBsYXVuY2hUaW1lb3V0OiA5MDAwMCxcbiAgICAgIGZsYWtleVJldHJpZXM6IDAsXG4gICAgICByZWFsRGV2aWNlOiBmYWxzZVxuICAgIH0pO1xuXG4gICAgLy8gY29uZmlnXG4gICAgY29uc3QgcHJvcHMgPSBbXG4gICAgICAnYXBwJywgJ3Rlcm1UaW1lb3V0JywgJ2ZsYWtleVJldHJpZXMnLCAndWRpZCcsICdib290c3RyYXAnLFxuICAgICAgJ3RlbXBsYXRlJywgJ3dpdGhvdXREZWxheScsICdwcm9jZXNzQXJndW1lbnRzJywgJ3JlYWxEZXZpY2UnLFxuICAgICAgJ3NpbXVsYXRvclNka0FuZERldmljZScsICd0bXBEaXInLCAndHJhY2VEaXInLCAnbG9jYWxlJywgJ2xhbmd1YWdlJyxcbiAgICBdO1xuICAgIGZvciAoY29uc3QgZiBvZiBwcm9wcykge1xuICAgICAgdGhpc1tmXSA9IG9wdHNbZl07XG4gICAgfVxuICAgIHRoaXMudHJhY2VEaXIgPSB0aGlzLnRyYWNlRGlyIHx8IHRoaXMudG1wRGlyO1xuICAgIHRoaXMubGF1bmNoVGltZW91dCA9IHBhcnNlTGF1bmNoVGltZW91dChvcHRzLmxhdW5jaFRpbWVvdXQpO1xuXG4gICAgLy8gc3RhdGVcbiAgICB0aGlzLnByb2MgPSBudWxsO1xuICAgIHRoaXMud2ViU29ja2V0ID0gb3B0cy53ZWJTb2NrZXQ7XG4gICAgdGhpcy5pbnN0cnVtZW50c1BhdGggPSBvcHRzLmluc3RydW1lbnRzUGF0aDtcbiAgICB0aGlzLmxhdW5jaFRyaWVzID0gMDtcbiAgICB0aGlzLnNvY2tldENvbm5lY3REZWxheXMgPSBbXTtcbiAgICB0aGlzLmdvdEZCU09wZW5BcHBsaWNhdGlvbkVycm9yID0gZmFsc2U7XG4gICAgdGhpcy5vblNodXRkb3duID0gbmV3IEIoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5vblNodXRkb3duRGVmZXJyZWQgPSB7cmVzb2x2ZSwgcmVqZWN0fTtcbiAgICB9KTtcbiAgICAvLyBhdm9pZHMgVW5oYW5kbGVkRXhjZXB0aW9uXG4gICAgdGhpcy5vblNodXRkb3duLmNhdGNoKCgpID0+IHt9KS5kb25lKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcHJvbWlzZS9jYXRjaC1vci1yZXR1cm5cbiAgfVxuXG4gIGFzeW5jIGNvbmZpZ3VyZSAoKSB7XG4gICAgaWYgKCF0aGlzLnhjb2RlVmVyc2lvbikge1xuICAgICAgdGhpcy54Y29kZVZlcnNpb24gPSBhd2FpdCB4Y29kZS5nZXRWZXJzaW9uKHRydWUpO1xuICAgIH1cbiAgICBpZiAodGhpcy54Y29kZVZlcnNpb24udmVyc2lvbkZsb2F0ID09PSA2LjAgJiYgdGhpcy53aXRob3V0RGVsYXkpIHtcbiAgICAgIGxvZy5pbmZvKCdJbiB4Y29kZSA2LjAsIGluc3RydW1lbnRzLXdpdGhvdXQtZGVsYXkgZG9lcyBub3Qgd29yay4gJyArXG4gICAgICAgICAgICAgICAnSWYgdXNpbmcgQXBwaXVtLCB5b3UgY2FuIGRpc2FibGUgaW5zdHJ1bWVudHMtd2l0aG91dC1kZWxheSAnICtcbiAgICAgICAgICAgICAgICd3aXRoIHRoZSAtLW5hdGl2ZS1pbnN0cnVtZW50cy1saWIgc2VydmVyIGZsYWcnKTtcbiAgICB9XG4gICAgaWYgKHRoaXMueGNvZGVWZXJzaW9uLnZlcnNpb25TdHJpbmcgPT09ICc1LjAuMScpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWGNvZGUgNS4wLjEgc2hpcHMgd2l0aCBhIGJyb2tlbiB2ZXJzaW9uIG9mICcgK1xuICAgICAgICAgICAgICAgICAgICAgICdJbnN0cnVtZW50cy4gcGxlYXNlIHVwZ3JhZGUgdG8gNS4wLjInKTtcbiAgICB9XG4gICAgaWYgKHRoaXMueGNvZGVWZXJzaW9uLm1ham9yID4gNykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnN0cnVtZW50cy1iYXNlZCBhdXRvbWF0aW9uIHdhcyByZW1vdmVkIGluIFhjb2RlIDguIGAgK1xuICAgICAgICAgICAgICAgICAgICAgIGBYY29kZSAke3RoaXMueGNvZGVWZXJzaW9uLnZlcnNpb25TdHJpbmd9IGlzIG5vdCBzdXBwb3J0ZWQuIGAgK1xuICAgICAgICAgICAgICAgICAgICAgIGBQbGVhc2UgdHJ5IHRoZSBYQ1VJdGVzdCBkcml2ZXIuYCk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnRlbXBsYXRlKSB7XG4gICAgICB0aGlzLnRlbXBsYXRlID0gYXdhaXQgeGNvZGUuZ2V0QXV0b21hdGlvblRyYWNlVGVtcGxhdGVQYXRoKCk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmluc3RydW1lbnRzUGF0aCkge1xuICAgICAgdGhpcy5pbnN0cnVtZW50c1BhdGggPSBhd2FpdCBnZXRJbnN0cnVtZW50c1BhdGgoKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBsYXVuY2hPbmNlICgpIHtcbiAgICBsb2cuaW5mbygnTGF1bmNoaW5nIGluc3RydW1lbnRzJyk7XG4gICAgLy8gcHJlcGFyZSB0ZW1wIGRpclxuICAgIGF3YWl0IGZzLnJpbXJhZih0aGlzLnRtcERpcik7XG4gICAgYXdhaXQgbWtkaXJwKHRoaXMudG1wRGlyKTtcbiAgICBhd2FpdCBta2RpcnAodGhpcy50cmFjZURpcik7XG5cbiAgICB0aGlzLmV4aXRMaXN0ZW5lciA9IG51bGw7XG4gICAgdGhpcy5wcm9jID0gYXdhaXQgdGhpcy5zcGF3bkluc3RydW1lbnRzKCk7XG4gICAgdGhpcy5wcm9jLm9uKCdleGl0JywgKGNvZGUsIHNpZ25hbCkgPT4ge1xuICAgICAgY29uc3QgbXNnID0gY29kZSAhPT0gbnVsbCA/IGBjb2RlOiAke2NvZGV9YCA6IGBzaWduYWw6ICR7c2lnbmFsfWA7XG4gICAgICBsb2cuZGVidWcoYEluc3RydW1lbnRzIGV4aXRlZCB3aXRoICR7bXNnfWApO1xuICAgIH0pO1xuXG4gICAgLy8gc2V0IHVwIHRoZSBwcm9taXNlIHRvIGhhbmRsZSBsYXVuY2hcbiAgICBsZXQgbGF1bmNoUmVzdWx0UHJvbWlzZSA9IG5ldyBCKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMubGF1bmNoUmVzdWx0RGVmZXJyZWQgPSB7cmVzb2x2ZSwgcmVqZWN0fTtcbiAgICB9KTtcblxuICAgIC8vIFRoZXJlIHdhcyBhIHNwZWNpYWwgY2FzZSBmb3IgaWdub3JlU3RhcnR1cEV4aXRcbiAgICAvLyBidXQgaXQgaXMgbm90IG5lZWRlZCBhbnltb3JlLCB5b3UgbWF5IGp1c3QgbGlzdGVuIGZvciBleGl0LlxuICAgIHRoaXMuc2V0RXhpdExpc3RlbmVyKCgpID0+IHtcbiAgICAgIHRoaXMucHJvYyA9IG51bGw7XG4gICAgICB0aGlzLmxhdW5jaFJlc3VsdERlZmVycmVkLnJlamVjdChuZXcgRXJyb3IoRVJSX0NSQVNIRURfT05fU1RBUlRVUCkpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5wcm9jLm9uKCdlcnJvcicsIChlcnIpID0+IHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBwcm9taXNlL3ByZWZlci1hd2FpdC10by1jYWxsYmFja3NcbiAgICAgIGxvZy5kZWJ1ZyhgRXJyb3Igd2l0aCBpbnN0cnVtZW50cyBwcm9jOiAke2Vyci5tZXNzYWdlfWApO1xuICAgICAgaWYgKGVyci5tZXNzYWdlLmluZGV4T2YoJ0VOT0VOVCcpICE9PSAtMSkge1xuICAgICAgICB0aGlzLnByb2MgPSBudWxsOyAvLyBvdGhlcndpc2Ugd2UnbGwgdHJ5IHRvIHNlbmQgc2lna2lsbFxuICAgICAgICBsb2cuZXJyb3IoYFVuYWJsZSB0byBzcGF3biBpbnN0cnVtZW50czogJHtlcnIubWVzc2FnZX1gKTtcbiAgICAgICAgdGhpcy5sYXVuY2hSZXN1bHREZWZlcnJlZC5yZWplY3QoZXJyKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMucHJvYy5zdGRvdXQuc2V0RW5jb2RpbmcoJ3V0ZjgnKTtcbiAgICB0aGlzLnByb2Muc3Rkb3V0LnBpcGUob3V0cHV0U3RyZWFtKCkpLnBpcGUoZHVtcFN0cmVhbSgpKTtcblxuICAgIHRoaXMucHJvYy5zdGRlcnIuc2V0RW5jb2RpbmcoJ3V0ZjgnKTtcbiAgICBsZXQgYWN0T25TdGRlcnIgPSAob3V0cHV0KSA9PiB7XG4gICAgICBpZiAodGhpcy5sYXVuY2hUaW1lb3V0LmFmdGVyU2ltTGF1bmNoICYmIG91dHB1dCAmJiBvdXRwdXQubWF0Y2goL0NMVGlsZXNNYW5hZ2VyQ2xpZW50OiBpbml0aWFsaXplLykpIHtcbiAgICAgICAgdGhpcy5hZGRTb2NrZXRDb25uZWN0VGltZXIodGhpcy5sYXVuY2hUaW1lb3V0LmFmdGVyU2ltTGF1bmNoLCAnYWZ0ZXJMYXVuY2gnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgYXdhaXQgdGhpcy5raWxsSW5zdHJ1bWVudHMoKTtcbiAgICAgICAgICB0aGlzLmxhdW5jaFJlc3VsdERlZmVycmVkLnJlamVjdChuZXcgRXJyb3IoRVJSX05FVkVSX0NIRUNLRURfSU4pKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGxldCBmYnNFcnJTdHIgPSAnKEZCU09wZW5BcHBsaWNhdGlvbkVycm9yRG9tYWluIGVycm9yIDguKSc7XG4gICAgICBpZiAob3V0cHV0LmluZGV4T2YoZmJzRXJyU3RyKSAhPT0gLTEpIHtcbiAgICAgICAgdGhpcy5nb3RGQlNPcGVuQXBwbGljYXRpb25FcnJvciA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChvdXRwdXQuaW5kZXhPZihFUlJfQU1CSUdVT1VTX0RFVklDRSkgIT09IC0xKSB7XG4gICAgICAgIGxldCBtc2cgPSBgJHtFUlJfQU1CSUdVT1VTX0RFVklDRX06ICcke3RoaXMuc2ltdWxhdG9yU2RrQW5kRGV2aWNlfSdgO1xuICAgICAgICB0aGlzLmxhdW5jaFJlc3VsdERlZmVycmVkLnJlamVjdChuZXcgRXJyb3IobXNnKSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLnByb2Muc3RkZXJyLnBpcGUodGhyb3VnaChmdW5jdGlvbiBvblN0ZGVyciAob3V0cHV0KSB7XG4gICAgICBhY3RPblN0ZGVycihvdXRwdXQpO1xuICAgICAgdGhpcy5xdWV1ZShvdXRwdXQpO1xuICAgIH0pKS5waXBlKGVycm9yU3RyZWFtKCkpXG4gICAgLnBpcGUod2ViU29ja2V0QWxlcnRTdHJlYW0odGhpcy53ZWJTb2NrZXQpKVxuICAgIC5waXBlKGR1bXBTdHJlYW0oKSk7XG5cbiAgICAvLyBzdGFydCB3YWl0aW5nIGZvciBpbnN0cnVtZW50cyB0byBsYXVuY2ggc3VjY2Vzc2Z1bGx5XG4gICAgdGhpcy5hZGRTb2NrZXRDb25uZWN0VGltZXIodGhpcy5sYXVuY2hUaW1lb3V0Lmdsb2JhbCwgJ2dsb2JhbCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IHRoaXMua2lsbEluc3RydW1lbnRzKCk7XG4gICAgICB0aGlzLmxhdW5jaFJlc3VsdERlZmVycmVkLnJlamVjdChuZXcgRXJyb3IoRVJSX05FVkVSX0NIRUNLRURfSU4pKTtcbiAgICB9KTtcblxuICAgIHRyeSB7XG4gICAgICBhd2FpdCBsYXVuY2hSZXN1bHRQcm9taXNlO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0aGlzLmNsZWFyU29ja2V0Q29ubmVjdFRpbWVycygpO1xuICAgIH1cbiAgICB0aGlzLnNldEV4aXRMaXN0ZW5lcigoY29kZSwgc2lnbmFsKSA9PiB7XG4gICAgICB0aGlzLnByb2MgPSBudWxsO1xuICAgICAgY29uc3QgbXNnID0gY29kZSAhPT0gbnVsbCA/IGBjb2RlOiAke2NvZGV9YCA6IGBzaWduYWw6ICR7c2lnbmFsfWA7XG4gICAgICB0aGlzLm9uU2h1dGRvd25EZWZlcnJlZC5yZWplY3QobmV3IEVycm9yKGBBYm5vcm1hbCBleGl0IHdpdGggJHttc2d9YCkpO1xuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgbGF1bmNoICgpIHtcbiAgICBhd2FpdCB0aGlzLmNvbmZpZ3VyZSgpO1xuICAgIGxldCBsYXVuY2hUcmllcyA9IDA7XG4gICAgZG8ge1xuICAgICAgbGF1bmNoVHJpZXMrKztcbiAgICAgIGxvZy5kZWJ1ZyhgQXR0ZW1wdGluZyB0byBsYXVuY2ggaW5zdHJ1bWVudHMsIHRoaXMgaXMgdHJ5ICMke2xhdW5jaFRyaWVzfWApO1xuXG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCB0aGlzLmxhdW5jaE9uY2UoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgbG9nLmVycm9yKGBFcnJvciBsYXVuY2hpbmcgaW5zdHJ1bWVudHM6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgICAgIGxldCBlcnJJc0NhdGNoYWJsZSA9IGVyci5tZXNzYWdlID09PSBFUlJfTkVWRVJfQ0hFQ0tFRF9JTiB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnIubWVzc2FnZSA9PT0gRVJSX0NSQVNIRURfT05fU1RBUlRVUDtcbiAgICAgICAgaWYgKCFlcnJJc0NhdGNoYWJsZSkge1xuICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGF1bmNoVHJpZXMgPD0gdGhpcy5mbGFrZXlSZXRyaWVzKSB7XG4gICAgICAgICAgaWYgKHRoaXMuZ290RkJTT3BlbkFwcGxpY2F0aW9uRXJyb3IpIHtcbiAgICAgICAgICAgIGxvZy5kZWJ1ZygnR290IHRoZSBGQlNPcGVuQXBwbGljYXRpb25FcnJvciwgbm90IGtpbGxpbmcgdGhlICcgK1xuICAgICAgICAgICAgICAgICAgICAgICdzaW0gYnV0IGxlYXZpbmcgaXQgb3BlbiBzbyB0aGUgYXBwIHdpbGwgbGF1bmNoJyk7XG4gICAgICAgICAgICB0aGlzLmdvdEZCU09wZW5BcHBsaWNhdGlvbkVycm9yID0gZmFsc2U7IC8vIGNsZWFyIG91dCBmb3IgbmV4dCBsYXVuY2hcbiAgICAgICAgICAgIGF3YWl0IEIuZGVsYXkoMTAwMCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5yZWFsRGV2aWNlKSB7XG4gICAgICAgICAgICAgIGF3YWl0IGtpbGxBbGxTaW11bGF0b3JzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhd2FpdCBCLmRlbGF5KDUwMDApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsb2cuZXJyb3JBbmRUaHJvdygnV2UgZXhjZWVkZWQgdGhlIG51bWJlciBvZiByZXRyaWVzIGFsbG93ZWQgZm9yICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpbnN0cnVtZW50cyB0byBzdWNjZXNzZnVsbHkgc3RhcnQ7IGZhaWxpbmcgbGF1bmNoJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IHdoaWxlICh0cnVlKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cbiAgfVxuXG4gIHJlZ2lzdGVyTGF1bmNoICgpIHtcbiAgICB0aGlzLmxhdW5jaFJlc3VsdERlZmVycmVkLnJlc29sdmUoKTtcbiAgfVxuXG4gIGFzeW5jIHNwYXduSW5zdHJ1bWVudHMgKCkge1xuICAgIGxldCB0cmFjZURpcjtcbiAgICBmb3IgKGxldCBpID0gMDsgOyBpKyspIHtcbiAgICAgIC8vIGxvb3Agd2hpbGUgdGhlcmUgYXJlIHRyYWNlZGlycyB0byBkZWxldGVcbiAgICAgIHRyYWNlRGlyID0gcGF0aC5yZXNvbHZlKHRoaXMudHJhY2VEaXIsIGBpbnN0cnVtZW50c2NsaSR7aX0udHJhY2VgKTtcbiAgICAgIGlmICghYXdhaXQgZnMuZXhpc3RzKHRyYWNlRGlyKSkgYnJlYWs7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY3VybHlcbiAgICB9XG5cbiAgICAvLyBidWlsZCB1cCB0aGUgYXJndW1lbnRzIHRvIHVzZVxuICAgIGxldCBhcmdzID0gWyctdCcsIHRoaXMudGVtcGxhdGUsICctRCcsIHRyYWNlRGlyXTtcbiAgICBpZiAodGhpcy51ZGlkKSB7XG4gICAgICAvLyByZWFsIGRldmljZSwgc28gc3BlY2lmeSB1ZGlkXG4gICAgICBhcmdzID0gYXJncy5jb25jYXQoWyctdycsIHRoaXMudWRpZF0pO1xuICAgICAgbG9nLmRlYnVnKGBBdHRlbXB0aW5nIHRvIHJ1biBhcHAgb24gcmVhbCBkZXZpY2Ugd2l0aCBVRElEICcke3RoaXMudWRpZH0nYCk7XG4gICAgfVxuICAgIGlmICghdGhpcy51ZGlkICYmIHRoaXMuc2ltdWxhdG9yU2RrQW5kRGV2aWNlKSB7XG4gICAgICAvLyBzaW0sIHNvIHNwZWNpZnkgdGhlIHNkayBhbmQgZGV2aWNlXG4gICAgICBhcmdzID0gYXJncy5jb25jYXQoWyctdycsIHRoaXMuc2ltdWxhdG9yU2RrQW5kRGV2aWNlXSk7XG4gICAgICBsb2cuZGVidWcoYEF0dGVtcHRpbmcgdG8gcnVuIGFwcCBvbiAke3RoaXMuc2ltdWxhdG9yU2RrQW5kRGV2aWNlfWApO1xuICAgIH1cbiAgICBhcmdzID0gYXJncy5jb25jYXQoW3RoaXMuYXBwXSk7XG4gICAgaWYgKHRoaXMucHJvY2Vzc0FyZ3VtZW50cykge1xuICAgICAgbG9nLmRlYnVnKGBBdHRlbXB0aW5nIHRvIHJ1biBhcHAgd2l0aCBwcm9jZXNzIGFyZ3VtZW50czogJHtKU09OLnN0cmluZ2lmeSh0aGlzLnByb2Nlc3NBcmd1bWVudHMpfWApO1xuICAgICAgLy8gYW55IGFkZGl0aW9uYWwgc3R1ZmYgc3BlY2lmaWVkIGJ5IHRoZSB1c2VyXG5cbiAgICAgIGlmIChfLmlzU3RyaW5nKHRoaXMucHJvY2Vzc0FyZ3VtZW50cykpIHtcbiAgICAgICAgaWYgKHRoaXMucHJvY2Vzc0FyZ3VtZW50cy5pbmRleE9mKCctZSAnKSA9PT0gLTEpIHtcbiAgICAgICAgICBsb2cuZGVidWcoJ1BsYWluIHN0cmluZyBwcm9jZXNzIGFyZ3VtZW50cyBiZWluZyBwdXNoZWQgaW50byBhcmd1bWVudHMnKTtcbiAgICAgICAgICBhcmdzLnB1c2godGhpcy5wcm9jZXNzQXJndW1lbnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsb2cuZGVidWcoJ0Vudmlyb25tZW50IHZhcmlhYmxlcyBiZWluZyBwdXNoZWQgaW50byBhcmd1bWVudHMnKTtcbiAgICAgICAgICBmb3IgKGxldCBhcmcgb2YgdGhpcy5wcm9jZXNzQXJndW1lbnRzLnNwbGl0KCctZSAnKSkge1xuICAgICAgICAgICAgYXJnID0gYXJnLnRyaW0oKTtcbiAgICAgICAgICAgIGlmIChhcmcubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGxldCBzcGFjZSA9IGFyZy5pbmRleE9mKCcgJyk7XG4gICAgICAgICAgICAgIGxldCBmbGFnID0gYXJnLnN1YnN0cmluZygwLCBzcGFjZSk7XG4gICAgICAgICAgICAgIGxldCB2YWx1ZSA9IGFyZy5zdWJzdHJpbmcoc3BhY2UgKyAxKTtcbiAgICAgICAgICAgICAgYXJncy5wdXNoKCctZScsIGZsYWcsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHByb2Nlc3MgYXJndW1lbnRzIGNhbiBhbHNvIGJlIGEgaGFzaCBvZiBmbGFncyBhbmQgdmFsdWVzXG4gICAgICAgIC8vIHtcInByb2Nlc3NBcmd1bWVudHNcIjoge1wiZmxhZzFcIjogXCJ2YWx1ZTFcIiwgXCJmbGFnMlwiOiBcInZhbHVlMlwifX1cbiAgICAgICAgZm9yIChsZXQgW2ZsYWcsIHZhbHVlXSBvZiBfLnRvUGFpcnModGhpcy5wcm9jZXNzQXJndW1lbnRzKSkge1xuICAgICAgICAgIGFyZ3MucHVzaCgnLWUnLCBmbGFnLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgYXJncyA9IGFyZ3MuY29uY2F0KFsnLWUnLCAnVUlBU0NSSVBUJywgdGhpcy5ib290c3RyYXBdKTtcbiAgICBhcmdzID0gYXJncy5jb25jYXQoWyctZScsICdVSUFSRVNVTFRTUEFUSCcsIHRoaXMudG1wRGlyXSk7XG4gICAgaWYgKHRoaXMubGFuZ3VhZ2UpIHtcbiAgICAgIGFyZ3MgPSBhcmdzLmNvbmNhdChbYC1BcHBsZUxhbmd1YWdlcyAoJHt0aGlzLmxhbmd1YWdlfSlgXSk7XG4gICAgICBhcmdzID0gYXJncy5jb25jYXQoW2AtTlNMYW5ndWFnZXMgKCR7dGhpcy5sYW5ndWFnZX0pYF0pO1xuICAgIH1cbiAgICBpZiAodGhpcy5sb2NhbGUpIHtcbiAgICAgIGFyZ3MgPSBhcmdzLmNvbmNhdChbYC1BcHBsZUxvY2FsZSAke3RoaXMubG9jYWxlfWBdKTtcbiAgICB9XG5cbiAgICBsZXQgZW52ID0gXy5jbG9uZShwcm9jZXNzLmVudik7XG4gICAgaWYgKHRoaXMueGNvZGVWZXJzaW9uLm1ham9yID49IDcgJiYgIXRoaXMudWRpZCkge1xuICAgICAgLy8gaXdkIGN1cnJlbnRseSBkb2VzIG5vdCB3b3JrIHdpdGggeGNvZGU3LCBzZXR0aW5nIHdpdGhvdXREZWxheSB0byBmYWxzZVxuICAgICAgbG9nLmluZm8oJ09uIHhjb2RlIDcuMCssIGluc3RydW1lbnRzLXdpdGhvdXQtZGVsYXkgZG9lcyBub3Qgd29yaywgJyArXG4gICAgICAgICAgICAgICAnc2tpcHBpbmcgaW5zdHJ1bWVudHMtd2l0aG91dC1kZWxheScpO1xuICAgICAgdGhpcy53aXRob3V0RGVsYXkgPSBmYWxzZTtcbiAgICB9XG4gICAgbGV0IGl3ZFBhdGggPSBhd2FpdCBnZXRJd2RQYXRoKHRoaXMueGNvZGVWZXJzaW9uLm1ham9yKTtcbiAgICBlbnYuQ0FfREVCVUdfVFJBTlNBQ1RJT05TID0gMTtcbiAgICBpZiAodGhpcy53aXRob3V0RGVsYXkgJiYgIXRoaXMudWRpZCkge1xuICAgICAgLy8gc2ltLCBhbmQgdXNpbmcgaS13LWRcbiAgICAgIGVudi5EWUxEX0lOU0VSVF9MSUJSQVJJRVMgPSBwYXRoLnJlc29sdmUoaXdkUGF0aCwgJ0luc3RydW1lbnRzU2hpbS5keWxpYicpO1xuICAgICAgZW52LkxJQl9QQVRIID0gaXdkUGF0aDtcbiAgICB9XG4gICAgbGV0IGluc3RydW1lbnRzRXhlY0FyZ3MgPSBbdGhpcy5pbnN0cnVtZW50c1BhdGgsIC4uLmFyZ3NdO1xuICAgIGluc3RydW1lbnRzRXhlY0FyZ3MgPSBfLm1hcChpbnN0cnVtZW50c0V4ZWNBcmdzLCBmdW5jdGlvbiBpbnN0cnVtZW50QXJncyAoYXJnKSB7XG4gICAgICBpZiAoYXJnID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQSBudWxsIHZhbHVlIHdhcyBwYXNzZWQgYXMgYW4gYXJnIHRvIGV4ZWN1dGUgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnaW5zdHJ1bWVudHMgb24gdGhlIGNvbW1hbmQgbGluZS4gQSBsZXRpYWJsZSBpcyAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdwcm9iYWJseSBub3QgZ2V0dGluZyBzZXQuIEFycmF5IG9mIGNvbW1hbmQgYXJnczogJyArXG4gICAgICAgICAgICAgICAgICAgICAgICBKU09OLnN0cmluZ2lmeShpbnN0cnVtZW50c0V4ZWNBcmdzKSk7XG4gICAgICB9XG4gICAgICAvLyBlc2NhcGUgYW55IGFyZ3VtZW50IHRoYXQgaGFzIGEgc3BhY2UgaW4gaXRcbiAgICAgIGlmIChfLmlzU3RyaW5nKGFyZykgJiYgYXJnLmluZGV4T2YoJyAnKSAhPT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIGBcIiR7YXJnfVwiYDtcbiAgICAgIH1cbiAgICAgIC8vIG90aGVyd2lzZSBqdXN0IHVzZSB0aGUgYXJndW1lbnRcbiAgICAgIHJldHVybiBhcmc7XG4gICAgfSk7XG4gICAgbG9nLmRlYnVnKGBTcGF3bmluZyBpbnN0cnVtZW50cyB3aXRoIGNvbW1hbmQ6ICcke2luc3RydW1lbnRzRXhlY0FyZ3Muam9pbignICcpfSdgKTtcbiAgICBpZiAodGhpcy53aXRob3V0RGVsYXkpIHtcbiAgICAgIGxvZy5kZWJ1ZygnQW5kIGV4dHJhIHdpdGhvdXQtZGVsYXkgZW52OiAnICsgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBEWUxEX0lOU0VSVF9MSUJSQVJJRVM6IGVudi5EWUxEX0lOU0VSVF9MSUJSQVJJRVMsXG4gICAgICAgIExJQl9QQVRIOiBlbnYuTElCX1BBVEhcbiAgICAgIH0pKTtcbiAgICB9XG4gICAgbG9nLmRlYnVnKGBBbmQgbGF1bmNoIHRpbWVvdXRzIChpbiBtcyk6ICR7SlNPTi5zdHJpbmdpZnkodGhpcy5sYXVuY2hUaW1lb3V0KX1gKTtcbiAgICByZXR1cm4gYXdhaXQgc3Bhd24odGhpcy5pbnN0cnVtZW50c1BhdGgsIGFyZ3MsIHtlbnZ9KTtcbiAgfVxuXG4gIGFkZFNvY2tldENvbm5lY3RUaW1lciAoZGVsYXksIHR5cGUsIGRvQWN0aW9uKSB7XG4gICAgbGV0IHNvY2tldENvbm5lY3REZWxheSA9IGNhbmNlbGxhYmxlRGVsYXkoZGVsYXkpO1xuICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgc29ja2V0Q29ubmVjdERlbGF5LnRoZW4oKCkgPT4ge1xuICAgICAgbG9nLndhcm4oYEluc3RydW1lbnRzIHNvY2tldCBjbGllbnQgbmV2ZXIgY2hlY2tlZCBpbjsgdGltaW5nIG91dCAoJHt0eXBlfSlgKTtcbiAgICAgIHJldHVybiBkb0FjdGlvbigpO1xuICAgIH0pLmNhdGNoKEIuQ2FuY2VsbGF0aW9uRXJyb3IsICgpID0+IHt9KS5kb25lKCk7XG4gICAgLyogZXNsaW50LWVuYWJsZSAqL1xuICAgIHRoaXMuc29ja2V0Q29ubmVjdERlbGF5cy5wdXNoKHNvY2tldENvbm5lY3REZWxheSk7XG4gIH1cblxuICBjbGVhclNvY2tldENvbm5lY3RUaW1lcnMgKCkge1xuICAgIGZvciAobGV0IGRlbGF5IG9mIHRoaXMuc29ja2V0Q29ubmVjdERlbGF5cykge1xuICAgICAgZGVsYXkuY2FuY2VsKCk7XG4gICAgfVxuICAgIHRoaXMuc29ja2V0Q29ubmVjdERlbGF5cyA9IFtdO1xuICB9XG5cbiAgc2V0RXhpdExpc3RlbmVyIChleGl0TGlzdGVuZXIpIHtcbiAgICBpZiAoIXRoaXMucHJvYykgcmV0dXJuOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGN1cmx5XG4gICAgaWYgKHRoaXMuZXhpdExpc3RlbmVyKSB7XG4gICAgICB0aGlzLnByb2MucmVtb3ZlTGlzdGVuZXIoJ2V4aXQnLCB0aGlzLmV4aXRMaXN0ZW5lcik7XG4gICAgfVxuICAgIHRoaXMuZXhpdExpc3RlbmVyID0gZXhpdExpc3RlbmVyO1xuICAgIHRoaXMucHJvYy5vbignZXhpdCcsIGV4aXRMaXN0ZW5lcik7XG4gIH1cblxuICBraWxsSW5zdHJ1bWVudHMgKCkge1xuICAgIGlmICghdGhpcy5wcm9jKSByZXR1cm47IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY3VybHlcblxuICAgIGxvZy5kZWJ1ZyhgS2lsbCBJbnN0cnVtZW50cyBwcm9jZXNzIChwaWQ6ICR7dGhpcy5wcm9jLnBpZH0pYCk7XG4gICAgcmV0dXJuIG5ldyBCKGFzeW5jIChyZXNvbHZlKSA9PiB7XG4gICAgICBsZXQgd2FzVGVybWluYXRlZCA9IGZhbHNlO1xuICAgICAgLy8gbW9uaXRvcmluZyBwcm9jZXNzIHRlcm1pbmF0aW9uXG4gICAgICBsZXQgdGVybURlbGF5ID0gY2FuY2VsbGFibGVEZWxheSh0aGlzLnRlcm1UaW1lb3V0KTtcbiAgICAgIGxldCB0ZXJtUHJvbWlzZSA9IHRlcm1EZWxheS5jYXRjaChCLkNhbmNlbGxhdGlvbkVycm9yLCAoKSA9PiB7fSk7XG4gICAgICB0aGlzLnNldEV4aXRMaXN0ZW5lcigoKSA9PiB7XG4gICAgICAgIHRoaXMucHJvYyA9IG51bGw7XG4gICAgICAgIHdhc1Rlcm1pbmF0ZWQgPSB0cnVlO1xuICAgICAgICB0ZXJtRGVsYXkuY2FuY2VsKCk7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH0pO1xuICAgICAgbG9nLmRlYnVnKCdTZW5kaW5nIFNJR1RFUk0nKTtcbiAgICAgIHRoaXMucHJvYy5raWxsKCdTSUdURVJNJyk7XG4gICAgICBhd2FpdCB0ZXJtUHJvbWlzZTtcbiAgICAgIGlmICghd2FzVGVybWluYXRlZCkge1xuICAgICAgICBsb2cud2FybihgSW5zdHJ1bWVudHMgZGlkIG5vdCB0ZXJtaW5hdGUgYWZ0ZXIgJHt0aGlzLnRlcm1UaW1lb3V0IC8gMTAwMH0gc2Vjb25kcyFgKTtcbiAgICAgICAgbG9nLmRlYnVnKCdTZW5kaW5nIFNJR0tJTEwnKTtcbiAgICAgICAgdGhpcy5wcm9jLmtpbGwoJ1NJR0tJTEwnKTtcbiAgICAgICAgaWYgKF8uaXNGdW5jdGlvbih0aGlzLmV4aXRMaXN0ZW5lcikpIHtcbiAgICAgICAgICB0aGlzLmV4aXRMaXN0ZW5lcigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKiBQUk9DRVNTIE1BTkFHRU1FTlQgKi9cbiAgYXN5bmMgc2h1dGRvd24gKCkge1xuICAgIGxvZy5kZWJ1ZygnU3RhcnRpbmcgc2h1dGRvd24uJyk7XG4gICAgYXdhaXQgdGhpcy5raWxsSW5zdHJ1bWVudHMoKTtcbiAgICB0aGlzLm9uU2h1dGRvd25EZWZlcnJlZC5yZXNvbHZlKCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSW5zdHJ1bWVudHM7XG4iXSwiZmlsZSI6ImxpYi9pbnN0cnVtZW50cy9pbnN0cnVtZW50cy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
