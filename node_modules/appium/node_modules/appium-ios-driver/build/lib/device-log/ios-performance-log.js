"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.IOSPerformanceLog = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("./logger"));

var _lodash = _interopRequireDefault(require("lodash"));

const MAX_EVENTS = 5000;

class IOSPerformanceLog {
  constructor(remoteDebugger, maxEvents = MAX_EVENTS) {
    this.remoteDebugger = remoteDebugger;
    this.maxEvents = parseInt(maxEvents, 10);
    this.timelineEvents = [];
  }

  async startCapture() {
    _logger.default.debug('Starting performance (Timeline) log capture');

    this.timelineEvents = [];
    return await this.remoteDebugger.startTimeline(this.onTimelineEvent.bind(this));
  }

  async stopCapture() {
    _logger.default.debug('Stopping performance (Timeline) log capture');

    return await this.remoteDebugger.stopTimeline();
  }

  onTimelineEvent(event) {
    _logger.default.debug(`Received Timeline event: ${_lodash.default.truncate(JSON.stringify(event))}`);

    this.timelineEvents.push(event);

    if (this.timelineEvents.length > this.maxEvents) {
      let removedEvent = this.timelineEvents.shift();

      _logger.default.warn(`Too many Timeline events, removing earliest: ${_lodash.default.truncate(JSON.stringify(removedEvent))}`);
    }
  }

  async getLogs() {
    let events = this.timelineEvents;

    _logger.default.debug('Flushing Timeline events');

    this.timelineEvents = [];
    return events;
  }

  async getAllLogs() {
    return this.getLogs();
  }

}

exports.IOSPerformanceLog = IOSPerformanceLog;
var _default = IOSPerformanceLog;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9kZXZpY2UtbG9nL2lvcy1wZXJmb3JtYW5jZS1sb2cuanMiXSwibmFtZXMiOlsiTUFYX0VWRU5UUyIsIklPU1BlcmZvcm1hbmNlTG9nIiwiY29uc3RydWN0b3IiLCJyZW1vdGVEZWJ1Z2dlciIsIm1heEV2ZW50cyIsInBhcnNlSW50IiwidGltZWxpbmVFdmVudHMiLCJzdGFydENhcHR1cmUiLCJsb2dnZXIiLCJkZWJ1ZyIsInN0YXJ0VGltZWxpbmUiLCJvblRpbWVsaW5lRXZlbnQiLCJiaW5kIiwic3RvcENhcHR1cmUiLCJzdG9wVGltZWxpbmUiLCJldmVudCIsIl8iLCJ0cnVuY2F0ZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJwdXNoIiwibGVuZ3RoIiwicmVtb3ZlZEV2ZW50Iiwic2hpZnQiLCJ3YXJuIiwiZ2V0TG9ncyIsImV2ZW50cyIsImdldEFsbExvZ3MiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUEsTUFBTUEsVUFBVSxHQUFHLElBQW5COztBQUVBLE1BQU1DLGlCQUFOLENBQXdCO0FBQ3RCQyxFQUFBQSxXQUFXLENBQUVDLGNBQUYsRUFBa0JDLFNBQVMsR0FBR0osVUFBOUIsRUFBMEM7QUFDbkQsU0FBS0csY0FBTCxHQUFzQkEsY0FBdEI7QUFDQSxTQUFLQyxTQUFMLEdBQWlCQyxRQUFRLENBQUNELFNBQUQsRUFBWSxFQUFaLENBQXpCO0FBRUEsU0FBS0UsY0FBTCxHQUFzQixFQUF0QjtBQUNEOztBQUVELFFBQU1DLFlBQU4sR0FBc0I7QUFDcEJDLG9CQUFPQyxLQUFQLENBQWEsNkNBQWI7O0FBQ0EsU0FBS0gsY0FBTCxHQUFzQixFQUF0QjtBQUNBLFdBQU8sTUFBTSxLQUFLSCxjQUFMLENBQW9CTyxhQUFwQixDQUFrQyxLQUFLQyxlQUFMLENBQXFCQyxJQUFyQixDQUEwQixJQUExQixDQUFsQyxDQUFiO0FBQ0Q7O0FBRUQsUUFBTUMsV0FBTixHQUFxQjtBQUNuQkwsb0JBQU9DLEtBQVAsQ0FBYSw2Q0FBYjs7QUFDQSxXQUFPLE1BQU0sS0FBS04sY0FBTCxDQUFvQlcsWUFBcEIsRUFBYjtBQUNEOztBQUVESCxFQUFBQSxlQUFlLENBQUVJLEtBQUYsRUFBUztBQUN0QlAsb0JBQU9DLEtBQVAsQ0FBYyw0QkFBMkJPLGdCQUFFQyxRQUFGLENBQVdDLElBQUksQ0FBQ0MsU0FBTCxDQUFlSixLQUFmLENBQVgsQ0FBa0MsRUFBM0U7O0FBQ0EsU0FBS1QsY0FBTCxDQUFvQmMsSUFBcEIsQ0FBeUJMLEtBQXpCOztBQUdBLFFBQUksS0FBS1QsY0FBTCxDQUFvQmUsTUFBcEIsR0FBNkIsS0FBS2pCLFNBQXRDLEVBQWlEO0FBQy9DLFVBQUlrQixZQUFZLEdBQUcsS0FBS2hCLGNBQUwsQ0FBb0JpQixLQUFwQixFQUFuQjs7QUFDQWYsc0JBQU9nQixJQUFQLENBQWEsZ0RBQStDUixnQkFBRUMsUUFBRixDQUFXQyxJQUFJLENBQUNDLFNBQUwsQ0FBZUcsWUFBZixDQUFYLENBQXlDLEVBQXJHO0FBQ0Q7QUFDRjs7QUFFRCxRQUFNRyxPQUFOLEdBQWlCO0FBQ2YsUUFBSUMsTUFBTSxHQUFHLEtBQUtwQixjQUFsQjs7QUFHQUUsb0JBQU9DLEtBQVAsQ0FBYSwwQkFBYjs7QUFDQSxTQUFLSCxjQUFMLEdBQXNCLEVBQXRCO0FBRUEsV0FBT29CLE1BQVA7QUFDRDs7QUFFRCxRQUFNQyxVQUFOLEdBQW9CO0FBQ2xCLFdBQU8sS0FBS0YsT0FBTCxFQUFQO0FBQ0Q7O0FBMUNxQjs7O2VBK0NUeEIsaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbG9nZ2VyIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cbmNvbnN0IE1BWF9FVkVOVFMgPSA1MDAwO1xuXG5jbGFzcyBJT1NQZXJmb3JtYW5jZUxvZyB7XG4gIGNvbnN0cnVjdG9yIChyZW1vdGVEZWJ1Z2dlciwgbWF4RXZlbnRzID0gTUFYX0VWRU5UUykge1xuICAgIHRoaXMucmVtb3RlRGVidWdnZXIgPSByZW1vdGVEZWJ1Z2dlcjtcbiAgICB0aGlzLm1heEV2ZW50cyA9IHBhcnNlSW50KG1heEV2ZW50cywgMTApO1xuXG4gICAgdGhpcy50aW1lbGluZUV2ZW50cyA9IFtdO1xuICB9XG5cbiAgYXN5bmMgc3RhcnRDYXB0dXJlICgpIHtcbiAgICBsb2dnZXIuZGVidWcoJ1N0YXJ0aW5nIHBlcmZvcm1hbmNlIChUaW1lbGluZSkgbG9nIGNhcHR1cmUnKTtcbiAgICB0aGlzLnRpbWVsaW5lRXZlbnRzID0gW107XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMucmVtb3RlRGVidWdnZXIuc3RhcnRUaW1lbGluZSh0aGlzLm9uVGltZWxpbmVFdmVudC5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIGFzeW5jIHN0b3BDYXB0dXJlICgpIHtcbiAgICBsb2dnZXIuZGVidWcoJ1N0b3BwaW5nIHBlcmZvcm1hbmNlIChUaW1lbGluZSkgbG9nIGNhcHR1cmUnKTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5yZW1vdGVEZWJ1Z2dlci5zdG9wVGltZWxpbmUoKTtcbiAgfVxuXG4gIG9uVGltZWxpbmVFdmVudCAoZXZlbnQpIHtcbiAgICBsb2dnZXIuZGVidWcoYFJlY2VpdmVkIFRpbWVsaW5lIGV2ZW50OiAke18udHJ1bmNhdGUoSlNPTi5zdHJpbmdpZnkoZXZlbnQpKX1gKTtcbiAgICB0aGlzLnRpbWVsaW5lRXZlbnRzLnB1c2goZXZlbnQpO1xuXG4gICAgLy8gaWYgd2UgaGF2ZSB0b28gbWFueSwgZ2V0IHJpZCBvZiB0aGUgb2xkZXN0IGxvZyBsaW5lXG4gICAgaWYgKHRoaXMudGltZWxpbmVFdmVudHMubGVuZ3RoID4gdGhpcy5tYXhFdmVudHMpIHtcbiAgICAgIGxldCByZW1vdmVkRXZlbnQgPSB0aGlzLnRpbWVsaW5lRXZlbnRzLnNoaWZ0KCk7XG4gICAgICBsb2dnZXIud2FybihgVG9vIG1hbnkgVGltZWxpbmUgZXZlbnRzLCByZW1vdmluZyBlYXJsaWVzdDogJHtfLnRydW5jYXRlKEpTT04uc3RyaW5naWZ5KHJlbW92ZWRFdmVudCkpfWApO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGdldExvZ3MgKCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtYXdhaXRcbiAgICBsZXQgZXZlbnRzID0gdGhpcy50aW1lbGluZUV2ZW50cztcblxuICAgIC8vIGZsdXNoIGV2ZW50c1xuICAgIGxvZ2dlci5kZWJ1ZygnRmx1c2hpbmcgVGltZWxpbmUgZXZlbnRzJyk7XG4gICAgdGhpcy50aW1lbGluZUV2ZW50cyA9IFtdO1xuXG4gICAgcmV0dXJuIGV2ZW50cztcbiAgfVxuXG4gIGFzeW5jIGdldEFsbExvZ3MgKCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtYXdhaXRcbiAgICByZXR1cm4gdGhpcy5nZXRMb2dzKCk7XG4gIH1cbn1cblxuXG5leHBvcnQgeyBJT1NQZXJmb3JtYW5jZUxvZyB9O1xuZXhwb3J0IGRlZmF1bHQgSU9TUGVyZm9ybWFuY2VMb2c7XG4iXSwiZmlsZSI6ImxpYi9kZXZpY2UtbG9nL2lvcy1wZXJmb3JtYW5jZS1sb2cuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
