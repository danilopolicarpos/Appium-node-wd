"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.DEVICE_CONSOLE_PATH = exports.IOSLog = void 0;

require("source-map-support/register");

var _path = _interopRequireDefault(require("path"));

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

var _appiumSupport = require("appium-support");

var _teen_process = require("teen_process");

var _events = _interopRequireDefault(require("events"));

const {
  EventEmitter
} = _events.default;
const START_TIMEOUT = 10000;

const DEVICE_CONSOLE_PATH = _path.default.resolve(__dirname, '..', '..', '..', 'build', 'deviceconsole');

exports.DEVICE_CONSOLE_PATH = DEVICE_CONSOLE_PATH;
const SYSTEM_LOG_PATH = '/var/log/system.log';
const MAX_LOG_ENTRIES_COUNT = 10000;

class IOSLog extends EventEmitter {
  constructor(opts) {
    super();
    this.sim = opts.sim;
    this.udid = opts.udid;
    this.showLogs = !!opts.showLogs;
    this.realDeviceLogger = opts.realDeviceLogger || 'idevicesyslog';
    this.xcodeVersion = opts.xcodeVersion;
    this.proc = null;
    this.logs = [];
    this.logRow = '';
    this.logIdxSinceLastRequest = -1;
    this.maxBufferSize = MAX_LOG_ENTRIES_COUNT;
  }

  async startCaptureRealDevice() {
    let cmd, args, env;

    if ((this.realDeviceLogger || '').indexOf('idevicesyslog') !== -1) {
      _logger.default.debug('Attempting iOS device log capture via libimobiledevice idevicesyslog');

      if (this.realDeviceLogger.toLowerCase() === 'idevicesyslog') {
        cmd = 'idevicesyslog';

        try {
          await _appiumSupport.fs.which('idevicesyslog');
        } catch (err) {
          throw new Error(`Unable to find system idevicesyslog: ${err.message}`);
        }
      } else {
        if (!(await _appiumSupport.fs.exists(this.realDeviceLogger))) {
          throw new Error(`Unable to find idevicesyslog from 'realDeviceLogger' capability '${this.realDeviceLogger}'`);
        }

        cmd = this.realDeviceLogger;
      }

      args = ['-u', this.udid];
      env = process.env;
    } else if ((this.realDeviceLogger || '').indexOf('deviceconsole') !== -1) {
      _logger.default.debug('Attempting iOS device log capture via deviceconsole');

      let deviceconsole;

      if (this.realDeviceLogger.toLowerCase() === 'deviceconsole') {
        deviceconsole = DEVICE_CONSOLE_PATH;
      } else {
        let stat;

        try {
          stat = await _appiumSupport.fs.stat(this.realDeviceLogger);
        } catch (err) {
          throw new Error(`Unable to find deviceconsole from 'realDeviceLogger' capability '${this.realDeviceLogger}': ${err.message}`);
        }

        if (stat.isDirectory()) {
          deviceconsole = this.realDeviceLogger;
        } else {
          if (!_lodash.default.endsWith(this.realDeviceLogger, 'deviceconsole')) {
            throw new Error(`Unable to parse 'deviceconsole' installation directory from '${this.realDeviceLogger}'`);
          }

          deviceconsole = _path.default.dirname(this.realDeviceLogger);
        }
      }

      _logger.default.debug(`Using 'deviceconsole' from '${deviceconsole}'`);

      cmd = `${deviceconsole}/deviceconsole`;
      args = ['-u', this.udid];
      env = _lodash.default.clone(process.env);
      env.DYLD_LIBRARY_PATH = deviceconsole;

      if (process.env.DYLD_LIBRARY_PATH) {
        env.DYLD_LIBRARY_PATH = `${env.DYLD_LIBRARY_PATH}:${process.env.DYLD_LIBRARY_PATH}`;
      }
    } else {
      _logger.default.errorAndThrow(`Unable to capture device log. Unknown 'realDeviceLogger': '${this.realDeviceLogger}'`);
    }

    this.subprocessId = `${cmd}_${this.udid}`;

    _logger.default.debug(`Starting iOS device log capture with: '${cmd}'`);

    try {
      await this.killExistingSysLogProcesses(cmd, args);
    } catch (e) {}

    this.proc = this.getIDeviceSysLogProcess(cmd, args, env);
    await this.finishStartingLogCapture();
  }

  async startCaptureSimulator() {
    _logger.default.debug(`Starting iOS ${await this.sim.getPlatformVersion()} simulator log capture`);

    if (this.xcodeVersion.major < 5) {
      this.proc = new _teen_process.SubProcess('tail', ['-f', '-n', '1', SYSTEM_LOG_PATH]);
      await this.finishStartingLogCapture();
      return;
    }

    if (_lodash.default.isUndefined(this.sim.udid)) {
      _logger.default.errorAndThrow(`iOS log capture with Xcode ${this.xcodeVersion.versionString} requires a sim udid`);
    }

    let logPath = this.sim.getLogDir();

    try {
      if (logPath.indexOf('*') >= 0) {
        _logger.default.error(`Log path has * in it. Unable to start log capture: ${logPath}`);

        return;
      }

      let systemLogPath = _path.default.resolve(logPath, 'system.log');

      _logger.default.debug(`System log path: ${systemLogPath}`);

      await (0, _appiumSupport.mkdirp)(logPath);
      await _appiumSupport.fs.writeFile(systemLogPath, 'A new Appium session is about to start!\n', {
        flag: 'a'
      });
      let files;

      try {
        files = await _appiumSupport.fs.glob(systemLogPath);

        if (files.length < 1) {
          throw new Error('Could not start log capture');
        }
      } catch (e) {
        _logger.default.error(`Could not start log capture because no iOS ` + `simulator logs could be found at ${systemLogPath}. ` + `Logging will not be functional for this run`);
      }

      let lastModifiedLogPath = files[0];
      let lastModifiedLogTime = (await _appiumSupport.fs.stat(lastModifiedLogPath)).mtime;

      for (let file of files) {
        let {
          mtime
        } = await _appiumSupport.fs.stat(file);

        if (mtime > lastModifiedLogTime) {
          lastModifiedLogPath = file;
          lastModifiedLogTime = mtime;
        }
      }

      const tailArgs = ['-f', '-n', '1', lastModifiedLogPath];

      try {
        await (0, _teen_process.exec)('pkill', ['-xf', ['tail', ...tailArgs].join(' ')]);
      } catch (e) {}

      this.proc = new _teen_process.SubProcess('tail', tailArgs);
      await this.finishStartingLogCapture();
    } catch (err) {
      _logger.default.errorAndThrow(`Simulator log capture failed: ${err.message}`);
    }
  }

  async startCapture() {
    if (this.udid) {
      return await this.startCaptureRealDevice();
    }

    return await this.startCaptureSimulator();
  }

  async finishStartingLogCapture() {
    if (!this.proc) {
      _logger.default.errorAndThrow('Could not capture device log');
    }

    let firstLine = true;
    this.proc.on('output', (stdout, stderr) => {
      if (stdout) {
        if (firstLine) {
          if (stdout.substr(-1, 1) === '\n') {
            firstLine = false;
          }
        } else {
          this.logRow += stdout;

          if (stdout.substr(-1, 1) === '\n') {
            this.onOutput();
            this.logRow = '';
          }
        }
      }

      if (stderr) {
        this.onOutput('STDERR');
      }
    });

    let sd = (stdout, stderr) => {
      if (/execvp\(\)/.test(stderr)) {
        throw new Error('iOS log capture process failed to start');
      }

      return stdout || stderr;
    };

    await this.proc.start(sd, START_TIMEOUT);
  }

  async stopCapture() {
    if (this.proc) {
      if (this.udid) {
        const cachedSysLog = IOSLog.cachedIDeviceSysLogs[this.subprocessId];

        if (cachedSysLog) {
          cachedSysLog.count--;

          if (cachedSysLog.count === 0) {
            await this.killLogSubProcess();
            delete IOSLog.cachedIDeviceSysLogs[this.subprocessId];
          }
        }
      } else {
        await this.killLogSubProcess();
      }
    }

    this.proc = null;
  }

  async killLogSubProcess() {
    if (this.proc.isRunning) {
      _logger.default.debug('Stopping iOS log capture');

      try {
        await this.proc.stop('SIGTERM', 1000);
      } catch (e) {
        if (this.proc.isRunning) {
          _logger.default.warn('Cannot stop log capture process. Sending SIGKILL...');

          await this.proc.stop('SIGKILL');
        }
      }
    }
  }

  onOutput(prefix = '') {
    let logs = this.logRow.split('\n');

    for (let log of logs) {
      if (!log) continue;
      let logObj = {
        timestamp: Date.now(),
        level: 'ALL',
        message: log
      };
      this.logs.push(logObj);
      this.emit('output', logObj);

      if (this.logs.length > this.maxBufferSize) {
        this.logs.shift();

        if (this.logIdxSinceLastRequest > 0) {
          --this.logIdxSinceLastRequest;
        }
      }

      if (this.showLogs) {
        let space = prefix.length > 0 ? ' ' : '';

        _logger.default.info(`[IOS_SYSLOG_ROW${space}${prefix}] ${log}`);
      }
    }
  }

  async getLogs() {
    if (this.logs.length && this.logIdxSinceLastRequest < this.logs.length) {
      let result = this.logs;

      if (this.logIdxSinceLastRequest > 0) {
        result = result.slice(this.logIdxSinceLastRequest);
      }

      this.logIdxSinceLastRequest = this.logs.length;
      return result;
    }

    return [];
  }

  async getAllLogs() {
    return this.logs;
  }

  async killExistingSysLogProcesses(cmd, args) {
    if (!IOSLog.cachedIDeviceSysLogs[this.subprocessId]) {
      await (0, _teen_process.exec)('pkill', ['-xf', [cmd, ...args].join(' ')]);
    }
  }

  getIDeviceSysLogProcess(cmd, args, env) {
    if (!IOSLog.cachedIDeviceSysLogs[this.subprocessId]) {
      let {
        proc
      } = IOSLog.cachedIDeviceSysLogs[this.subprocessId] = {
        proc: new _teen_process.SubProcess(cmd, args, {
          env
        }),
        count: 1
      };
      proc.on('exit', () => delete IOSLog.cachedIDeviceSysLogs[this.subprocessId]);
    } else {
      IOSLog.cachedIDeviceSysLogs[this.subprocessId].count++;
    }

    return IOSLog.cachedIDeviceSysLogs[this.subprocessId].proc;
  }

}

exports.IOSLog = IOSLog;
IOSLog.cachedIDeviceSysLogs = {};
var _default = IOSLog;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
