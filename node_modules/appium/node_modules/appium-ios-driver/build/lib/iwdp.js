"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.IWDP = void 0;

require("source-map-support/register");

var _teen_process = require("teen_process");

var _events = _interopRequireDefault(require("events"));

var _logger = _interopRequireDefault(require("./logger"));

var _requestPromise = _interopRequireDefault(require("request-promise"));

var _asyncbox = require("asyncbox");

var _appiumSupport = require("appium-support");

const IWDP_CMD = 'ios_webkit_debug_proxy';
const MAX_RETRIES = 10;

const iwdpLogger = _appiumSupport.logger.getLogger('IWDP');

class IWDP extends _events.default {
  constructor(opts = {}) {
    super();
    this.udid = opts.udid || null;
    this.logStdout = !!opts.logStdout;
    this.attempts = 0;
    this.port = opts.webkitDebugProxyPort || 27753;
    this.process = this.createIWDPProcess();
    this.endpoint = `http://localhost:${this.port}`;
  }

  createIWDPProcess() {
    const process = new _teen_process.SubProcess(IWDP_CMD, ['-c', `${this.udid}:${this.port}`, '-d']);
    process.on('exit', () => this.onExit());
    process.on('lines-stderr', iwdpLogger.error);

    if (this.logStdout) {
      process.on('lines-stdout', iwdpLogger.debug);
    }

    return process;
  }

  async onExit() {
    if (!this.exitRequested) {
      this.process = this.createIWDPProcess();
      await this.start();
    }
  }

  async start() {
    if (++this.attempts > MAX_RETRIES) {
      return this.emit('error', new Error(`Failed to start IWDP server. Max retry attempts ${MAX_RETRIES} reached`));
    }

    this.exitRequested = false;

    if (!(await this.isSupported())) {
      _logger.default.errorAndThrow(`'ios_webkit_debug_proxy' not installed on this machine. Try 'brew install ios-webkit-debug-proxy`);
    }

    _logger.default.debug(`Starting ios_webkit_debug_proxy at port ${this.port} on device ${this.udid}`);

    await this.process.start(0);

    try {
      await (0, _asyncbox.retryInterval)(20, 500, async () => await (0, _requestPromise.default)(this.endpoint));
      this.emit('start');
    } catch (ign) {
      try {
        await this.process.stop();
      } catch (ign2) {}

      _logger.default.errorAndThrow(`Timed out waiting for ios_webkit_debug_proxy to open`);
    }
  }

  async stop() {
    this.attempts = 0;
    this.exitRequested = true;
    return await this.process.stop();
  }

  async isSupported() {
    if (typeof this.supported !== 'undefined') {
      return this.supported;
    }

    try {
      await _appiumSupport.fs.which(IWDP_CMD);
      this.supported = true;
    } catch (e) {
      this.supported = false;
    }

    return this.supported;
  }

}

exports.IWDP = IWDP;
var _default = IWDP;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9pd2RwLmpzIl0sIm5hbWVzIjpbIklXRFBfQ01EIiwiTUFYX1JFVFJJRVMiLCJpd2RwTG9nZ2VyIiwiYmFzZUxvZ2dlciIsImdldExvZ2dlciIsIklXRFAiLCJFdmVudEVtaXR0ZXIiLCJjb25zdHJ1Y3RvciIsIm9wdHMiLCJ1ZGlkIiwibG9nU3Rkb3V0IiwiYXR0ZW1wdHMiLCJwb3J0Iiwid2Via2l0RGVidWdQcm94eVBvcnQiLCJwcm9jZXNzIiwiY3JlYXRlSVdEUFByb2Nlc3MiLCJlbmRwb2ludCIsIlN1YlByb2Nlc3MiLCJvbiIsIm9uRXhpdCIsImVycm9yIiwiZGVidWciLCJleGl0UmVxdWVzdGVkIiwic3RhcnQiLCJlbWl0IiwiRXJyb3IiLCJpc1N1cHBvcnRlZCIsImxvZ2dlciIsImVycm9yQW5kVGhyb3ciLCJpZ24iLCJzdG9wIiwiaWduMiIsInN1cHBvcnRlZCIsImZzIiwid2hpY2giLCJlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUdBLE1BQU1BLFFBQVEsR0FBRyx3QkFBakI7QUFDQSxNQUFNQyxXQUFXLEdBQUcsRUFBcEI7O0FBRUEsTUFBTUMsVUFBVSxHQUFHQyxzQkFBV0MsU0FBWCxDQUFxQixNQUFyQixDQUFuQjs7QUFFQSxNQUFNQyxJQUFOLFNBQW1CQyxlQUFuQixDQUFnQztBQUM5QkMsRUFBQUEsV0FBVyxDQUFFQyxJQUFJLEdBQUcsRUFBVCxFQUFhO0FBQ3RCO0FBRUEsU0FBS0MsSUFBTCxHQUFZRCxJQUFJLENBQUNDLElBQUwsSUFBYSxJQUF6QjtBQUNBLFNBQUtDLFNBQUwsR0FBaUIsQ0FBQyxDQUFDRixJQUFJLENBQUNFLFNBQXhCO0FBQ0EsU0FBS0MsUUFBTCxHQUFnQixDQUFoQjtBQUNBLFNBQUtDLElBQUwsR0FBWUosSUFBSSxDQUFDSyxvQkFBTCxJQUE2QixLQUF6QztBQUNBLFNBQUtDLE9BQUwsR0FBZSxLQUFLQyxpQkFBTCxFQUFmO0FBQ0EsU0FBS0MsUUFBTCxHQUFpQixvQkFBbUIsS0FBS0osSUFBSyxFQUE5QztBQUNEOztBQUVERyxFQUFBQSxpQkFBaUIsR0FBSTtBQUVuQixVQUFNRCxPQUFPLEdBQUcsSUFBSUcsd0JBQUosQ0FBZWpCLFFBQWYsRUFBeUIsQ0FBQyxJQUFELEVBQVEsR0FBRSxLQUFLUyxJQUFLLElBQUcsS0FBS0csSUFBSyxFQUFqQyxFQUFvQyxJQUFwQyxDQUF6QixDQUFoQjtBQUNBRSxJQUFBQSxPQUFPLENBQUNJLEVBQVIsQ0FBVyxNQUFYLEVBQW1CLE1BQU0sS0FBS0MsTUFBTCxFQUF6QjtBQUNBTCxJQUFBQSxPQUFPLENBQUNJLEVBQVIsQ0FBVyxjQUFYLEVBQTJCaEIsVUFBVSxDQUFDa0IsS0FBdEM7O0FBQ0EsUUFBSSxLQUFLVixTQUFULEVBQW9CO0FBQ2xCSSxNQUFBQSxPQUFPLENBQUNJLEVBQVIsQ0FBVyxjQUFYLEVBQTJCaEIsVUFBVSxDQUFDbUIsS0FBdEM7QUFDRDs7QUFDRCxXQUFPUCxPQUFQO0FBQ0Q7O0FBRUQsUUFBTUssTUFBTixHQUFnQjtBQUVkLFFBQUksQ0FBQyxLQUFLRyxhQUFWLEVBQXlCO0FBQ3ZCLFdBQUtSLE9BQUwsR0FBZSxLQUFLQyxpQkFBTCxFQUFmO0FBQ0EsWUFBTSxLQUFLUSxLQUFMLEVBQU47QUFDRDtBQUNGOztBQUVELFFBQU1BLEtBQU4sR0FBZTtBQUNiLFFBQUksRUFBRSxLQUFLWixRQUFQLEdBQWtCVixXQUF0QixFQUFtQztBQUNqQyxhQUFPLEtBQUt1QixJQUFMLENBQVUsT0FBVixFQUFtQixJQUFJQyxLQUFKLENBQVcsbURBQWtEeEIsV0FBWSxVQUF6RSxDQUFuQixDQUFQO0FBQ0Q7O0FBQ0QsU0FBS3FCLGFBQUwsR0FBcUIsS0FBckI7O0FBR0EsUUFBSSxFQUFDLE1BQU0sS0FBS0ksV0FBTCxFQUFQLENBQUosRUFBK0I7QUFDN0JDLHNCQUFPQyxhQUFQLENBQXNCLGtHQUF0QjtBQUNEOztBQUVERCxvQkFBT04sS0FBUCxDQUFjLDJDQUEwQyxLQUFLVCxJQUFLLGNBQWEsS0FBS0gsSUFBSyxFQUF6Rjs7QUFDQSxVQUFNLEtBQUtLLE9BQUwsQ0FBYVMsS0FBYixDQUFtQixDQUFuQixDQUFOOztBQUdBLFFBQUk7QUFDRixZQUFNLDZCQUFjLEVBQWQsRUFBa0IsR0FBbEIsRUFBdUIsWUFBWSxNQUFNLDZCQUFRLEtBQUtQLFFBQWIsQ0FBekMsQ0FBTjtBQUNBLFdBQUtRLElBQUwsQ0FBVSxPQUFWO0FBQ0QsS0FIRCxDQUdFLE9BQU9LLEdBQVAsRUFBWTtBQUNaLFVBQUk7QUFDRixjQUFNLEtBQUtmLE9BQUwsQ0FBYWdCLElBQWIsRUFBTjtBQUNELE9BRkQsQ0FFRSxPQUFPQyxJQUFQLEVBQWEsQ0FBRzs7QUFDbEJKLHNCQUFPQyxhQUFQLENBQXNCLHNEQUF0QjtBQUNEO0FBQ0Y7O0FBRUQsUUFBTUUsSUFBTixHQUFjO0FBQ1osU0FBS25CLFFBQUwsR0FBZ0IsQ0FBaEI7QUFDQSxTQUFLVyxhQUFMLEdBQXFCLElBQXJCO0FBQ0EsV0FBTyxNQUFNLEtBQUtSLE9BQUwsQ0FBYWdCLElBQWIsRUFBYjtBQUNEOztBQUtELFFBQU1KLFdBQU4sR0FBcUI7QUFDbkIsUUFBSSxPQUFPLEtBQUtNLFNBQVosS0FBMEIsV0FBOUIsRUFBMkM7QUFDekMsYUFBTyxLQUFLQSxTQUFaO0FBQ0Q7O0FBRUQsUUFBSTtBQUNGLFlBQU1DLGtCQUFHQyxLQUFILENBQVNsQyxRQUFULENBQU47QUFDQSxXQUFLZ0MsU0FBTCxHQUFpQixJQUFqQjtBQUNELEtBSEQsQ0FHRSxPQUFPRyxDQUFQLEVBQVU7QUFDVixXQUFLSCxTQUFMLEdBQWlCLEtBQWpCO0FBQ0Q7O0FBQ0QsV0FBTyxLQUFLQSxTQUFaO0FBQ0Q7O0FBOUU2Qjs7O2VBa0ZqQjNCLEkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdWJQcm9jZXNzIH0gZnJvbSAndGVlbl9wcm9jZXNzJztcbmltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSAnZXZlbnRzJztcbmltcG9ydCBsb2dnZXIgZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHJlcXVlc3QgZnJvbSAncmVxdWVzdC1wcm9taXNlJztcbmltcG9ydCB7IHJldHJ5SW50ZXJ2YWwgfSBmcm9tICdhc3luY2JveCc7XG5pbXBvcnQgeyBmcywgbG9nZ2VyIGFzIGJhc2VMb2dnZXIgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5cblxuY29uc3QgSVdEUF9DTUQgPSAnaW9zX3dlYmtpdF9kZWJ1Z19wcm94eSc7XG5jb25zdCBNQVhfUkVUUklFUyA9IDEwO1xuXG5jb25zdCBpd2RwTG9nZ2VyID0gYmFzZUxvZ2dlci5nZXRMb2dnZXIoJ0lXRFAnKTtcblxuY2xhc3MgSVdEUCBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIGNvbnN0cnVjdG9yIChvcHRzID0ge30pIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy51ZGlkID0gb3B0cy51ZGlkIHx8IG51bGw7XG4gICAgdGhpcy5sb2dTdGRvdXQgPSAhIW9wdHMubG9nU3Rkb3V0O1xuICAgIHRoaXMuYXR0ZW1wdHMgPSAwO1xuICAgIHRoaXMucG9ydCA9IG9wdHMud2Via2l0RGVidWdQcm94eVBvcnQgfHwgMjc3NTM7XG4gICAgdGhpcy5wcm9jZXNzID0gdGhpcy5jcmVhdGVJV0RQUHJvY2VzcygpO1xuICAgIHRoaXMuZW5kcG9pbnQgPSBgaHR0cDovL2xvY2FsaG9zdDoke3RoaXMucG9ydH1gO1xuICB9XG5cbiAgY3JlYXRlSVdEUFByb2Nlc3MgKCkge1xuICAgIC8vIChzZWUgaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9pb3Mtd2Via2l0LWRlYnVnLXByb3h5IGZvciByZWZlcmVuY2UpXG4gICAgY29uc3QgcHJvY2VzcyA9IG5ldyBTdWJQcm9jZXNzKElXRFBfQ01ELCBbJy1jJywgYCR7dGhpcy51ZGlkfToke3RoaXMucG9ydH1gLCAnLWQnXSk7XG4gICAgcHJvY2Vzcy5vbignZXhpdCcsICgpID0+IHRoaXMub25FeGl0KCkpO1xuICAgIHByb2Nlc3Mub24oJ2xpbmVzLXN0ZGVycicsIGl3ZHBMb2dnZXIuZXJyb3IpO1xuICAgIGlmICh0aGlzLmxvZ1N0ZG91dCkge1xuICAgICAgcHJvY2Vzcy5vbignbGluZXMtc3Rkb3V0JywgaXdkcExvZ2dlci5kZWJ1Zyk7XG4gICAgfVxuICAgIHJldHVybiBwcm9jZXNzO1xuICB9XG5cbiAgYXN5bmMgb25FeGl0ICgpIHtcbiAgICAvLyBJZiB0aGUgcHJvY2VzcyBleGl0cyBhbmQgdGhlIGV4aXQgd2Fzbid0IHJlcXVlc3RlZCBieSB0aGUgQVBJLCByZXN0YXJ0IGl0XG4gICAgaWYgKCF0aGlzLmV4aXRSZXF1ZXN0ZWQpIHtcbiAgICAgIHRoaXMucHJvY2VzcyA9IHRoaXMuY3JlYXRlSVdEUFByb2Nlc3MoKTtcbiAgICAgIGF3YWl0IHRoaXMuc3RhcnQoKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBzdGFydCAoKSB7XG4gICAgaWYgKCsrdGhpcy5hdHRlbXB0cyA+IE1BWF9SRVRSSUVTKSB7XG4gICAgICByZXR1cm4gdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcihgRmFpbGVkIHRvIHN0YXJ0IElXRFAgc2VydmVyLiBNYXggcmV0cnkgYXR0ZW1wdHMgJHtNQVhfUkVUUklFU30gcmVhY2hlZGApKTtcbiAgICB9XG4gICAgdGhpcy5leGl0UmVxdWVzdGVkID0gZmFsc2U7XG5cbiAgICAvLyBUaHJvdyBlcnJvciBpZiBpb3Nfd2Via2l0X2RlYnVnX3Byb3h5IGlzIG5vdCBpbnN0YWxsZWRcbiAgICBpZiAoIWF3YWl0IHRoaXMuaXNTdXBwb3J0ZWQoKSkge1xuICAgICAgbG9nZ2VyLmVycm9yQW5kVGhyb3coYCdpb3Nfd2Via2l0X2RlYnVnX3Byb3h5JyBub3QgaW5zdGFsbGVkIG9uIHRoaXMgbWFjaGluZS4gVHJ5ICdicmV3IGluc3RhbGwgaW9zLXdlYmtpdC1kZWJ1Zy1wcm94eWApO1xuICAgIH1cblxuICAgIGxvZ2dlci5kZWJ1ZyhgU3RhcnRpbmcgaW9zX3dlYmtpdF9kZWJ1Z19wcm94eSBhdCBwb3J0ICR7dGhpcy5wb3J0fSBvbiBkZXZpY2UgJHt0aGlzLnVkaWR9YCk7XG4gICAgYXdhaXQgdGhpcy5wcm9jZXNzLnN0YXJ0KDApO1xuXG4gICAgLy8gUmV0cnkgcGluZ2luZyB0aGUgaXdkcCBzZXJ2ZXIgdW50aWwgaXQncyByZWFkeVxuICAgIHRyeSB7XG4gICAgICBhd2FpdCByZXRyeUludGVydmFsKDIwLCA1MDAsIGFzeW5jICgpID0+IGF3YWl0IHJlcXVlc3QodGhpcy5lbmRwb2ludCkpO1xuICAgICAgdGhpcy5lbWl0KCdzdGFydCcpO1xuICAgIH0gY2F0Y2ggKGlnbikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgdGhpcy5wcm9jZXNzLnN0b3AoKTtcbiAgICAgIH0gY2F0Y2ggKGlnbjIpIHsgfVxuICAgICAgbG9nZ2VyLmVycm9yQW5kVGhyb3coYFRpbWVkIG91dCB3YWl0aW5nIGZvciBpb3Nfd2Via2l0X2RlYnVnX3Byb3h5IHRvIG9wZW5gKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBzdG9wICgpIHtcbiAgICB0aGlzLmF0dGVtcHRzID0gMDtcbiAgICB0aGlzLmV4aXRSZXF1ZXN0ZWQgPSB0cnVlO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnByb2Nlc3Muc3RvcCgpO1xuICB9XG5cbiAgLyoqXG5cdCAqIElzICdpb3Nfd2Via2l0X2RlYnVnX3Byb3h5JyBhdmFpbGFibGU/XG5cdCAqL1xuICBhc3luYyBpc1N1cHBvcnRlZCAoKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLnN1cHBvcnRlZCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiB0aGlzLnN1cHBvcnRlZDtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgYXdhaXQgZnMud2hpY2goSVdEUF9DTUQpO1xuICAgICAgdGhpcy5zdXBwb3J0ZWQgPSB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRoaXMuc3VwcG9ydGVkID0gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnN1cHBvcnRlZDtcbiAgfVxufVxuXG5leHBvcnQgeyBJV0RQIH07XG5leHBvcnQgZGVmYXVsdCBJV0RQO1xuIl0sImZpbGUiOiJsaWIvaXdkcC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiJ9
