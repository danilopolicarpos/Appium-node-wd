"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _iosLog = _interopRequireDefault(require("../device-log/ios-log"));

var _iosCrashLog = _interopRequireDefault(require("../device-log/ios-crash-log"));

var _logger = _interopRequireDefault(require("../logger"));

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

extensions.extractLogs = async function extractLogs(logType, logsContainer = {}) {
  if (_lodash.default.isEmpty(logsContainer)) {
    throw new Error('No logs currently available. Is the device/simulator started?');
  }

  const logObject = logsContainer[logType];
  const logs = logObject ? await logObject.getLogs() : null;

  if (logs) {
    return logs;
  }

  throw new Error(`No logs of type '${logType}' found.`);
};

extensions.supportedLogTypes = {
  syslog: {
    description: 'System Logs - Device logs for iOS applications on real devices and simulators',
    getter: async self => await self.extractLogs('syslog', self.logs)
  },
  crashlog: {
    description: 'Crash Logs - Crash reports for iOS applications on real devices and simulators',
    getter: async self => await self.extractLogs('crashlog', self.logs)
  },
  performance: {
    description: 'Performance Logs - Debug Timelines on real devices and simulators',
    getter: async self => await self.extractLogs('performance', self.logs)
  },
  server: {
    description: 'Appium server logs',
    getter: self => {
      if (!self.relaxedSecurityEnabled) {
        throw new Error('Appium server must have relaxed security flag set ' + 'in order to retrieve server logs');
      }

      return _logger.default.unwrap().record.map(x => {
        return {
          timestamp: Date.now(),
          level: 'ALL',
          message: _lodash.default.isEmpty(x.prefix) ? x.message : `[${x.prefix}] ${x.message}`
        };
      });
    }
  }
};

helpers.startLogCapture = async function startLogCapture(sim) {
  if (!_lodash.default.isEmpty(this.logs)) {
    _logger.default.warn("Trying to start iOS log capture but it's already started!");

    return;
  }

  this.logs.crashlog = new _iosCrashLog.default();
  this.logs.syslog = new _iosLog.default({
    sim,
    udid: this.opts.udid,
    showLogs: this.opts.showIOSLog,
    realDeviceLogger: this.opts.realDeviceLogger,
    xcodeVersion: this.xcodeVersion
  });

  try {
    await this.logs.syslog.startCapture();
  } catch (err) {
    _logger.default.warn('Could not capture logs from device. Continuing without capturing logs.');

    return;
  }

  await this.logs.crashlog.startCapture();
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9sb2dnaW5nLmpzIl0sIm5hbWVzIjpbImNvbW1hbmRzIiwiaGVscGVycyIsImV4dGVuc2lvbnMiLCJleHRyYWN0TG9ncyIsImxvZ1R5cGUiLCJsb2dzQ29udGFpbmVyIiwiXyIsImlzRW1wdHkiLCJFcnJvciIsImxvZ09iamVjdCIsImxvZ3MiLCJnZXRMb2dzIiwic3VwcG9ydGVkTG9nVHlwZXMiLCJzeXNsb2ciLCJkZXNjcmlwdGlvbiIsImdldHRlciIsInNlbGYiLCJjcmFzaGxvZyIsInBlcmZvcm1hbmNlIiwic2VydmVyIiwicmVsYXhlZFNlY3VyaXR5RW5hYmxlZCIsImxvZ2dlciIsInVud3JhcCIsInJlY29yZCIsIm1hcCIsIngiLCJ0aW1lc3RhbXAiLCJEYXRlIiwibm93IiwibGV2ZWwiLCJtZXNzYWdlIiwicHJlZml4Iiwic3RhcnRMb2dDYXB0dXJlIiwic2ltIiwid2FybiIsIklPU0NyYXNoTG9nIiwiSU9TTG9nIiwidWRpZCIsIm9wdHMiLCJzaG93TG9ncyIsInNob3dJT1NMb2ciLCJyZWFsRGV2aWNlTG9nZ2VyIiwieGNvZGVWZXJzaW9uIiwic3RhcnRDYXB0dXJlIiwiZXJyIiwiT2JqZWN0IiwiYXNzaWduIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUdBLElBQUlBLFFBQVEsR0FBRyxFQUFmO0FBQUEsSUFBbUJDLE9BQU8sR0FBRyxFQUE3QjtBQUFBLElBQWlDQyxVQUFVLEdBQUcsRUFBOUM7Ozs7QUFFQUEsVUFBVSxDQUFDQyxXQUFYLEdBQXlCLGVBQWVBLFdBQWYsQ0FBNEJDLE9BQTVCLEVBQXFDQyxhQUFhLEdBQUcsRUFBckQsRUFBeUQ7QUFHaEYsTUFBSUMsZ0JBQUVDLE9BQUYsQ0FBVUYsYUFBVixDQUFKLEVBQThCO0FBQzVCLFVBQU0sSUFBSUcsS0FBSixDQUFVLCtEQUFWLENBQU47QUFDRDs7QUFHRCxRQUFNQyxTQUFTLEdBQUdKLGFBQWEsQ0FBQ0QsT0FBRCxDQUEvQjtBQUNBLFFBQU1NLElBQUksR0FBR0QsU0FBUyxHQUFHLE1BQU1BLFNBQVMsQ0FBQ0UsT0FBVixFQUFULEdBQStCLElBQXJEOztBQUNBLE1BQUlELElBQUosRUFBVTtBQUNSLFdBQU9BLElBQVA7QUFDRDs7QUFDRCxRQUFNLElBQUlGLEtBQUosQ0FBVyxvQkFBbUJKLE9BQVEsVUFBdEMsQ0FBTjtBQUNELENBZEQ7O0FBZ0JBRixVQUFVLENBQUNVLGlCQUFYLEdBQStCO0FBQzdCQyxFQUFBQSxNQUFNLEVBQUU7QUFDTkMsSUFBQUEsV0FBVyxFQUFFLCtFQURQO0FBRU5DLElBQUFBLE1BQU0sRUFBRSxNQUFPQyxJQUFQLElBQWdCLE1BQU1BLElBQUksQ0FBQ2IsV0FBTCxDQUFpQixRQUFqQixFQUEyQmEsSUFBSSxDQUFDTixJQUFoQztBQUZ4QixHQURxQjtBQUs3Qk8sRUFBQUEsUUFBUSxFQUFFO0FBQ1JILElBQUFBLFdBQVcsRUFBRSxnRkFETDtBQUVSQyxJQUFBQSxNQUFNLEVBQUUsTUFBT0MsSUFBUCxJQUFnQixNQUFNQSxJQUFJLENBQUNiLFdBQUwsQ0FBaUIsVUFBakIsRUFBNkJhLElBQUksQ0FBQ04sSUFBbEM7QUFGdEIsR0FMbUI7QUFTN0JRLEVBQUFBLFdBQVcsRUFBRTtBQUNYSixJQUFBQSxXQUFXLEVBQUUsbUVBREY7QUFFWEMsSUFBQUEsTUFBTSxFQUFFLE1BQU9DLElBQVAsSUFBZ0IsTUFBTUEsSUFBSSxDQUFDYixXQUFMLENBQWlCLGFBQWpCLEVBQWdDYSxJQUFJLENBQUNOLElBQXJDO0FBRm5CLEdBVGdCO0FBYTdCUyxFQUFBQSxNQUFNLEVBQUU7QUFDTkwsSUFBQUEsV0FBVyxFQUFFLG9CQURQO0FBRU5DLElBQUFBLE1BQU0sRUFBR0MsSUFBRCxJQUFVO0FBQ2hCLFVBQUksQ0FBQ0EsSUFBSSxDQUFDSSxzQkFBVixFQUFrQztBQUNoQyxjQUFNLElBQUlaLEtBQUosQ0FBVSx1REFDQSxrQ0FEVixDQUFOO0FBRUQ7O0FBQ0QsYUFBT2EsZ0JBQU9DLE1BQVAsR0FBZ0JDLE1BQWhCLENBQ0pDLEdBREksQ0FDQ0MsQ0FBRCxJQUFPO0FBQ1YsZUFBTztBQUVMQyxVQUFBQSxTQUFTLEVBQUVDLElBQUksQ0FBQ0MsR0FBTCxFQUZOO0FBR0xDLFVBQUFBLEtBQUssRUFBRSxLQUhGO0FBSUxDLFVBQUFBLE9BQU8sRUFBRXhCLGdCQUFFQyxPQUFGLENBQVVrQixDQUFDLENBQUNNLE1BQVosSUFBc0JOLENBQUMsQ0FBQ0ssT0FBeEIsR0FBbUMsSUFBR0wsQ0FBQyxDQUFDTSxNQUFPLEtBQUlOLENBQUMsQ0FBQ0ssT0FBUTtBQUpqRSxTQUFQO0FBTUQsT0FSSSxDQUFQO0FBU0Q7QUFoQks7QUFicUIsQ0FBL0I7O0FBaUNBN0IsT0FBTyxDQUFDK0IsZUFBUixHQUEwQixlQUFlQSxlQUFmLENBQWdDQyxHQUFoQyxFQUFxQztBQUM3RCxNQUFJLENBQUMzQixnQkFBRUMsT0FBRixDQUFVLEtBQUtHLElBQWYsQ0FBTCxFQUEyQjtBQUN6Qlcsb0JBQU9hLElBQVAsQ0FBWSwyREFBWjs7QUFDQTtBQUNEOztBQUNELE9BQUt4QixJQUFMLENBQVVPLFFBQVYsR0FBcUIsSUFBSWtCLG9CQUFKLEVBQXJCO0FBQ0EsT0FBS3pCLElBQUwsQ0FBVUcsTUFBVixHQUFtQixJQUFJdUIsZUFBSixDQUFXO0FBQzVCSCxJQUFBQSxHQUQ0QjtBQUU1QkksSUFBQUEsSUFBSSxFQUFFLEtBQUtDLElBQUwsQ0FBVUQsSUFGWTtBQUc1QkUsSUFBQUEsUUFBUSxFQUFFLEtBQUtELElBQUwsQ0FBVUUsVUFIUTtBQUk1QkMsSUFBQUEsZ0JBQWdCLEVBQUUsS0FBS0gsSUFBTCxDQUFVRyxnQkFKQTtBQUs1QkMsSUFBQUEsWUFBWSxFQUFFLEtBQUtBO0FBTFMsR0FBWCxDQUFuQjs7QUFPQSxNQUFJO0FBQ0YsVUFBTSxLQUFLaEMsSUFBTCxDQUFVRyxNQUFWLENBQWlCOEIsWUFBakIsRUFBTjtBQUNELEdBRkQsQ0FFRSxPQUFPQyxHQUFQLEVBQVk7QUFDWnZCLG9CQUFPYSxJQUFQLENBQVksd0VBQVo7O0FBQ0E7QUFDRDs7QUFDRCxRQUFNLEtBQUt4QixJQUFMLENBQVVPLFFBQVYsQ0FBbUIwQixZQUFuQixFQUFOO0FBQ0QsQ0FwQkQ7O0FBdUJBRSxNQUFNLENBQUNDLE1BQVAsQ0FBYzVDLFVBQWQsRUFBMEJGLFFBQTFCLEVBQW9DQyxPQUFwQztlQUVlQyxVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBJT1NMb2cgZnJvbSAnLi4vZGV2aWNlLWxvZy9pb3MtbG9nJztcbmltcG9ydCBJT1NDcmFzaExvZyBmcm9tICcuLi9kZXZpY2UtbG9nL2lvcy1jcmFzaC1sb2cnO1xuaW1wb3J0IGxvZ2dlciBmcm9tICcuLi9sb2dnZXInO1xuXG5cbmxldCBjb21tYW5kcyA9IHt9LCBoZWxwZXJzID0ge30sIGV4dGVuc2lvbnMgPSB7fTtcblxuZXh0ZW5zaW9ucy5leHRyYWN0TG9ncyA9IGFzeW5jIGZ1bmN0aW9uIGV4dHJhY3RMb2dzIChsb2dUeXBlLCBsb2dzQ29udGFpbmVyID0ge30pIHtcbiAgLy8gbWFrZSBzdXJlIHRoYXQgd2UgaGF2ZSBsb2dzIGF0IGFsbFxuICAvLyBvdGhlcndpc2UgaXQncyBub3QgYmVlbiBpbml0aWFsaXplZFxuICBpZiAoXy5pc0VtcHR5KGxvZ3NDb250YWluZXIpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdObyBsb2dzIGN1cnJlbnRseSBhdmFpbGFibGUuIElzIHRoZSBkZXZpY2Uvc2ltdWxhdG9yIHN0YXJ0ZWQ/Jyk7XG4gIH1cblxuICAvLyBJZiBsb2dzIGNhcHR1cmVkIHN1Y2Nlc3NmdWxseSBzZW5kIHJlc3BvbnNlIHdpdGggZGF0YSwgZWxzZSBzZW5kIGVycm9yXG4gIGNvbnN0IGxvZ09iamVjdCA9IGxvZ3NDb250YWluZXJbbG9nVHlwZV07XG4gIGNvbnN0IGxvZ3MgPSBsb2dPYmplY3QgPyBhd2FpdCBsb2dPYmplY3QuZ2V0TG9ncygpIDogbnVsbDtcbiAgaWYgKGxvZ3MpIHtcbiAgICByZXR1cm4gbG9ncztcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoYE5vIGxvZ3Mgb2YgdHlwZSAnJHtsb2dUeXBlfScgZm91bmQuYCk7XG59O1xuXG5leHRlbnNpb25zLnN1cHBvcnRlZExvZ1R5cGVzID0ge1xuICBzeXNsb2c6IHtcbiAgICBkZXNjcmlwdGlvbjogJ1N5c3RlbSBMb2dzIC0gRGV2aWNlIGxvZ3MgZm9yIGlPUyBhcHBsaWNhdGlvbnMgb24gcmVhbCBkZXZpY2VzIGFuZCBzaW11bGF0b3JzJyxcbiAgICBnZXR0ZXI6IGFzeW5jIChzZWxmKSA9PiBhd2FpdCBzZWxmLmV4dHJhY3RMb2dzKCdzeXNsb2cnLCBzZWxmLmxvZ3MpLFxuICB9LFxuICBjcmFzaGxvZzoge1xuICAgIGRlc2NyaXB0aW9uOiAnQ3Jhc2ggTG9ncyAtIENyYXNoIHJlcG9ydHMgZm9yIGlPUyBhcHBsaWNhdGlvbnMgb24gcmVhbCBkZXZpY2VzIGFuZCBzaW11bGF0b3JzJyxcbiAgICBnZXR0ZXI6IGFzeW5jIChzZWxmKSA9PiBhd2FpdCBzZWxmLmV4dHJhY3RMb2dzKCdjcmFzaGxvZycsIHNlbGYubG9ncyksXG4gIH0sXG4gIHBlcmZvcm1hbmNlOiB7XG4gICAgZGVzY3JpcHRpb246ICdQZXJmb3JtYW5jZSBMb2dzIC0gRGVidWcgVGltZWxpbmVzIG9uIHJlYWwgZGV2aWNlcyBhbmQgc2ltdWxhdG9ycycsXG4gICAgZ2V0dGVyOiBhc3luYyAoc2VsZikgPT4gYXdhaXQgc2VsZi5leHRyYWN0TG9ncygncGVyZm9ybWFuY2UnLCBzZWxmLmxvZ3MpLFxuICB9LFxuICBzZXJ2ZXI6IHtcbiAgICBkZXNjcmlwdGlvbjogJ0FwcGl1bSBzZXJ2ZXIgbG9ncycsXG4gICAgZ2V0dGVyOiAoc2VsZikgPT4ge1xuICAgICAgaWYgKCFzZWxmLnJlbGF4ZWRTZWN1cml0eUVuYWJsZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBcHBpdW0gc2VydmVyIG11c3QgaGF2ZSByZWxheGVkIHNlY3VyaXR5IGZsYWcgc2V0ICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2luIG9yZGVyIHRvIHJldHJpZXZlIHNlcnZlciBsb2dzJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbG9nZ2VyLnVud3JhcCgpLnJlY29yZFxuICAgICAgICAubWFwKCh4KSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC8vIG5wbWxvZyBkb2VzIG5vdCBrZWVwIHRpbWVzdGFtcHMgaW4gdGhlIGhpc3RvcnlcbiAgICAgICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcbiAgICAgICAgICAgIGxldmVsOiAnQUxMJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6IF8uaXNFbXB0eSh4LnByZWZpeCkgPyB4Lm1lc3NhZ2UgOiBgWyR7eC5wcmVmaXh9XSAke3gubWVzc2FnZX1gLFxuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH0sXG4gIH0sXG59O1xuXG5oZWxwZXJzLnN0YXJ0TG9nQ2FwdHVyZSA9IGFzeW5jIGZ1bmN0aW9uIHN0YXJ0TG9nQ2FwdHVyZSAoc2ltKSB7XG4gIGlmICghXy5pc0VtcHR5KHRoaXMubG9ncykpIHtcbiAgICBsb2dnZXIud2FybihcIlRyeWluZyB0byBzdGFydCBpT1MgbG9nIGNhcHR1cmUgYnV0IGl0J3MgYWxyZWFkeSBzdGFydGVkIVwiKTtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5sb2dzLmNyYXNobG9nID0gbmV3IElPU0NyYXNoTG9nKCk7XG4gIHRoaXMubG9ncy5zeXNsb2cgPSBuZXcgSU9TTG9nKHtcbiAgICBzaW0sXG4gICAgdWRpZDogdGhpcy5vcHRzLnVkaWQsXG4gICAgc2hvd0xvZ3M6IHRoaXMub3B0cy5zaG93SU9TTG9nLFxuICAgIHJlYWxEZXZpY2VMb2dnZXI6IHRoaXMub3B0cy5yZWFsRGV2aWNlTG9nZ2VyLFxuICAgIHhjb2RlVmVyc2lvbjogdGhpcy54Y29kZVZlcnNpb24sXG4gIH0pO1xuICB0cnkge1xuICAgIGF3YWl0IHRoaXMubG9ncy5zeXNsb2cuc3RhcnRDYXB0dXJlKCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGxvZ2dlci53YXJuKCdDb3VsZCBub3QgY2FwdHVyZSBsb2dzIGZyb20gZGV2aWNlLiBDb250aW51aW5nIHdpdGhvdXQgY2FwdHVyaW5nIGxvZ3MuJyk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGF3YWl0IHRoaXMubG9ncy5jcmFzaGxvZy5zdGFydENhcHR1cmUoKTtcbn07XG5cblxuT2JqZWN0LmFzc2lnbihleHRlbnNpb25zLCBjb21tYW5kcywgaGVscGVycyk7XG5leHBvcnQgeyBjb21tYW5kcywgaGVscGVycyB9O1xuZXhwb3J0IGRlZmF1bHQgZXh0ZW5zaW9ucztcbiJdLCJmaWxlIjoibGliL2NvbW1hbmRzL2xvZ2dpbmcuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
