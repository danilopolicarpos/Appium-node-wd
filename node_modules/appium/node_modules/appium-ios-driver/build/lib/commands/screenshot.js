"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

require("source-map-support/register");

var _uuidJs = _interopRequireDefault(require("uuid-js"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _path = _interopRequireDefault(require("path"));

var _asyncbox = require("asyncbox");

var _appiumSupport = require("appium-support");

var _utils = require("../uiauto/utils");

var _logger = _interopRequireDefault(require("../logger"));

var _appiumBaseDriver = require("appium-base-driver");

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

commands.getScreenshot = async function getScreenshot() {
  let guid = _uuidJs.default.create();

  let shotFile = `screenshot${guid}`;

  let shotFolder = _path.default.resolve(this.opts.tmpDir, 'appium-instruments/Run 1/');

  if (!(await _appiumSupport.fs.exists(shotFolder))) {
    _logger.default.debug(`Creating folder '${shotFolder}'`);

    await (0, _appiumSupport.mkdirp)(shotFolder);
  }

  let shotPath = _path.default.resolve(shotFolder, `${shotFile}.png`);

  _logger.default.debug(`Taking screenshot: '${shotPath}'`);

  let takeScreenShot = async () => {
    await this.uiAutoClient.sendCommand(`au.capture('${shotFile}')`);
    let screenshotWaitTimeout = (this.opts.screenshotWaitTimeout || 10) * 1000;

    _logger.default.debug(`Waiting ${screenshotWaitTimeout} ms for screenshot to be generated.`);

    let startMs = Date.now();
    let success = false;

    while (Date.now() - startMs < screenshotWaitTimeout) {
      if (await _appiumSupport.fs.hasAccess(shotPath)) {
        success = true;
        break;
      }

      await _bluebird.default.delay(300);
    }

    if (!success) {
      throw new _appiumBaseDriver.errors.UnknownError('Timed out waiting for screenshot file');
    }

    if ((await this.getOrientation()) === 'LANDSCAPE') {
      _logger.default.debug('Rotating landscape screenshot');

      await (0, _utils.rotateImage)(shotPath, -90);
    }

    return await _appiumSupport.fs.readFile(shotPath);
  };

  let data = await (0, _asyncbox.retry)(3, takeScreenShot);
  return Buffer.from(data).toString('base64');
};

commands.getViewportScreenshot = async function getViewportScreenshot() {
  const windowSize = await this.getWindowSize();
  const scale = await this.getDevicePixelRatio();
  const statusBarHeight = (await this.getStatusBarHeight()) * scale;
  const screenshot = await this.getScreenshot();
  let rect = {
    left: 0,
    top: statusBarHeight,
    width: windowSize.width * scale,
    height: windowSize.height * scale - statusBarHeight
  };
  let newScreenshot = await _appiumSupport.imageUtil.cropBase64Image(screenshot, rect);
  return newScreenshot;
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9zY3JlZW5zaG90LmpzIl0sIm5hbWVzIjpbImNvbW1hbmRzIiwiaGVscGVycyIsImV4dGVuc2lvbnMiLCJnZXRTY3JlZW5zaG90IiwiZ3VpZCIsInV1aWQiLCJjcmVhdGUiLCJzaG90RmlsZSIsInNob3RGb2xkZXIiLCJwYXRoIiwicmVzb2x2ZSIsIm9wdHMiLCJ0bXBEaXIiLCJmcyIsImV4aXN0cyIsImxvZ2dlciIsImRlYnVnIiwic2hvdFBhdGgiLCJ0YWtlU2NyZWVuU2hvdCIsInVpQXV0b0NsaWVudCIsInNlbmRDb21tYW5kIiwic2NyZWVuc2hvdFdhaXRUaW1lb3V0Iiwic3RhcnRNcyIsIkRhdGUiLCJub3ciLCJzdWNjZXNzIiwiaGFzQWNjZXNzIiwiQiIsImRlbGF5IiwiZXJyb3JzIiwiVW5rbm93bkVycm9yIiwiZ2V0T3JpZW50YXRpb24iLCJyZWFkRmlsZSIsImRhdGEiLCJCdWZmZXIiLCJmcm9tIiwidG9TdHJpbmciLCJnZXRWaWV3cG9ydFNjcmVlbnNob3QiLCJ3aW5kb3dTaXplIiwiZ2V0V2luZG93U2l6ZSIsInNjYWxlIiwiZ2V0RGV2aWNlUGl4ZWxSYXRpbyIsInN0YXR1c0JhckhlaWdodCIsImdldFN0YXR1c0JhckhlaWdodCIsInNjcmVlbnNob3QiLCJyZWN0IiwibGVmdCIsInRvcCIsIndpZHRoIiwiaGVpZ2h0IiwibmV3U2NyZWVuc2hvdCIsImltYWdlVXRpbCIsImNyb3BCYXNlNjRJbWFnZSIsIk9iamVjdCIsImFzc2lnbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFHQSxJQUFJQSxRQUFRLEdBQUcsRUFBZjtBQUFBLElBQW1CQyxPQUFPLEdBQUcsRUFBN0I7QUFBQSxJQUFpQ0MsVUFBVSxHQUFHLEVBQTlDOzs7O0FBRUFGLFFBQVEsQ0FBQ0csYUFBVCxHQUF5QixlQUFlQSxhQUFmLEdBQWdDO0FBQ3ZELE1BQUlDLElB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Q0QsQ0FkRDs7QUFnQkFHLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjcEQsVUFBZCxFQUEwQkYsUUFBMUIsRUFBb0NDLE9BQXBDO2VBRWVDLFUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdXVpZCBmcm9tICd1dWlkLWpzJztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgcmV0cnkgfSBmcm9tICdhc3luY2JveCc7XG5pbXBvcnQgeyBmcywgbWtkaXJwLCBpbWFnZVV0aWwgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgeyByb3RhdGVJbWFnZSB9IGZyb20gJy4uL3VpYXV0by91dGlscyc7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4uL2xvZ2dlcic7XG5pbXBvcnQgeyBlcnJvcnMgfSBmcm9tICdhcHBpdW0tYmFzZS1kcml2ZXInO1xuXG5cbmxldCBjb21tYW5kcyA9IHt9LCBoZWxwZXJzID0ge30sIGV4dGVuc2lvbnMgPSB7fTtcblxuY29tbWFuZHMuZ2V0U2NyZWVuc2hvdCA9IGFzeW5jIGZ1bmN0aW9uIGdldFNjcmVlbnNob3QgKCkge1xuICBsZXQgZ3VpZCA9IHV1aWQuY3JlYXRlKCk7XG4gIGxldCBzaG90RmlsZSA9IGBzY3JlZW5zaG90JHtndWlkfWA7XG5cbiAgbGV0IHNob3RGb2xkZXIgPSBwYXRoLnJlc29sdmUodGhpcy5vcHRzLnRtcERpciwgJ2FwcGl1bS1pbnN0cnVtZW50cy9SdW4gMS8nKTtcbiAgaWYgKCEoYXdhaXQgZnMuZXhpc3RzKHNob3RGb2xkZXIpKSkge1xuICAgIGxvZ2dlci5kZWJ1ZyhgQ3JlYXRpbmcgZm9sZGVyICcke3Nob3RGb2xkZXJ9J2ApO1xuICAgIGF3YWl0IG1rZGlycChzaG90Rm9sZGVyKTtcbiAgfVxuXG4gIGxldCBzaG90UGF0aCA9IHBhdGgucmVzb2x2ZShzaG90Rm9sZGVyLCBgJHtzaG90RmlsZX0ucG5nYCk7XG4gIGxvZ2dlci5kZWJ1ZyhgVGFraW5nIHNjcmVlbnNob3Q6ICcke3Nob3RQYXRofSdgKTtcblxuICBsZXQgdGFrZVNjcmVlblNob3QgPSBhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgdGhpcy51aUF1dG9DbGllbnQuc2VuZENvbW1hbmQoYGF1LmNhcHR1cmUoJyR7c2hvdEZpbGV9JylgKTtcblxuICAgIGxldCBzY3JlZW5zaG90V2FpdFRpbWVvdXQgPSAodGhpcy5vcHRzLnNjcmVlbnNob3RXYWl0VGltZW91dCB8fCAxMCkgKiAxMDAwO1xuICAgIGxvZ2dlci5kZWJ1ZyhgV2FpdGluZyAke3NjcmVlbnNob3RXYWl0VGltZW91dH0gbXMgZm9yIHNjcmVlbnNob3QgdG8gYmUgZ2VuZXJhdGVkLmApO1xuICAgIGxldCBzdGFydE1zID0gRGF0ZS5ub3coKTtcblxuICAgIGxldCBzdWNjZXNzID0gZmFsc2U7XG4gICAgd2hpbGUgKChEYXRlLm5vdygpIC0gc3RhcnRNcykgPCBzY3JlZW5zaG90V2FpdFRpbWVvdXQpIHtcbiAgICAgIGlmIChhd2FpdCBmcy5oYXNBY2Nlc3Moc2hvdFBhdGgpKSB7XG4gICAgICAgIHN1Y2Nlc3MgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGF3YWl0IEIuZGVsYXkoMzAwKTtcbiAgICB9XG4gICAgaWYgKCFzdWNjZXNzKSB7XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLlVua25vd25FcnJvcignVGltZWQgb3V0IHdhaXRpbmcgZm9yIHNjcmVlbnNob3QgZmlsZScpO1xuICAgIH1cblxuICAgIC8vIGNoZWNrIHRoZSByb3RhdGlvbiwgYW5kIHJvdGF0ZSBpZiBuZWNlc3NhcnlcbiAgICBpZiAoYXdhaXQgdGhpcy5nZXRPcmllbnRhdGlvbigpID09PSAnTEFORFNDQVBFJykge1xuICAgICAgbG9nZ2VyLmRlYnVnKCdSb3RhdGluZyBsYW5kc2NhcGUgc2NyZWVuc2hvdCcpO1xuICAgICAgYXdhaXQgcm90YXRlSW1hZ2Uoc2hvdFBhdGgsIC05MCk7XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCBmcy5yZWFkRmlsZShzaG90UGF0aCk7XG4gIH07XG5cbiAgLy8gUmV0cnlpbmcgdGhlIHdob2xlIHNjcmVlbnNob3QgcHJvY2VzcyBmb3IgdGhyZWUgdGltZXMuXG4gIGxldCBkYXRhID0gYXdhaXQgcmV0cnkoMywgdGFrZVNjcmVlblNob3QpO1xuICByZXR1cm4gQnVmZmVyLmZyb20oZGF0YSkudG9TdHJpbmcoJ2Jhc2U2NCcpO1xufTtcblxuY29tbWFuZHMuZ2V0Vmlld3BvcnRTY3JlZW5zaG90ID0gYXN5bmMgZnVuY3Rpb24gZ2V0Vmlld3BvcnRTY3JlZW5zaG90ICgpIHtcbiAgY29uc3Qgd2luZG93U2l6ZSA9IGF3YWl0IHRoaXMuZ2V0V2luZG93U2l6ZSgpO1xuICBjb25zdCBzY2FsZSA9IGF3YWl0IHRoaXMuZ2V0RGV2aWNlUGl4ZWxSYXRpbygpO1xuICAvLyBzdGF0dXMgYmFyIGhlaWdodCBjb21lcyBpbiB1bnNjYWxlZCwgc28gc2NhbGUgaXRcbiAgY29uc3Qgc3RhdHVzQmFySGVpZ2h0ID0gYXdhaXQgdGhpcy5nZXRTdGF0dXNCYXJIZWlnaHQoKSAqIHNjYWxlO1xuICBjb25zdCBzY3JlZW5zaG90ID0gYXdhaXQgdGhpcy5nZXRTY3JlZW5zaG90KCk7XG4gIGxldCByZWN0ID0ge1xuICAgIGxlZnQ6IDAsXG4gICAgdG9wOiBzdGF0dXNCYXJIZWlnaHQsXG4gICAgd2lkdGg6IHdpbmRvd1NpemUud2lkdGggKiBzY2FsZSxcbiAgICBoZWlnaHQ6IHdpbmRvd1NpemUuaGVpZ2h0ICogc2NhbGUgLSBzdGF0dXNCYXJIZWlnaHRcbiAgfTtcbiAgbGV0IG5ld1NjcmVlbnNob3QgPSBhd2FpdCBpbWFnZVV0aWwuY3JvcEJhc2U2NEltYWdlKHNjcmVlbnNob3QsIHJlY3QpO1xuICByZXR1cm4gbmV3U2NyZWVuc2hvdDtcbn07XG5cbk9iamVjdC5hc3NpZ24oZXh0ZW5zaW9ucywgY29tbWFuZHMsIGhlbHBlcnMpO1xuZXhwb3J0IHtjb21tYW5kcywgaGVscGVyc307XG5leHBvcnQgZGVmYXVsdCBleHRlbnNpb25zO1xuIl0sImZpbGUiOiJsaWIvY29tbWFuZHMvc2NyZWVuc2hvdC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
