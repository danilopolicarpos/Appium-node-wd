"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

require("source-map-support/register");

var _appiumBaseDriver = require("appium-base-driver");

var _lodash = _interopRequireDefault(require("lodash"));

var _url = _interopRequireDefault(require("url"));

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("../logger"));

var _appiumIosSimulator = require("appium-ios-simulator");

var _server = require("../server");

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

commands.execute = async function execute(script, args) {
  if (script.match(/^mobile:/)) {
    script = script.replace(/^mobile:/, '').trim();
    return await this.executeMobile(script, _lodash.default.isArray(args) ? args[0] : args);
  } else {
    if (this.isWebContext()) {
      args = this.convertElementsForAtoms(args);
      return await this.executeAtom('execute_script', [script, args]);
    } else {
      return await this.uiAutoClient.sendCommand(script);
    }
  }
};

commands.executeAsync = async function executeAsync(script, args, sessionId) {
  if (!this.isWebContext()) {
    return await this.uiAutoClient.sendCommand(script);
  }

  let address = this.opts.callbackAddress || this.opts.address;
  let port = this.opts.callbackPort || this.opts.port;
  sessionId = sessionId || this.sessionId;
  let protocol = 'http:';

  try {
    let currentUrl = _url.default.parse((await this.getUrl()));

    if (currentUrl.protocol === 'https:' && this.opts.httpsCallbackPort && this.opts.httpsCallbackAddress) {
      protocol = currentUrl.protocol;
      port = this.opts.httpsCallbackPort;
      address = this.opts.httpsCallbackAddress;
    }
  } catch (ign) {}

  let responseUrl = `${protocol}//${address}:${port}/wd/hub/session/${sessionId}/receive_async_response`;

  if (this.isRealDevice()) {
    let defaultHost = this.opts.address;

    let urlObject = _url.default.parse(responseUrl);

    if (urlObject.hostname === defaultHost) {
      _logger.default.debug('Real device safari test and no custom callback address ' + 'set, changing callback address to local ip.');

      urlObject.hostname = _appiumSupport.util.localIp();
      urlObject.host = null;
      responseUrl = _url.default.format(urlObject);
    } else {
      _logger.default.debug('Custom callback address set, leaving as is.');
    }
  }

  _logger.default.debug(`Response url for executeAsync: ${responseUrl}`);

  args = this.convertElementsForAtoms(args);
  this.asyncWaitMs = this.asyncWaitMs || 0;
  return await this.executeAtomAsync('execute_async_script', [script, args, this.asyncWaitMs], responseUrl);
};

commands.receiveAsyncResponse = async function receiveAsyncResponse(status, value) {
  _logger.default.debug(`Received async response: ${JSON.stringify(value)}`);

  if (!_appiumSupport.util.hasValue(this.asyncPromise)) {
    _logger.default.warn(`Received async response when we were not expecting one! ` + `Response was: ${JSON.stringify(value)}`);

    return;
  }

  if (_appiumSupport.util.hasValue(status) && status !== 0) {
    return this.asyncPromise.reject((0, _appiumBaseDriver.errorFromCode)(status, value.message));
  }

  if (!_appiumSupport.util.hasValue(status) && value && _lodash.default.isString(value.error)) {
    return this.asyncPromise.reject((0, _appiumBaseDriver.errorFromW3CJsonCode)(value.error, value.message, value.stacktrace));
  }

  return this.asyncPromise.resolve(value);
};

helpers.startHttpsAsyncServer = async function startHttpsAsyncServer() {
  _logger.default.debug('Starting https server for async responses');

  let address = this.opts.callbackAddress || this.opts.address;
  let port = this.opts.callbackPort || this.opts.port;
  let {
    sslServer,
    pemCertificate,
    httpsPort
  } = await (0, _server.startHttpsServer)(port, address);
  this.opts.sslServer = sslServer;
  this.opts.httpsServerCertificate = pemCertificate;
  this.opts.httpsCallbackPort = httpsPort;
  this.opts.httpsCallbackAddress = 'localhost';
  let udid;

  if (this.sim) {
    udid = this.sim.udid;
  } else {
    udid = this.opts.udid;
  }

  await (0, _appiumIosSimulator.installSSLCert)(this.opts.httpsServerCertificate, udid);
};

helpers.stopHttpsAsyncServer = async function stopHttpsAsyncServer() {
  _logger.default.debug('Stopping https server for async responses');

  if (this.opts.sslServer) {
    await this.opts.sslServer.close();
  }

  await (0, _appiumIosSimulator.uninstallSSLCert)(this.opts.httpsServerCertificate, this.opts.udid);
};

commands.executeMobile = async function executeMobile(mobileCommand, opts = {}) {
  if (mobileCommand === 'scroll') {
    await this.mobileScroll(opts);
  } else if (mobileCommand === 'viewportScreenshot') {
    return await this.getViewportScreenshot();
  } else {
    throw new _appiumBaseDriver.errors.UnknownCommandError('Unknown command, all the mobile commands except scroll have been removed.');
  }
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
