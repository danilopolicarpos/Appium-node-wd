"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("../logger"));

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

commands.pageLoadTimeoutW3C = async function pageLoadTimeoutW3C(ms) {
  await this.setPageLoadTimeout(this.parseTimeoutArgument(ms));
};

commands.pageLoadTimeoutMJSONWP = async function pageLoadTimeoutMJSONWP(ms) {
  await this.setPageLoadTimeout(this.parseTimeoutArgument(ms));
};

commands.scriptTimeoutW3C = async function scriptTimeoutW3C(ms) {
  await this.asyncScriptTimeout(ms);
};

commands.scriptTimeoutMJSONWP = async function scriptTimeoutMJSONWP(ms) {
  await this.asyncScriptTimeout(ms);
};

commands.asyncScriptTimeout = async function asyncScriptTimeout(ms) {
  this.setAsyncScriptTimeout(this.parseTimeoutArgument(ms));
};

helpers.setPageLoadTimeout = function setPageLoadTimeout(ms) {
  ms = parseInt(ms, 10);
  this.pageLoadMs = ms;

  if (this.remote) {
    this.remote.pageLoadMs = this.pageLoadMs;
  }

  _logger.default.debug(`Set page load timeout to ${ms}ms`);
};

helpers.setAsyncScriptTimeout = function setAsyncScriptTimeout(ms) {
  this.asyncWaitMs = ms;

  _logger.default.debug(`Set async script timeout to ${ms}ms`);
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy90aW1lb3V0LmpzIl0sIm5hbWVzIjpbImNvbW1hbmRzIiwiaGVscGVycyIsImV4dGVuc2lvbnMiLCJwYWdlTG9hZFRpbWVvdXRXM0MiLCJtcyIsInNldFBhZ2VMb2FkVGltZW91dCIsInBhcnNlVGltZW91dEFyZ3VtZW50IiwicGFnZUxvYWRUaW1lb3V0TUpTT05XUCIsInNjcmlwdFRpbWVvdXRXM0MiLCJhc3luY1NjcmlwdFRpbWVvdXQiLCJzY3JpcHRUaW1lb3V0TUpTT05XUCIsInNldEFzeW5jU2NyaXB0VGltZW91dCIsInBhcnNlSW50IiwicGFnZUxvYWRNcyIsInJlbW90ZSIsImxvZ2dlciIsImRlYnVnIiwiYXN5bmNXYWl0TXMiLCJPYmplY3QiLCJhc3NpZ24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBRUEsSUFBSUEsUUFBUSxHQUFHLEVBQWY7QUFBQSxJQUFtQkMsT0FBTyxHQUFHLEVBQTdCO0FBQUEsSUFBaUNDLFVBQVUsR0FBRyxFQUE5Qzs7OztBQUdBRixRQUFRLENBQUNHLGtCQUFULEdBQThCLGVBQWVBLGtCQUFmLENBQW1DQyxFQUFuQyxFQUF1QztBQUNuRSxRQUFNLEtBQUtDLGtCQUFMLENBQXdCLEtBQUtDLG9CQUFMLENBQTBCRixFQUExQixDQUF4QixDQUFOO0FBQ0QsQ0FGRDs7QUFJQUosUUFBUSxDQUFDTyxzQkFBVCxHQUFrQyxlQUFlQSxzQkFBZixDQUF1Q0gsRUFBdkMsRUFBMkM7QUFDM0UsUUFBTSxLQUFLQyxrQkFBTCxDQUF3QixLQUFLQyxvQkFBTCxDQUEwQkYsRUFBMUIsQ0FBeEIsQ0FBTjtBQUNELENBRkQ7O0FBS0FKLFFBQVEsQ0FBQ1EsZ0JBQVQsR0FBNEIsZUFBZUEsZ0JBQWYsQ0FBaUNKLEVBQWpDLEVBQXFDO0FBQy9ELFFBQU0sS0FBS0ssa0JBQUwsQ0FBd0JMLEVBQXhCLENBQU47QUFDRCxDQUZEOztBQUlBSixRQUFRLENBQUNVLG9CQUFULEdBQWdDLGVBQWVBLG9CQUFmLENBQXFDTixFQUFyQyxFQUF5QztBQUN2RSxRQUFNLEtBQUtLLGtCQUFMLENBQXdCTCxFQUF4QixDQUFOO0FBQ0QsQ0FGRDs7QUFJQUosUUFBUSxDQUFDUyxrQkFBVCxHQUE4QixlQUFlQSxrQkFBZixDQUFtQ0wsRUFBbkMsRUFBdUM7QUFDbkUsT0FBS08scUJBQUwsQ0FBMkIsS0FBS0wsb0JBQUwsQ0FBMEJGLEVBQTFCLENBQTNCO0FBQ0QsQ0FGRDs7QUFJQUgsT0FBTyxDQUFDSSxrQkFBUixHQUE2QixTQUFTQSxrQkFBVCxDQUE2QkQsRUFBN0IsRUFBaUM7QUFDNURBLEVBQUFBLEVBQUUsR0FBR1EsUUFBUSxDQUFDUixFQUFELEVBQUssRUFBTCxDQUFiO0FBQ0EsT0FBS1MsVUFBTCxHQUFrQlQsRUFBbEI7O0FBQ0EsTUFBSSxLQUFLVSxNQUFULEVBQWlCO0FBQ2YsU0FBS0EsTUFBTCxDQUFZRCxVQUFaLEdBQXlCLEtBQUtBLFVBQTlCO0FBQ0Q7O0FBQ0RFLGtCQUFPQyxLQUFQLENBQWMsNEJBQTJCWixFQUFHLElBQTVDO0FBQ0QsQ0FQRDs7QUFTQUgsT0FBTyxDQUFDVSxxQkFBUixHQUFnQyxTQUFTQSxxQkFBVCxDQUFnQ1AsRUFBaEMsRUFBb0M7QUFDbEUsT0FBS2EsV0FBTCxHQUFtQmIsRUFBbkI7O0FBQ0FXLGtCQUFPQyxLQUFQLENBQWMsK0JBQThCWixFQUFHLElBQS9DO0FBQ0QsQ0FIRDs7QUFLQWMsTUFBTSxDQUFDQyxNQUFQLENBQWNqQixVQUFkLEVBQTBCRixRQUExQixFQUFvQ0MsT0FBcEM7ZUFFZUMsVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBsb2dnZXIgZnJvbSAnLi4vbG9nZ2VyJztcblxubGV0IGNvbW1hbmRzID0ge30sIGhlbHBlcnMgPSB7fSwgZXh0ZW5zaW9ucyA9IHt9O1xuXG4vLyBwYWdlTG9hZFxuY29tbWFuZHMucGFnZUxvYWRUaW1lb3V0VzNDID0gYXN5bmMgZnVuY3Rpb24gcGFnZUxvYWRUaW1lb3V0VzNDIChtcykge1xuICBhd2FpdCB0aGlzLnNldFBhZ2VMb2FkVGltZW91dCh0aGlzLnBhcnNlVGltZW91dEFyZ3VtZW50KG1zKSk7XG59O1xuXG5jb21tYW5kcy5wYWdlTG9hZFRpbWVvdXRNSlNPTldQID0gYXN5bmMgZnVuY3Rpb24gcGFnZUxvYWRUaW1lb3V0TUpTT05XUCAobXMpIHtcbiAgYXdhaXQgdGhpcy5zZXRQYWdlTG9hZFRpbWVvdXQodGhpcy5wYXJzZVRpbWVvdXRBcmd1bWVudChtcykpO1xufTtcblxuLy8gc2NyaXB0XG5jb21tYW5kcy5zY3JpcHRUaW1lb3V0VzNDID0gYXN5bmMgZnVuY3Rpb24gc2NyaXB0VGltZW91dFczQyAobXMpIHtcbiAgYXdhaXQgdGhpcy5hc3luY1NjcmlwdFRpbWVvdXQobXMpO1xufTtcblxuY29tbWFuZHMuc2NyaXB0VGltZW91dE1KU09OV1AgPSBhc3luYyBmdW5jdGlvbiBzY3JpcHRUaW1lb3V0TUpTT05XUCAobXMpIHtcbiAgYXdhaXQgdGhpcy5hc3luY1NjcmlwdFRpbWVvdXQobXMpO1xufTtcblxuY29tbWFuZHMuYXN5bmNTY3JpcHRUaW1lb3V0ID0gYXN5bmMgZnVuY3Rpb24gYXN5bmNTY3JpcHRUaW1lb3V0IChtcykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtYXdhaXRcbiAgdGhpcy5zZXRBc3luY1NjcmlwdFRpbWVvdXQodGhpcy5wYXJzZVRpbWVvdXRBcmd1bWVudChtcykpO1xufTtcblxuaGVscGVycy5zZXRQYWdlTG9hZFRpbWVvdXQgPSBmdW5jdGlvbiBzZXRQYWdlTG9hZFRpbWVvdXQgKG1zKSB7XG4gIG1zID0gcGFyc2VJbnQobXMsIDEwKTtcbiAgdGhpcy5wYWdlTG9hZE1zID0gbXM7XG4gIGlmICh0aGlzLnJlbW90ZSkge1xuICAgIHRoaXMucmVtb3RlLnBhZ2VMb2FkTXMgPSB0aGlzLnBhZ2VMb2FkTXM7XG4gIH1cbiAgbG9nZ2VyLmRlYnVnKGBTZXQgcGFnZSBsb2FkIHRpbWVvdXQgdG8gJHttc31tc2ApO1xufTtcblxuaGVscGVycy5zZXRBc3luY1NjcmlwdFRpbWVvdXQgPSBmdW5jdGlvbiBzZXRBc3luY1NjcmlwdFRpbWVvdXQgKG1zKSB7XG4gIHRoaXMuYXN5bmNXYWl0TXMgPSBtcztcbiAgbG9nZ2VyLmRlYnVnKGBTZXQgYXN5bmMgc2NyaXB0IHRpbWVvdXQgdG8gJHttc31tc2ApO1xufTtcblxuT2JqZWN0LmFzc2lnbihleHRlbnNpb25zLCBjb21tYW5kcywgaGVscGVycyk7XG5leHBvcnQgeyBjb21tYW5kcywgaGVscGVycyB9O1xuZXhwb3J0IGRlZmF1bHQgZXh0ZW5zaW9ucztcbiJdLCJmaWxlIjoibGliL2NvbW1hbmRzL3RpbWVvdXQuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
