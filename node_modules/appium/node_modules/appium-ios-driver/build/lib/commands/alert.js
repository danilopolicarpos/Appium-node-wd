"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

require("source-map-support/register");

var _appiumSupport = require("appium-support");

var _appiumBaseDriver = require("appium-base-driver");

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

function handleError(err) {
  if (err.message && err.message.match(/not open/)) {
    throw new _appiumBaseDriver.errors.NoAlertOpenError();
  } else {
    throw err;
  }
}

commands.getAlertText = async function getAlertText() {
  try {
    let ret = await this.uiAutoClient.sendCommand('au.getAlertText()');
    return ret;
  } catch (err) {
    handleError(err);
  }
};

commands.setAlertText = async function setAlertText(text) {
  try {
    text = _appiumSupport.util.escapeSpecialChars(text, "'");
    await this.uiAutoClient.sendCommand(`au.setAlertText('${text}')`);
  } catch (err) {
    handleError(err);
  }
};

commands.postAcceptAlert = async function postAcceptAlert() {
  try {
    await this.uiAutoClient.sendCommand('au.acceptAlert()');
  } catch (err) {
    handleError(err);
  }
};

commands.postDismissAlert = async function postDismissAlert() {
  try {
    await this.uiAutoClient.sendCommand('au.dismissAlert()');
  } catch (err) {
    handleError(err);
  }
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9hbGVydC5qcyJdLCJuYW1lcyI6WyJjb21tYW5kcyIsImhlbHBlcnMiLCJleHRlbnNpb25zIiwiaGFuZGxlRXJyb3IiLCJlcnIiLCJtZXNzYWdlIiwibWF0Y2giLCJlcnJvcnMiLCJOb0FsZXJ0T3BlbkVycm9yIiwiZ2V0QWxlcnRUZXh0IiwicmV0IiwidWlBdXRvQ2xpZW50Iiwic2VuZENvbW1hbmQiLCJzZXRBbGVydFRleHQiLCJ0ZXh0IiwidXRpbCIsImVzY2FwZVNwZWNpYWxDaGFycyIsInBvc3RBY2NlcHRBbGVydCIsInBvc3REaXNtaXNzQWxlcnQiLCJPYmplY3QiLCJhc3NpZ24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUlBOztBQURBLElBQUlBLFFBQVEsR0FBRyxFQUFmO0FBQUEsSUFBbUJDLE9BQU8sR0FBRyxFQUE3QjtBQUFBLElBQWlDQyxVQUFVLEdBQUcsRUFBOUM7Ozs7QUFHQSxTQUFTQyxXQUFULENBQXNCQyxHQUF0QixFQUEyQjtBQUN6QixNQUFJQSxHQUFHLENBQUNDLE9BQUosSUFBZUQsR0FBRyxDQUFDQyxPQUFKLENBQVlDLEtBQVosQ0FBa0IsVUFBbEIsQ0FBbkIsRUFBa0Q7QUFDaEQsVUFBTSxJQUFJQyx5QkFBT0MsZ0JBQVgsRUFBTjtBQUNELEdBRkQsTUFFTztBQUNMLFVBQU1KLEdBQU47QUFDRDtBQUNGOztBQUVESixRQUFRLENBQUNTLFlBQVQsR0FBd0IsZUFBZUEsWUFBZixHQUErQjtBQUNyRCxNQUFJO0FBQ0YsUUFBSUMsR0FBRyxHQUFHLE1BQU0sS0FBS0MsWUFBTCxDQUFrQkMsV0FBbEIsQ0FBOEIsbUJBQTlCLENBQWhCO0FBQ0EsV0FBT0YsR0FBUDtBQUNELEdBSEQsQ0FHRSxPQUFPTixHQUFQLEVBQVk7QUFDWkQsSUFBQUEsV0FBVyxDQUFDQyxHQUFELENBQVg7QUFDRDtBQUNGLENBUEQ7O0FBU0FKLFFBQVEsQ0FBQ2EsWUFBVCxHQUF3QixlQUFlQSxZQUFmLENBQTZCQyxJQUE3QixFQUFtQztBQUN6RCxNQUFJO0FBQ0ZBLElBQUFBLElBQUksR0FBR0Msb0JBQUtDLGtCQUFMLENBQXdCRixJQUF4QixFQUE4QixHQUE5QixDQUFQO0FBQ0EsVUFBTSxLQUFLSCxZQUFMLENBQWtCQyxXQUFsQixDQUErQixvQkFBbUJFLElBQUssSUFBdkQsQ0FBTjtBQUNELEdBSEQsQ0FHRSxPQUFPVixHQUFQLEVBQVk7QUFDWkQsSUFBQUEsV0FBVyxDQUFDQyxHQUFELENBQVg7QUFDRDtBQUNGLENBUEQ7O0FBU0FKLFFBQVEsQ0FBQ2lCLGVBQVQsR0FBMkIsZUFBZUEsZUFBZixHQUFrQztBQUMzRCxNQUFJO0FBQ0YsVUFBTSxLQUFLTixZQUFMLENBQWtCQyxXQUFsQixDQUE4QixrQkFBOUIsQ0FBTjtBQUNELEdBRkQsQ0FFRSxPQUFPUixHQUFQLEVBQVk7QUFDWkQsSUFBQUEsV0FBVyxDQUFDQyxHQUFELENBQVg7QUFDRDtBQUNGLENBTkQ7O0FBUUFKLFFBQVEsQ0FBQ2tCLGdCQUFULEdBQTRCLGVBQWVBLGdCQUFmLEdBQW1DO0FBQzdELE1BQUk7QUFDRixVQUFNLEtBQUtQLFlBQUwsQ0FBa0JDLFdBQWxCLENBQThCLG1CQUE5QixDQUFOO0FBQ0QsR0FGRCxDQUVFLE9BQU9SLEdBQVAsRUFBWTtBQUNaRCxJQUFBQSxXQUFXLENBQUNDLEdBQUQsQ0FBWDtBQUNEO0FBQ0YsQ0FORDs7QUFRQWUsTUFBTSxDQUFDQyxNQUFQLENBQWNsQixVQUFkLEVBQTBCRixRQUExQixFQUFvQ0MsT0FBcEM7ZUFFZUMsVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHV0aWwgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5cblxubGV0IGNvbW1hbmRzID0ge30sIGhlbHBlcnMgPSB7fSwgZXh0ZW5zaW9ucyA9IHt9O1xuaW1wb3J0IHsgZXJyb3JzIH0gZnJvbSAnYXBwaXVtLWJhc2UtZHJpdmVyJztcblxuZnVuY3Rpb24gaGFuZGxlRXJyb3IgKGVycikge1xuICBpZiAoZXJyLm1lc3NhZ2UgJiYgZXJyLm1lc3NhZ2UubWF0Y2goL25vdCBvcGVuLykpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLk5vQWxlcnRPcGVuRXJyb3IoKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBlcnI7XG4gIH1cbn1cblxuY29tbWFuZHMuZ2V0QWxlcnRUZXh0ID0gYXN5bmMgZnVuY3Rpb24gZ2V0QWxlcnRUZXh0ICgpIHtcbiAgdHJ5IHtcbiAgICBsZXQgcmV0ID0gYXdhaXQgdGhpcy51aUF1dG9DbGllbnQuc2VuZENvbW1hbmQoJ2F1LmdldEFsZXJ0VGV4dCgpJyk7XG4gICAgcmV0dXJuIHJldDtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaGFuZGxlRXJyb3IoZXJyKTtcbiAgfVxufTtcblxuY29tbWFuZHMuc2V0QWxlcnRUZXh0ID0gYXN5bmMgZnVuY3Rpb24gc2V0QWxlcnRUZXh0ICh0ZXh0KSB7XG4gIHRyeSB7XG4gICAgdGV4dCA9IHV0aWwuZXNjYXBlU3BlY2lhbENoYXJzKHRleHQsIFwiJ1wiKTtcbiAgICBhd2FpdCB0aGlzLnVpQXV0b0NsaWVudC5zZW5kQ29tbWFuZChgYXUuc2V0QWxlcnRUZXh0KCcke3RleHR9JylgKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaGFuZGxlRXJyb3IoZXJyKTtcbiAgfVxufTtcblxuY29tbWFuZHMucG9zdEFjY2VwdEFsZXJ0ID0gYXN5bmMgZnVuY3Rpb24gcG9zdEFjY2VwdEFsZXJ0ICgpIHtcbiAgdHJ5IHtcbiAgICBhd2FpdCB0aGlzLnVpQXV0b0NsaWVudC5zZW5kQ29tbWFuZCgnYXUuYWNjZXB0QWxlcnQoKScpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBoYW5kbGVFcnJvcihlcnIpO1xuICB9XG59O1xuXG5jb21tYW5kcy5wb3N0RGlzbWlzc0FsZXJ0ID0gYXN5bmMgZnVuY3Rpb24gcG9zdERpc21pc3NBbGVydCAoKSB7XG4gIHRyeSB7XG4gICAgYXdhaXQgdGhpcy51aUF1dG9DbGllbnQuc2VuZENvbW1hbmQoJ2F1LmRpc21pc3NBbGVydCgpJyk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGhhbmRsZUVycm9yKGVycik7XG4gIH1cbn07XG5cbk9iamVjdC5hc3NpZ24oZXh0ZW5zaW9ucywgY29tbWFuZHMsIGhlbHBlcnMpO1xuZXhwb3J0IHsgY29tbWFuZHMsIGhlbHBlcnMgfTtcbmV4cG9ydCBkZWZhdWx0IGV4dGVuc2lvbnM7XG4iXSwiZmlsZSI6ImxpYi9jb21tYW5kcy9hbGVydC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
