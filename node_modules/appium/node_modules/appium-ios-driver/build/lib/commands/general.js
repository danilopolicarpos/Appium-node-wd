"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

require("source-map-support/register");

var _appiumBaseDriver = require("appium-base-driver");

var _lodash = _interopRequireDefault(require("lodash"));

var _js2xmlparser = _interopRequireDefault(require("js2xmlparser2"));

var _logger = _interopRequireDefault(require("../logger"));

var _appiumSupport = require("appium-support");

var _teen_process = require("teen_process");

var utils = _interopRequireWildcard(require("../utils"));

var _nodeSimctl = require("node-simctl");

var _moment = _interopRequireDefault(require("moment"));

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;
const MOMENT_FORMAT_ISO8601 = 'YYYY-MM-DDTHH:mm:ssZ';

commands.active = async function active() {
  if (this.isWebContext()) {
    return await this.executeAtom('active_element', []);
  } else {
    return await this.uiAutoClient.sendCommand('au.getActiveElement()');
  }
};

commands.getDeviceTime = async function getDeviceTime(format = MOMENT_FORMAT_ISO8601) {
  _logger.default.info('Attempting to capture iOS device date and time');

  let cmd;
  let args;
  let inputFormat;

  if (this.isRealDevice()) {
    try {
      cmd = await _appiumSupport.fs.which('idevicedate');
    } catch (err) {
      _logger.default.errorAndThrow('Could not capture device date and time using libimobiledevice idevicedate. ' + 'Libimobiledevice is probably not installed');
    }

    _logger.default.info(`Found idevicedate: '${cmd}'`);

    args = ['-u', this.opts.udid];
    inputFormat = 'ddd MMM DD HH:mm:ss z YYYY';
  } else {
    _logger.default.warn('On simulator. Assuming device time is the same as host time');

    cmd = 'date';
    args = ['+%Y-%m-%dT%H:%M:%S%z'];
    inputFormat = MOMENT_FORMAT_ISO8601;
  }

  const stdout = (await (0, _teen_process.exec)(cmd, args)).stdout.trim();

  _logger.default.debug(`Got the following output out of '${cmd} ${args.join(' ')}': ${stdout}`);

  const parsedTimestamp = (0, _moment.default)(stdout, inputFormat);

  if (!parsedTimestamp.isValid()) {
    _logger.default.warn(`Cannot parse the timestamp '${stdout}' returned by '${cmd}' command. Returning it as is`);

    return stdout;
  }

  return parsedTimestamp.format(format);
};

commands.hideKeyboard = async function hideKeyboard(strategy, ...possibleKeys) {
  possibleKeys.pop();
  let cmd;

  let key = _lodash.default.find(possibleKeys, k => {
    return k;
  });

  if (key) {
    strategy = strategy || 'pressKey';
    cmd = `au.hideKeyboard('${strategy}', '${key}')`;
  } else {
    strategy = strategy || 'default';
    cmd = `au.hideKeyboard('${strategy}')`;
  }

  await this.uiAutoClient.sendCommand(cmd);
};

commands.getPageSource = async function getPageSource() {
  if (this.isWebContext()) {
    const script = 'return document.documentElement.outerHTML';
    return await this.executeAtom('execute_script', [script, []]);
  } else {
    return await this.getNativePageSource();
  }
};

helpers.getNativePageSource = async function getNativePageSource() {
  let jsonSource = await this.getSourceForElementForXML();

  if (typeof jsonSource === 'string') {
    jsonSource = JSON.parse(jsonSource);
  }

  let xmlSource = (0, _js2xmlparser.default)('AppiumAUT', jsonSource, {
    wrapArray: {
      enabled: false,
      elementName: 'element'
    },
    declaration: {
      include: true
    },
    prettyPrinting: {
      indentString: '    '
    }
  });
  return xmlSource;
};

commands.background = async function background(secs) {
  await this.uiAutoClient.sendCommand(`au.background(${secs})`);
};

commands.lock = async function lock(secs) {
  if (!secs) {
    _logger.default.debug('No seconds parameter. Using 0 seconds');

    secs = 0;
  }

  await this.uiAutoClient.sendCommand(`au.lock(${secs})`);
};

commands.closeApp = async function closeApp() {
  let appName = this.opts.app || this.opts.bundleId;

  try {
    await this.stop();

    _logger.default.info(`Successfully closed the '${appName}' app.`);
  } catch (err) {
    _logger.default.warn(`Something went wrong while closing the '${appName}' app.`);

    throw err;
  }
};

commands.launchApp = async function launchApp() {
  let appName = this.opts.app || this.opts.bundleId;

  try {
    await this.start();

    _logger.default.info(`Successfully launched the '${appName}' app.`);
  } catch (err) {
    _logger.default.warn(`Something went wrong while launching the '${appName}' app.`);

    throw err;
  }
};

commands.removeApp = async function removeApp(bundleId) {
  if (this.isRealDevice()) {
    await this.realDevice.remove(bundleId);
  } else {
    await this.sim.removeApp(bundleId);
  }
};

commands.keys = async function keys(keys) {
  if (this.isWebContext()) {
    let el = await this.active();

    if (_lodash.default.isUndefined(el.ELEMENT)) {
      throw new _appiumBaseDriver.errors.NoSuchElementError();
    }

    await this.setValue(keys, el.ELEMENT);
  } else {
    if (_lodash.default.isArray(keys)) {
      keys = keys.join('');
    }

    if (!_lodash.default.isString(keys)) {
      keys = keys.toString();
    }

    keys = _appiumSupport.util.escapeSpecialChars(keys, "'");
    let command = `au.sendKeysToActiveElement('${keys}')`;
    await this.uiAutoClient.sendCommand(command);
  }
};

commands.setGeoLocation = async function setGeoLocation(location) {
  await this.uiAutoClient.sendCommand(`target.setLocation(${JSON.stringify(location)})`);
};

commands.getWindowSize = async function getWindowSize(windowHandle = 'current') {
  if (windowHandle !== 'current') {
    throw new _appiumBaseDriver.errors.NotYetImplementedError('Currently only getting current window size is supported.');
  }

  if (this.isWebContext()) {
    return await this.executeAtom('get_window_size', []);
  } else {
    return await this.uiAutoClient.sendCommand('au.getWindowSize()');
  }
};

commands.getWindowRect = async function getWindowRect() {
  const {
    width,
    height
  } = await this.getWindowSize();
  return {
    width,
    height,
    x: 0,
    y: 0
  };
};

commands.getStrings = async function getStrings(language, stringFile = null) {
  _logger.default.debug(`Gettings strings for language '${language}' and string file '${stringFile}'`);

  return await utils.parseLocalizableStrings(Object.assign({}, this.opts, {
    language,
    stringFile,
    strictMode: true
  }));
};

commands.setUrl = async function setUrl(url) {
  _logger.default.debug(`Attempting to set url '${url}'`);

  if (!this.isWebContext()) {
    await (0, _nodeSimctl.openUrl)(this.opts.udid || this.sim.udid, url);
    return;
  }

  this.setCurrentUrl(url);
  this.curWebFrames = [];
  await this.remote.navToUrl(url);
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9nZW5lcmFsLmpzIl0sIm5hbWVzIjpbImNvbW1hbmRzIiwiaGVscGVycyIsImV4dGVuc2lvbnMiLCJNT01FTlRfRk9STUFUX0lTTzg2MDEiLCJhY3RpdmUiLCJpc1dlYkNvbnRleHQiLCJleGVjdXRlQXRvbSIsInVpQXV0b0NsaWVudCIsInNlbmRDb21tYW5kIiwiZ2V0RGV2aWNlVGltZSIsImZvcm1hdCIsImxvZyIsImluZm8iLCJjbWQiLCJhcmdzIiwiaW5wdXRGb3JtYXQiLCJpc1JlYWxEZXZpY2UiLCJmcyIsIndoaWNoIiwiZXJyIiwiZXJyb3JBbmRUaHJvdyIsIm9wdHMiLCJ1ZGlkIiwid2FybiIsInN0ZG91dCIsInRyaW0iLCJkZWJ1ZyIsImpvaW4iLCJwYXJzZWRUaW1lc3RhbXAiLCJpc1ZhbGlkIiwiaGlkZUtleWJvYXJkIiwic3RyYXRlZ3kiLCJwb3NzaWJsZUtleXMiLCJwb3AiLCJrZXkiLCJfIiwiZmluZCIsImsiLCJnZXRQYWdlU291cmNlIiwic2NyaXB0IiwiZ2V0TmF0aXZlUGFnZVNvdXJjZSIsImpzb25Tb3VyY2UiLCJnZXRTb3VyY2VGb3JFbGVtZW50Rm9yWE1MIiwiSlNPTiIsInBhcnNlIiwieG1sU291cmNlIiwid3JhcEFycmF5IiwiZW5hYmxlZCIsImVsZW1lbnROYW1lIiwiZGVjbGFyYXRpb24iLCJpbmNsdWRlIiwicHJldHR5UHJpbnRpbmciLCJpbmRlbnRTdHJpbmciLCJiYWNrZ3JvdW5kIiwic2VjcyIsImxvY2siLCJjbG9zZUFwcCIsImFwcE5hbWUiLCJhcHAiLCJidW5kbGVJZCIsInN0b3AiLCJsYXVuY2hBcHAiLCJzdGFydCIsInJlbW92ZUFwcCIsInJlYWxEZXZpY2UiLCJyZW1vdmUiLCJzaW0iLCJrZXlzIiwiZWwiLCJpc1VuZGVmaW5lZCIsIkVMRU1FTlQiLCJlcnJvcnMiLCJOb1N1Y2hFbGVtZW50RXJyb3IiLCJzZXRWYWx1ZSIsImlzQXJyYXkiLCJpc1N0cmluZyIsInRvU3RyaW5nIiwidXRpbCIsImVzY2FwZVNwZWNpYWxDaGFycyIsImNvbW1hbmQiLCJzZXRHZW9Mb2NhdGlvbiIsImxvY2F0aW9uIiwic3RyaW5naWZ5IiwiZ2V0V2luZG93U2l6ZSIsIndpbmRvd0hhbmRsZSIsIk5vdFlldEltcGxlbWVudGVkRXJyb3IiLCJnZXRXaW5kb3dSZWN0Iiwid2lkdGgiLCJoZWlnaHQiLCJ4IiwieSIsImdldFN0cmluZ3MiLCJsYW5ndWFnZSIsInN0cmluZ0ZpbGUiLCJ1dGlscyIsInBhcnNlTG9jYWxpemFibGVTdHJpbmdzIiwiT2JqZWN0IiwiYXNzaWduIiwic3RyaWN0TW9kZSIsInNldFVybCIsInVybCIsInNldEN1cnJlbnRVcmwiLCJjdXJXZWJGcmFtZXMiLCJyZW1vdGUiLCJuYXZUb1VybCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBLElBQUlBLFFBQVEsR0FBRyxFQUFmO0FBQUEsSUFBbUJDLE9BQU8sR0FBRyxFQUE3QjtBQUFBLElBQWlDQyxVQUFVLEdBQUcsRUFBOUM7OztBQUVBLE1BQU1DLHFCQUFxQixHQUFHLHNCQUE5Qjs7QUFFQUgsUUFBUSxDQUFDSSxNQUFULEdBQWtCLGVBQWVBLE1BQWYsR0FBeUI7QUFDekMsTUFBSSxLQUFLQyxZQUFMLEVBQUosRUFBeUI7QUFDdkIsV0FBTyxNQUFNLEtBQUtDLFdBQUwsQ0FBaUIsZ0JBQWpCLEVBQW1DLEVBQW5DLENBQWI7QUFDRCxHQUZELE1BRU87QUFDTCxXQUFPLE1BQU0sS0FBS0MsWUFBTCxDQUFrQkMsV0FBbEIsQ0FBOEIsdUJBQTlCLENBQWI7QUFDRDtBQUNGLENBTkQ7O0FBaUJBUixRQUFRLENBQUNTLGFBQVQsR0FBeUIsZUFBZUEsYUFBZixDQUE4QkMsTUFBTSxHQUFHUCxxQkFBdkMsRUFBOEQ7QUFDckZRLGtCQUFJQyxJQUFKLENBQVMsZ0RBQVQ7O0FBQ0EsTUFBSUMsR0FBSjtBQUNBLE1BQUlDLElBQUo7QUFDQSxNQUFJ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TCxHQUFvQixFQUFwQjtBQUNBLFFBQU0sS0FBS0MsTUFBTCxDQUFZQyxRQUFaLENBQXFCSixHQUFyQixDQUFOO0FBQ0QsQ0FYRDs7QUFjQUosTUFBTSxDQUFDQyxNQUFQLENBQWMvRixVQUFkLEVBQTBCRixRQUExQixFQUFvQ0MsT0FBcEM7ZUFFZUMsVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGVycm9ycyB9IGZyb20gJ2FwcGl1bS1iYXNlLWRyaXZlcic7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IGpzMnhtbCBmcm9tICdqczJ4bWxwYXJzZXIyJztcbmltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyJztcbmltcG9ydCB7IGZzLCB1dGlsIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuaW1wb3J0IHsgZXhlYyB9IGZyb20gJ3RlZW5fcHJvY2Vzcyc7XG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgeyBvcGVuVXJsIH0gZnJvbSAnbm9kZS1zaW1jdGwnO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuXG5sZXQgY29tbWFuZHMgPSB7fSwgaGVscGVycyA9IHt9LCBleHRlbnNpb25zID0ge307XG5cbmNvbnN0IE1PTUVOVF9GT1JNQVRfSVNPODYwMSA9ICdZWVlZLU1NLUREVEhIOm1tOnNzWic7XG5cbmNvbW1hbmRzLmFjdGl2ZSA9IGFzeW5jIGZ1bmN0aW9uIGFjdGl2ZSAoKSB7XG4gIGlmICh0aGlzLmlzV2ViQ29udGV4dCgpKSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuZXhlY3V0ZUF0b20oJ2FjdGl2ZV9lbGVtZW50JywgW10pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnVpQXV0b0NsaWVudC5zZW5kQ29tbWFuZCgnYXUuZ2V0QWN0aXZlRWxlbWVudCgpJyk7XG4gIH1cbn07XG5cbi8qKlxuICogUmV0cmlldmVzIHRoZSBjdXJyZW50IGRldmljZSdzIHRpbWVzdGFtcC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9ybWF0IC0gVGhlIHNldCBvZiBmb3JtYXQgc3BlY2lmaWVycy4gUmVhZFxuICogICAgICAgICAgICAgICAgICAgICAgICAgIGh0dHBzOi8vbW9tZW50anMuY29tL2RvY3MvIHRvIGdldCB0aGUgZnVsbCBsaXN0IG9mIHN1cHBvcnRlZFxuICogICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGV0aW1lIGZvcm1hdCBzcGVjaWZpZXJzLiBUaGUgZGVmYXVsdCBmb3JtYXQgaXNcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICBgWVlZWS1NTS1ERFRISDptbTpzc1pgLCB3aGljaCBjb21wbGllcyB0byBJU08tODYwMVxuICogQHJldHVybnMgRm9ybWF0dGVkIGRhdGV0aW1lIHN0cmluZyBvciB0aGUgcmF3IGNvbW1hbmQgb3V0cHV0IGlmIGZvcm1hdHRpbmcgZmFpbHNcbiAqL1xuY29tbWFuZHMuZ2V0RGV2aWNlVGltZSA9IGFzeW5jIGZ1bmN0aW9uIGdldERldmljZVRpbWUgKGZvcm1hdCA9IE1PTUVOVF9GT1JNQVRfSVNPODYwMSkge1xuICBsb2cuaW5mbygnQXR0ZW1wdGluZyB0byBjYXB0dXJlIGlPUyBkZXZpY2UgZGF0ZSBhbmQgdGltZScpO1xuICBsZXQgY21kO1xuICBsZXQgYXJncztcbiAgbGV0IGlucHV0Rm9ybWF0O1xuICBpZiAodGhpcy5pc1JlYWxEZXZpY2UoKSkge1xuICAgIHRyeSB7XG4gICAgICBjbWQgPSBhd2FpdCBmcy53aGljaCgnaWRldmljZWRhdGUnKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGxvZy5lcnJvckFuZFRocm93KCdDb3VsZCBub3QgY2FwdHVyZSBkZXZpY2UgZGF0ZSBhbmQgdGltZSB1c2luZyBsaWJpbW9iaWxlZGV2aWNlIGlkZXZpY2VkYXRlLiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdMaWJpbW9iaWxlZGV2aWNlIGlzIHByb2JhYmx5IG5vdCBpbnN0YWxsZWQnKTtcbiAgICB9XG4gICAgbG9nLmluZm8oYEZvdW5kIGlkZXZpY2VkYXRlOiAnJHtjbWR9J2ApO1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9saWJpbW9iaWxlZGV2aWNlL2xpYmltb2JpbGVkZXZpY2UvYmxvYi8yNjM3M2IzMzQ4ODlmNWFlMmUyNzM3ZmY0NDdlYjI1YjE3MDBmYTJmL3Rvb2xzL2lkZXZpY2VkYXRlLmMjTDEyOVxuICAgIGFyZ3MgPSBbJy11JywgdGhpcy5vcHRzLnVkaWRdO1xuICAgIGlucHV0Rm9ybWF0ID0gJ2RkZCBNTU0gREQgSEg6bW06c3MgeiBZWVlZJztcbiAgfSBlbHNlIHtcbiAgICBsb2cud2FybignT24gc2ltdWxhdG9yLiBBc3N1bWluZyBkZXZpY2UgdGltZSBpcyB0aGUgc2FtZSBhcyBob3N0IHRpbWUnKTtcbiAgICBjbWQgPSAnZGF0ZSc7XG4gICAgYXJncyA9IFsnKyVZLSVtLSVkVCVIOiVNOiVTJXonXTtcbiAgICBpbnB1dEZvcm1hdCA9IE1PTUVOVF9GT1JNQVRfSVNPODYwMTtcbiAgfVxuICBjb25zdCBzdGRvdXQgPSAoYXdhaXQgZXhlYyhjbWQsIGFyZ3MpKS5zdGRvdXQudHJpbSgpO1xuICBsb2cuZGVidWcoYEdvdCB0aGUgZm9sbG93aW5nIG91dHB1dCBvdXQgb2YgJyR7Y21kfSAke2FyZ3Muam9pbignICcpfSc6ICR7c3Rkb3V0fWApO1xuICBjb25zdCBwYXJzZWRUaW1lc3RhbXAgPSBtb21lbnQoc3Rkb3V0LCBpbnB1dEZvcm1hdCk7XG4gIGlmICghcGFyc2VkVGltZXN0YW1wLmlzVmFsaWQoKSkge1xuICAgIGxvZy53YXJuKGBDYW5ub3QgcGFyc2UgdGhlIHRpbWVzdGFtcCAnJHtzdGRvdXR9JyByZXR1cm5lZCBieSAnJHtjbWR9JyBjb21tYW5kLiBSZXR1cm5pbmcgaXQgYXMgaXNgKTtcbiAgICByZXR1cm4gc3Rkb3V0O1xuICB9XG4gIHJldHVybiBwYXJzZWRUaW1lc3RhbXAuZm9ybWF0KGZvcm1hdCk7XG59O1xuXG5jb21tYW5kcy5oaWRlS2V5Ym9hcmQgPSBhc3luYyBmdW5jdGlvbiBoaWRlS2V5Ym9hcmQgKHN0cmF0ZWd5LCAuLi5wb3NzaWJsZUtleXMpIHtcbiAgcG9zc2libGVLZXlzLnBvcCgpOyAvLyBsYXN0IHBhcmFtZXRlciBpcyB0aGUgc2Vzc2lvbiBpZFxuICBsZXQgY21kO1xuICBsZXQga2V5ID0gXy5maW5kKHBvc3NpYmxlS2V5cywgKGspID0+IHtyZXR1cm4gazt9KTtcbiAgaWYgKGtleSkge1xuICAgIHN0cmF0ZWd5ID0gc3RyYXRlZ3kgfHwgJ3ByZXNzS2V5JztcbiAgICBjbWQgPSBgYXUuaGlkZUtleWJvYXJkKCcke3N0cmF0ZWd5fScsICcke2tleX0nKWA7XG4gIH0gZWxzZSB7XG4gICAgc3RyYXRlZ3kgPSBzdHJhdGVneSB8fCAnZGVmYXVsdCc7XG4gICAgY21kID0gYGF1LmhpZGVLZXlib2FyZCgnJHtzdHJhdGVneX0nKWA7XG4gIH1cbiAgYXdhaXQgdGhpcy51aUF1dG9DbGllbnQuc2VuZENvbW1hbmQoY21kKTtcbn07XG5cbmNvbW1hbmRzLmdldFBhZ2VTb3VyY2UgPSBhc3luYyBmdW5jdGlvbiBnZXRQYWdlU291cmNlICgpIHtcbiAgaWYgKHRoaXMuaXNXZWJDb250ZXh0KCkpIHtcbiAgICBjb25zdCBzY3JpcHQgPSAncmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5vdXRlckhUTUwnO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmV4ZWN1dGVBdG9tKCdleGVjdXRlX3NjcmlwdCcsIFtzY3JpcHQsIFtdXSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0TmF0aXZlUGFnZVNvdXJjZSgpO1xuICB9XG59O1xuXG5oZWxwZXJzLmdldE5hdGl2ZVBhZ2VTb3VyY2UgPSBhc3luYyBmdW5jdGlvbiBnZXROYXRpdmVQYWdlU291cmNlICgpIHtcbiAgbGV0IGpzb25Tb3VyY2UgPSBhd2FpdCB0aGlzLmdldFNvdXJjZUZvckVsZW1lbnRGb3JYTUwoKTtcbiAgaWYgKHR5cGVvZiBqc29uU291cmNlID09PSAnc3RyaW5nJykge1xuICAgIGpzb25Tb3VyY2UgPSBKU09OLnBhcnNlKGpzb25Tb3VyY2UpO1xuICB9XG4gIGxldCB4bWxTb3VyY2UgPSBqczJ4bWwoJ0FwcGl1bUFVVCcsIGpzb25Tb3VyY2UsIHtcbiAgICB3cmFwQXJyYXk6IHtlbmFibGVkOiBmYWxzZSwgZWxlbWVudE5hbWU6ICdlbGVtZW50J30sXG4gICAgZGVjbGFyYXRpb246IHtpbmNsdWRlOiB0cnVlfSxcbiAgICBwcmV0dHlQcmludGluZzoge2luZGVudFN0cmluZzogJyAgICAnfVxuICB9KTtcbiAgcmV0dXJuIHhtbFNvdXJjZTtcbn07XG5cbmNvbW1hbmRzLmJhY2tncm91bmQgPSBhc3luYyBmdW5jdGlvbiBiYWNrZ3JvdW5kIChzZWNzKSB7XG4gIGF3YWl0IHRoaXMudWlBdXRvQ2xpZW50LnNlbmRDb21tYW5kKGBhdS5iYWNrZ3JvdW5kKCR7c2Vjc30pYCk7XG59O1xuXG5jb21tYW5kcy5sb2NrID0gYXN5bmMgZnVuY3Rpb24gbG9jayAoc2Vjcykge1xuICBpZiAoIXNlY3MpIHtcbiAgICBsb2cuZGVidWcoJ05vIHNlY29uZHMgcGFyYW1ldGVyLiBVc2luZyAwIHNlY29uZHMnKTtcbiAgICBzZWNzID0gMDtcbiAgfVxuICBhd2FpdCB0aGlzLnVpQXV0b0NsaWVudC5zZW5kQ29tbWFuZChgYXUubG9jaygke3NlY3N9KWApO1xufTtcblxuY29tbWFuZHMuY2xvc2VBcHAgPSBhc3luYyBmdW5jdGlvbiBjbG9zZUFwcCAoKSB7XG4gIGxldCBhcHBOYW1lID0gdGhpcy5vcHRzLmFwcCB8fCB0aGlzLm9wdHMuYnVuZGxlSWQ7XG4gIHRyeSB7XG4gICAgYXdhaXQgdGhpcy5zdG9wKCk7XG4gICAgbG9nLmluZm8oYFN1Y2Nlc3NmdWxseSBjbG9zZWQgdGhlICcke2FwcE5hbWV9JyBhcHAuYCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGxvZy53YXJuKGBTb21ldGhpbmcgd2VudCB3cm9uZyB3aGlsZSBjbG9zaW5nIHRoZSAnJHthcHBOYW1lfScgYXBwLmApO1xuICAgIHRocm93IGVycjtcbiAgfVxufTtcblxuY29tbWFuZHMubGF1bmNoQXBwID0gYXN5bmMgZnVuY3Rpb24gbGF1bmNoQXBwICgpIHtcbiAgbGV0IGFwcE5hbWUgPSB0aGlzLm9wdHMuYXBwIHx8IHRoaXMub3B0cy5idW5kbGVJZDtcbiAgdHJ5IHtcbiAgICBhd2FpdCB0aGlzLnN0YXJ0KCk7XG4gICAgbG9nLmluZm8oYFN1Y2Nlc3NmdWxseSBsYXVuY2hlZCB0aGUgJyR7YXBwTmFtZX0nIGFwcC5gKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nLndhcm4oYFNvbWV0aGluZyB3ZW50IHdyb25nIHdoaWxlIGxhdW5jaGluZyB0aGUgJyR7YXBwTmFtZX0nIGFwcC5gKTtcbiAgICB0aHJvdyBlcnI7XG4gIH1cbn07XG5cbmNvbW1hbmRzLnJlbW92ZUFwcCA9IGFzeW5jIGZ1bmN0aW9uIHJlbW92ZUFwcCAoYnVuZGxlSWQpIHtcbiAgaWYgKHRoaXMuaXNSZWFsRGV2aWNlKCkpIHtcbiAgICBhd2FpdCB0aGlzLnJlYWxEZXZpY2UucmVtb3ZlKGJ1bmRsZUlkKTtcbiAgfSBlbHNlIHtcbiAgICBhd2FpdCB0aGlzLnNpbS5yZW1vdmVBcHAoYnVuZGxlSWQpO1xuICB9XG59O1xuXG5jb21tYW5kcy5rZXlzID0gYXN5bmMgZnVuY3Rpb24ga2V5cyAoa2V5cykge1xuICBpZiAodGhpcy5pc1dlYkNvbnRleHQoKSkge1xuICAgIGxldCBlbCA9IGF3YWl0IHRoaXMuYWN0aXZlKCk7XG4gICAgaWYgKF8uaXNVbmRlZmluZWQoZWwuRUxFTUVOVCkpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuTm9TdWNoRWxlbWVudEVycm9yKCk7XG4gICAgfVxuICAgIGF3YWl0IHRoaXMuc2V0VmFsdWUoa2V5cywgZWwuRUxFTUVOVCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKF8uaXNBcnJheShrZXlzKSkge1xuICAgICAga2V5cyA9IGtleXMuam9pbignJyk7XG4gICAgfVxuICAgIGlmICghXy5pc1N0cmluZyhrZXlzKSkge1xuICAgICAga2V5cyA9IGtleXMudG9TdHJpbmcoKTtcbiAgICB9XG4gICAga2V5cyA9IHV0aWwuZXNjYXBlU3BlY2lhbENoYXJzKGtleXMsIFwiJ1wiKTtcbiAgICBsZXQgY29tbWFuZCA9IGBhdS5zZW5kS2V5c1RvQWN0aXZlRWxlbWVudCgnJHtrZXlzfScpYDtcbiAgICBhd2FpdCB0aGlzLnVpQXV0b0NsaWVudC5zZW5kQ29tbWFuZChjb21tYW5kKTtcbiAgfVxufTtcblxuY29tbWFuZHMuc2V0R2VvTG9jYXRpb24gPSBhc3luYyBmdW5jdGlvbiBzZXRHZW9Mb2NhdGlvbiAobG9jYXRpb24pIHtcbiAgLy8gVE9ETzogY2hlY2sgdGhlIGhhc09wdGlvbnMgYml0LCB0aGUgbWV0aG9kIHNpZ25hdHVyZSBzaG91bGQgYmUgbG9jYXRpb24sIG9wdGlvblxuXG4gIC8vIGxldCBoYXNPcHRpb25zID0gYWx0aXR1ZGUgIT09IG51bGwgfHwgaG9yaXpvbnRhbEFjY3VyYWN5ICE9PSBudWxsIHx8IHZlcnRpY2FsQWNjdXJhY3kgIT09IG51bGwgfHwgY291cnNlICE9PSBudWxsIHx8IHNwZWVkICE9PSBudWxsO1xuICAvLyBpZiAoaGFzT3B0aW9ucykge1xuICAvLyAgIGxldCBvcHRpb25zID0ge307XG4gIC8vICAgaWYgKGFsdGl0dWRlICE9PSBudWxsKSB7XG4gIC8vICAgICBvcHRpb25zLmFsdGl0dWRlID0gYWx0aXR1ZGU7XG4gIC8vICAgfVxuICAvLyAgIGlmIChob3Jpem9udGFsQWNjdXJhY3kgIT09IG51bGwpIHtcbiAgLy8gICAgIG9wdGlvbnMuaG9yaXpvbnRhbEFjY3VyYWN5ID0gaG9yaXpvbnRhbEFjY3VyYWN5O1xuICAvLyAgIH1cbiAgLy8gICBpZiAodmVydGljYWxBY2N1cmFjeSAhPT0gbnVsbCkge1xuICAvLyAgICAgb3B0aW9ucy52ZXJ0aWNhbEFjY3VyYWN5ID0gdmVydGljYWxBY2N1cmFjeTtcbiAgLy8gICB9XG4gIC8vICAgaWYgKGNvdXJzZSAhPT0gbnVsbCkge1xuICAvLyAgICAgb3B0aW9ucy5jb3Vyc2UgPSBjb3Vyc2U7XG4gIC8vICAgfVxuICAvLyAgIGlmIChzcGVlZCAhPT0gbnVsbCkge1xuICAvLyAgICAgb3B0aW9ucy5zcGVlZCA9IHNwZWVkO1xuICAvLyAgIH1cbiAgLy8gICBhd2FpdCB0aGlzLnVpQXV0b0NsaWVudC5zZW5kQ29tbWFuZChcbiAgLy8gICAgIGB0YXJnZXQuc2V0TG9jYXRpb25XaXRoT3B0aW9ucygke0pTT04uc3RyaW5naWZ5KGNvb3JkaW5hdGVzKX0sICR7SlNPTi5zdHJpbmdpZnkob3B0aW9ucyl9KWApO1xuICAvLyB9IGVsc2Uge1xuICBhd2FpdCB0aGlzLnVpQXV0b0NsaWVudC5zZW5kQ29tbWFuZChgdGFyZ2V0LnNldExvY2F0aW9uKCR7SlNPTi5zdHJpbmdpZnkobG9jYXRpb24pfSlgKTtcbiAgLy8gfVxufTtcblxuY29tbWFuZHMuZ2V0V2luZG93U2l6ZSA9IGFzeW5jIGZ1bmN0aW9uIGdldFdpbmRvd1NpemUgKHdpbmRvd0hhbmRsZSA9ICdjdXJyZW50Jykge1xuICBpZiAod2luZG93SGFuZGxlICE9PSAnY3VycmVudCcpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLk5vdFlldEltcGxlbWVudGVkRXJyb3IoJ0N1cnJlbnRseSBvbmx5IGdldHRpbmcgY3VycmVudCB3aW5kb3cgc2l6ZSBpcyBzdXBwb3J0ZWQuJyk7XG4gIH1cblxuICBpZiAodGhpcy5pc1dlYkNvbnRleHQoKSkge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmV4ZWN1dGVBdG9tKCdnZXRfd2luZG93X3NpemUnLCBbXSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudWlBdXRvQ2xpZW50LnNlbmRDb21tYW5kKCdhdS5nZXRXaW5kb3dTaXplKCknKTtcbiAgfVxufTtcblxuLy8gRm9yIFczQ1xuY29tbWFuZHMuZ2V0V2luZG93UmVjdCA9IGFzeW5jIGZ1bmN0aW9uIGdldFdpbmRvd1JlY3QgKCkge1xuICBjb25zdCB7d2lkdGgsIGhlaWdodH0gPSBhd2FpdCB0aGlzLmdldFdpbmRvd1NpemUoKTtcbiAgcmV0dXJuIHtcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gICAgeDogMCxcbiAgICB5OiAwXG4gIH07XG59O1xuXG5jb21tYW5kcy5nZXRTdHJpbmdzID0gYXN5bmMgZnVuY3Rpb24gZ2V0U3RyaW5ncyAobGFuZ3VhZ2UsIHN0cmluZ0ZpbGUgPSBudWxsKSB7XG4gIGxvZy5kZWJ1ZyhgR2V0dGluZ3Mgc3RyaW5ncyBmb3IgbGFuZ3VhZ2UgJyR7bGFuZ3VhZ2V9JyBhbmQgc3RyaW5nIGZpbGUgJyR7c3RyaW5nRmlsZX0nYCk7XG4gIHJldHVybiBhd2FpdCB1dGlscy5wYXJzZUxvY2FsaXphYmxlU3RyaW5ncyhPYmplY3QuYXNzaWduKHt9LCB0aGlzLm9wdHMsIHtcbiAgICBsYW5ndWFnZSxcbiAgICBzdHJpbmdGaWxlLFxuICAgIHN0cmljdE1vZGU6IHRydWUsXG4gIH0pKTtcbn07XG5cbmNvbW1hbmRzLnNldFVybCA9IGFzeW5jIGZ1bmN0aW9uIHNldFVybCAodXJsKSB7XG4gIGxvZy5kZWJ1ZyhgQXR0ZW1wdGluZyB0byBzZXQgdXJsICcke3VybH0nYCk7XG4gIGlmICghdGhpcy5pc1dlYkNvbnRleHQoKSkge1xuICAgIC8vIHVzZSB4Y3J1biB0byBvcGVuIGRlZXBsaW5rXG4gICAgYXdhaXQgb3BlblVybCh0aGlzLm9wdHMudWRpZCB8fCB0aGlzLnNpbS51ZGlkLCB1cmwpO1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLnNldEN1cnJlbnRVcmwodXJsKTtcbiAgLy8gbWFrZSBzdXJlIHRvIGNsZWFyIG91dCBhbnkgbGVmdG92ZXIgd2ViIGZyYW1lc1xuICB0aGlzLmN1cldlYkZyYW1lcyA9IFtdO1xuICBhd2FpdCB0aGlzLnJlbW90ZS5uYXZUb1VybCh1cmwpO1xufTtcblxuXG5PYmplY3QuYXNzaWduKGV4dGVuc2lvbnMsIGNvbW1hbmRzLCBoZWxwZXJzKTtcbmV4cG9ydCB7IGNvbW1hbmRzLCBoZWxwZXJzIH07XG5leHBvcnQgZGVmYXVsdCBleHRlbnNpb25zO1xuIl0sImZpbGUiOiJsaWIvY29tbWFuZHMvZ2VuZXJhbC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
