"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

require("source-map-support/register");

var _appiumBaseDriver = require("appium-base-driver");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

var _utils = require("../utils");

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

commands.getAttribute = async function getAttribute(attribute, el) {
  el = (0, _utils.unwrapEl)(el);

  if (this.isWebContext()) {
    let atomsElement = this.getAtomsElement(el);

    if (_lodash.default.isNull(atomsElement)) {
      throw new _appiumBaseDriver.errors.UnknownError(`Error converting element ID for using in WD atoms: '${el}'`);
    } else {
      return await this.executeAtom('get_attribute_value', [atomsElement, attribute]);
    }
  } else {
    if (attribute === 'contentSize') {
      return await this.getElementContentSize(el);
    }

    if (_lodash.default.includes(['label', 'name', 'value', 'values', 'hint'], attribute)) {
      let command = `au.getElement('${el}').${attribute}()`;
      return await this.uiAutoClient.sendCommand(command);
    } else {
      throw new _appiumBaseDriver.errors.UnknownCommandError(`UIAElements don't have the attribute '${attribute}'`);
    }
  }
};

commands.clear = async function clear(el) {
  el = (0, _utils.unwrapEl)(el);

  if (this.isWebContext()) {
    let atomsElement = this.useAtomsElement(el);
    await this.executeAtom('clear', [atomsElement]);
  } else {
    let command = `au.getElement('${el}').setValue('')`;
    await this.uiAutoClient.sendCommand(command);
  }
};

commands.setValueImmediate = async function setValueImmediate(value, el) {
  el = (0, _utils.unwrapEl)(el);
  value = _appiumSupport.util.escapeSpecialChars(value, "'");
  let command = `au.getElement('${el}').setValue('${value}')`;
  await this.uiAutoClient.sendCommand(command);
};

commands.setValue = async function setValue(value, el) {
  el = (0, _utils.unwrapEl)(el);

  if (this.isWebContext()) {
    let atomsElement = this.useAtomsElement(el);
    await this.executeAtom('click', [atomsElement]);
    await this.executeAtom('type', [atomsElement, value]);
  } else {
    if (value instanceof Array) {
      value = value.join('');
    }

    if (typeof value !== 'string') {
      value = value.toString();
    }

    value = _appiumSupport.util.escapeSpecialChars(value, "'");
    value = value.replace(/\\\\n/g, '\\n');

    if (this.opts.useRobot) {
      throw new _appiumBaseDriver.errors.NotYetImplementedError();
    } else {
      let command = `au.getElement('${el}').setValueByType('${value}')`;
      await this.uiAutoClient.sendCommand(command);
    }
  }
};

commands.getText = async function getText(el) {
  el = (0, _utils.unwrapEl)(el);

  if (this.isWebContext()) {
    let atomsElement = this.useAtomsElement(el);
    return await this.executeAtom('get_text', [atomsElement]);
  } else {
    let command = `au.getElement('${el}').text()`;
    let res = await this.uiAutoClient.sendCommand(command);
    res = res ? res.toString() : '';
    return res;
  }
};

commands.elementDisplayed = async function elementDisplayed(el) {
  el = (0, _utils.unwrapEl)(el);

  if (this.isWebContext()) {
    let atomsElement = this.useAtomsElement(el);
    return await this.executeAtom('is_displayed', [atomsElement]);
  } else {
    let command = `au.getElement('${el}').isDisplayed()`;
    return await this.uiAutoClient.sendCommand(command);
  }
};

commands.elementEnabled = async function elementEnabled(el) {
  el = (0, _utils.unwrapEl)(el);

  if (this.isWebContext()) {
    let atomsElement = this.useAtomsElement(el);
    return await this.executeAtom('is_enabled', [atomsElement]);
  } else {
    let command = `au.getElement('${el}').isEnabled() === 1`;
    return await this.uiAutoClient.sendCommand(command);
  }
};

commands.elementSelected = async function elementSelected(el) {
  el = (0, _utils.unwrapEl)(el);

  if (this.isWebContext()) {
    let atomsElement = this.useAtomsElement(el);
    return await this.executeAtom('is_selected', [atomsElement]);
  } else {
    let command = `au.getElement('${el}').isSelected()`;
    return await this.uiAutoClient.sendCommand(command);
  }
};

commands.getName = async function getName(el) {
  el = (0, _utils.unwrapEl)(el);

  if (this.isWebContext()) {
    let atomsElement = this.useAtomsElement(el);
    let script = 'return arguments[0].tagName.toLowerCase()';
    return await this.executeAtom('execute_script', [script, [atomsElement]]);
  } else {
    let command = `au.getElement('${el}').type()`;
    return await this.uiAutoClient.sendCommand(command);
  }
};

commands.getLocation = async function getLocation(el) {
  el = (0, _utils.unwrapEl)(el);

  if (this.isWebContext()) {
    let atomsElement = await this.useAtomsElement(el);
    return await this.executeAtom('get_top_left_coordinates', [atomsElement]);
  } else {
    let command = `au.getElement('${el}').getElementLocation()`;
    return await this.uiAutoClient.sendCommand(command);
  }
};

commands.getLocationInView = async function getLocationInView(el) {
  return await this.getLocation(el);
};

commands.getSize = async function getSize(el) {
  el = (0, _utils.unwrapEl)(el);

  if (this.isWebContext()) {
    let atomsElement = this.getAtomsElement(el);

    if (atomsElement === null) {
      throw new _appiumBaseDriver.errors.UnknownError(`Error converting element ID for using in WD atoms: '${el}'`);
    } else {
      return await this.executeAtom('get_size', [atomsElement]);
    }
  } else {
    let command = `au.getElement('${el}').getElementSize()`;
    return await this.uiAutoClient.sendCommand(command);
  }
};

commands.getElementContentSize = async function getElementContentSize(el) {
  el = (0, _utils.unwrapEl)(el);
  const command = `au.getElement('${el}').childElementsFrames()`;
  const frames = await this.uiAutoClient.sendCommand(command);
  const type = await this.getName(el);
  let contentHeight = 0;

  switch (type) {
    case 'UIATableView':
      {
        const firstElementFrame = _lodash.default.first(frames);

        const lastElementFrame = _lodash.default.last(frames);

        contentHeight = lastElementFrame.origin.y + lastElementFrame.size.height - firstElementFrame.origin.y;
        break;
      }

    case 'UIACollectionView':
      {
        let firstElementFrame = _lodash.default.first(frames);

        let elementsInRow = 0;

        for (const [i, frame] of frames.entries()) {
          if (frame.origin.y !== firstElementFrame.origin.y) {
            elementsInRow = i;
            break;
          }
        }

        const spaceBetweenElements = frames[elementsInRow].origin.y - frames[elementsInRow - 1].origin.y - frames[elementsInRow - 1].size.height;
        const numberOfRows = Math.ceil(frames.length / elementsInRow);
        contentHeight = numberOfRows * firstElementFrame.size.height + spaceBetweenElements * (numberOfRows - 1);
        break;
      }

    default:
      {
        return null;
      }
  }

  const size = await this.getSize(el);
  const topLeftCoord = await this.getLocationInView(el);
  return JSON.stringify({
    width: size.width,
    height: size.height,
    top: topLeftCoord.y,
    left: topLeftCoord.x,
    scrollableOffset: contentHeight
  });
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9lbGVtZW50LmpzIl0sIm5hbWVzIjpbImNvbW1hbmRzIiwiaGVscGVycyIsImV4dGVuc2lvbnMiLCJnZXRBdHRyaWJ1dGUiLCJhdHRyaWJ1dGUiLCJlbCIsImlzV2ViQ29udGV4dCIsImF0b21zRWxlbWVudCIsImdldEF0b21zRWxlbWVudCIsIl8iLCJpc051bGwiLCJlcnJvcnMiLCJVbmtub3duRXJyb3IiLCJleGVjdXRlQXRvbSIsImdldEVsZW1lbnRDb250ZW50U2l6ZSIsImluY2x1ZGVzIiwiY29tbWFuZCIsInVpQXV0b0NsaWVudCIsInNlbmRDb21tYW5kIiwiVW5rbm93bkNvbW1hbmRFcnJvciIsImNsZWFyIiwidXNlQXRvbXNFbGVtZW50Iiwic2V0VmFsdWVJbW1lZGlhdGUiLCJ2YWx1ZSIsInV0aWwiLCJlc2NhcGVTcGVjaWFsQ2hhcnMiLCJzZXRWYWx1ZSIsIkFycmF5Iiwiam9pbiIsInRvU3RyaW5nIiwicmVwbGFjZSIsIm9wdHMiLCJ1c2VSb2JvdCIsIk5vdFlldEltcGxlbWVudGVkRXJyb3IiLCJnZXRUZXh0IiwicmVzIiwiZWxlbWVudERpc3BsYXllZCIsImVsZW1lbnRFbmFibGVkIiwiZWxlbWVudFNlbGVjdGVkIiwiZ2V0TmFtZSIsInNjcmlwdCIsImdldExvY2F0aW9uIiwiZ2V0TG9jYXRpb25JblZpZXciLCJnZXRTaXplIiwiZnJhbWVzIiwidHlwZSIsImNvbnRlbnRIZWlnaHQiLCJmaXJzdEVsZW1lbnRGcmFtZSIsImZpcnN0IiwibGFzdEVsZW1lbnRGcmFtZSIsImxhc3QiLCJvcmlnaW4iLCJ5Iiwic2l6ZSIsImhlaWdodCIsImVsZW1lbnRzSW5Sb3ciLCJpIiwiZnJhbWUiLCJlbnRyaWVzIiwic3BhY2VCZXR3ZWVuRWxlbWVudHMiLCJudW1iZXJPZlJvd3MiLCJNYXRoIiwiY2VpbCIsImxlbmd0aCIsInRvcExlZnRDb29yZCIsIkpTT04iLCJzdHJpbmdpZnkiLCJ3aWR0aCIsInRvcCIsImxlZnQiLCJ4Iiwi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SixZQUFZLENBQUNaLENBSEU7QUFJcEJpQixJQUFBQSxJQUFJLEVBQUVMLFlBQVksQ0FBQ00sQ0FKQztBQUtwQkMsSUFBQUEsZ0JBQWdCLEVBQUV6QjtBQUxFLEdBQWYsQ0FBUDtBQU9ELENBakREOztBQW1EQTBCLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjdkUsVUFBZCxFQUEwQkYsUUFBMUIsRUFBb0NDLE9BQXBDO2VBRWVDLFUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlcnJvcnMgfSBmcm9tICdhcHBpdW0tYmFzZS1kcml2ZXInO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IHV0aWwgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgeyB1bndyYXBFbCB9IGZyb20gJy4uL3V0aWxzJztcblxubGV0IGNvbW1hbmRzID0ge30sIGhlbHBlcnMgPSB7fSwgZXh0ZW5zaW9ucyA9IHt9O1xuXG5jb21tYW5kcy5nZXRBdHRyaWJ1dGUgPSBhc3luYyBmdW5jdGlvbiBnZXRBdHRyaWJ1dGUgKGF0dHJpYnV0ZSwgZWwpIHtcbiAgZWwgPSB1bndyYXBFbChlbCk7XG4gIGlmICh0aGlzLmlzV2ViQ29udGV4dCgpKSB7XG4gICAgbGV0IGF0b21zRWxlbWVudCA9IHRoaXMuZ2V0QXRvbXNFbGVtZW50KGVsKTtcbiAgICBpZiAoXy5pc051bGwoYXRvbXNFbGVtZW50KSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5Vbmtub3duRXJyb3IoYEVycm9yIGNvbnZlcnRpbmcgZWxlbWVudCBJRCBmb3IgdXNpbmcgaW4gV0QgYXRvbXM6ICcke2VsfSdgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZXhlY3V0ZUF0b20oJ2dldF9hdHRyaWJ1dGVfdmFsdWUnLCBbYXRvbXNFbGVtZW50LCBhdHRyaWJ1dGVdKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGF0dHJpYnV0ZSA9PT0gJ2NvbnRlbnRTaXplJykge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0RWxlbWVudENvbnRlbnRTaXplKGVsKTtcbiAgICB9XG4gICAgaWYgKF8uaW5jbHVkZXMoWydsYWJlbCcsICduYW1lJywgJ3ZhbHVlJywgJ3ZhbHVlcycsICdoaW50J10sIGF0dHJpYnV0ZSkpIHtcbiAgICAgIGxldCBjb21tYW5kID0gYGF1LmdldEVsZW1lbnQoJyR7ZWx9JykuJHthdHRyaWJ1dGV9KClgO1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudWlBdXRvQ2xpZW50LnNlbmRDb21tYW5kKGNvbW1hbmQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLlVua25vd25Db21tYW5kRXJyb3IoYFVJQUVsZW1lbnRzIGRvbid0IGhhdmUgdGhlIGF0dHJpYnV0ZSAnJHthdHRyaWJ1dGV9J2ApO1xuICAgIH1cbiAgfVxufTtcblxuY29tbWFuZHMuY2xlYXIgPSBhc3luYyBmdW5jdGlvbiBjbGVhciAoZWwpIHtcbiAgZWwgPSB1bndyYXBFbChlbCk7XG4gIGlmICh0aGlzLmlzV2ViQ29udGV4dCgpKSB7XG4gICAgbGV0IGF0b21zRWxlbWVudCA9IHRoaXMudXNlQXRvbXNFbGVtZW50KGVsKTtcbiAgICBhd2FpdCB0aGlzLmV4ZWN1dGVBdG9tKCdjbGVhcicsIFthdG9tc0VsZW1lbnRdKTtcbiAgfSBlbHNlIHtcbiAgICBsZXQgY29tbWFuZCA9IGBhdS5nZXRFbGVtZW50KCcke2VsfScpLnNldFZhbHVlKCcnKWA7XG4gICAgYXdhaXQgdGhpcy51aUF1dG9DbGllbnQuc2VuZENvbW1hbmQoY29tbWFuZCk7XG4gIH1cbn07XG5cbmNvbW1hbmRzLnNldFZhbHVlSW1tZWRpYXRlID0gYXN5bmMgZnVuY3Rpb24gc2V0VmFsdWVJbW1lZGlhdGUgKHZhbHVlLCBlbCkge1xuICBlbCA9IHVud3JhcEVsKGVsKTtcbiAgdmFsdWUgPSB1dGlsLmVzY2FwZVNwZWNpYWxDaGFycyh2YWx1ZSwgXCInXCIpO1xuICBsZXQgY29tbWFuZCA9IGBhdS5nZXRFbGVtZW50KCcke2VsfScpLnNldFZhbHVlKCcke3ZhbHVlfScpYDtcbiAgYXdhaXQgdGhpcy51aUF1dG9DbGllbnQuc2VuZENvbW1hbmQoY29tbWFuZCk7XG59O1xuXG5jb21tYW5kcy5zZXRWYWx1ZSA9IGFzeW5jIGZ1bmN0aW9uIHNldFZhbHVlICh2YWx1ZSwgZWwpIHtcbiAgZWwgPSB1bndyYXBFbChlbCk7XG4gIGlmICh0aGlzLmlzV2ViQ29udGV4dCgpKSB7XG4gICAgbGV0IGF0b21zRWxlbWVudCA9IHRoaXMudXNlQXRvbXNFbGVtZW50KGVsKTtcbiAgICBhd2FpdCB0aGlzLmV4ZWN1dGVBdG9tKCdjbGljaycsIFthdG9tc0VsZW1lbnRdKTtcbiAgICBhd2FpdCB0aGlzLmV4ZWN1dGVBdG9tKCd0eXBlJywgW2F0b21zRWxlbWVudCwgdmFsdWVdKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgdmFsdWUgPSB2YWx1ZS5qb2luKCcnKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgdmFsdWUgPSB1dGlsLmVzY2FwZVNwZWNpYWxDaGFycyh2YWx1ZSwgXCInXCIpO1xuICAgIC8vIGRlLWVzY2FwZSBcXG4gc28gaXQgY2FuIGJlIHVzZWQgc3BlY2lhbGx5XG4gICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9cXFxcXFxcXG4vZywgJ1xcXFxuJyk7XG4gICAgaWYgKHRoaXMub3B0cy51c2VSb2JvdCkge1xuICAgICAgLyogVE9ETyAqL3Rocm93IG5ldyBlcnJvcnMuTm90WWV0SW1wbGVtZW50ZWRFcnJvcigpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgY29tbWFuZCA9IGBhdS5nZXRFbGVtZW50KCcke2VsfScpLnNldFZhbHVlQnlUeXBlKCcke3ZhbHVlfScpYDtcbiAgICAgIGF3YWl0IHRoaXMudWlBdXRvQ2xpZW50LnNlbmRDb21tYW5kKGNvbW1hbmQpO1xuICAgIH1cbiAgfVxufTtcblxuY29tbWFuZHMuZ2V0VGV4dCA9IGFzeW5jIGZ1bmN0aW9uIGdldFRleHQgKGVsKSB7XG4gIGVsID0gdW53cmFwRWwoZWwpO1xuICBpZiAodGhpcy5pc1dlYkNvbnRleHQoKSkge1xuICAgIGxldCBhdG9tc0VsZW1lbnQgPSB0aGlzLnVzZUF0b21zRWxlbWVudChlbCk7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuZXhlY3V0ZUF0b20oJ2dldF90ZXh0JywgW2F0b21zRWxlbWVudF0pO1xuICB9IGVsc2Uge1xuICAgIGxldCBjb21tYW5kID0gYGF1LmdldEVsZW1lbnQoJyR7ZWx9JykudGV4dCgpYDtcbiAgICBsZXQgcmVzID0gYXdhaXQgdGhpcy51aUF1dG9DbGllbnQuc2VuZENvbW1hbmQoY29tbWFuZCk7XG4gICAgLy8gaW4gc29tZSBjYXNlcyBpbnN0cnVtZW50cyByZXR1cm5zIGluIGludGVnZXIuIHdlIG9ubHkgd2FudCBhIHN0cmluZ1xuICAgIHJlcyA9IHJlcyA/IHJlcy50b1N0cmluZygpIDogJyc7XG4gICAgcmV0dXJuIHJlcztcbiAgfVxufTtcblxuY29tbWFuZHMuZWxlbWVudERpc3BsYXllZCA9IGFzeW5jIGZ1bmN0aW9uIGVsZW1lbnREaXNwbGF5ZWQgKGVsKSB7XG4gIGVsID0gdW53cmFwRWwoZWwpO1xuICBpZiAodGhpcy5pc1dlYkNvbnRleHQoKSkge1xuICAgIGxldCBhdG9tc0VsZW1lbnQgPSB0aGlzLnVzZUF0b21zRWxlbWVudChlbCk7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuZXhlY3V0ZUF0b20oJ2lzX2Rpc3BsYXllZCcsIFthdG9tc0VsZW1lbnRdKTtcbiAgfSBlbHNlIHtcbiAgICBsZXQgY29tbWFuZCA9IGBhdS5nZXRFbGVtZW50KCcke2VsfScpLmlzRGlzcGxheWVkKClgO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnVpQXV0b0NsaWVudC5zZW5kQ29tbWFuZChjb21tYW5kKTtcbiAgfVxufTtcblxuY29tbWFuZHMuZWxlbWVudEVuYWJsZWQgPSBhc3luYyBmdW5jdGlvbiBlbGVtZW50RW5hYmxlZCAoZWwpIHtcbiAgZWwgPSB1bndyYXBFbChlbCk7XG4gIGlmICh0aGlzLmlzV2ViQ29udGV4dCgpKSB7XG4gICAgbGV0IGF0b21zRWxlbWVudCA9IHRoaXMudXNlQXRvbXNFbGVtZW50KGVsKTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5leGVjdXRlQXRvbSgnaXNfZW5hYmxlZCcsIFthdG9tc0VsZW1lbnRdKTtcbiAgfSBlbHNlIHtcbiAgICBsZXQgY29tbWFuZCA9IGBhdS5nZXRFbGVtZW50KCcke2VsfScpLmlzRW5hYmxlZCgpID09PSAxYDtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy51aUF1dG9DbGllbnQuc2VuZENvbW1hbmQoY29tbWFuZCk7XG4gIH1cbn07XG5cbmNvbW1hbmRzLmVsZW1lbnRTZWxlY3RlZCA9IGFzeW5jIGZ1bmN0aW9uIGVsZW1lbnRTZWxlY3RlZCAoZWwpIHtcbiAgZWwgPSB1bndyYXBFbChlbCk7XG4gIGlmICh0aGlzLmlzV2ViQ29udGV4dCgpKSB7XG4gICAgbGV0IGF0b21zRWxlbWVudCA9IHRoaXMudXNlQXRvbXNFbGVtZW50KGVsKTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5leGVjdXRlQXRvbSgnaXNfc2VsZWN0ZWQnLCBbYXRvbXNFbGVtZW50XSk7XG4gIH0gZWxzZSB7XG4gICAgbGV0IGNvbW1hbmQgPSBgYXUuZ2V0RWxlbWVudCgnJHtlbH0nKS5pc1NlbGVjdGVkKClgO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnVpQXV0b0NsaWVudC5zZW5kQ29tbWFuZChjb21tYW5kKTtcbiAgfVxufTtcblxuY29tbWFuZHMuZ2V0TmFtZSA9IGFzeW5jIGZ1bmN0aW9uIGdldE5hbWUgKGVsKSB7XG4gIGVsID0gdW53cmFwRWwoZWwpO1xuICBpZiAodGhpcy5pc1dlYkNvbnRleHQoKSkge1xuICAgIGxldCBhdG9tc0VsZW1lbnQgPSB0aGlzLnVzZUF0b21zRWxlbWVudChlbCk7XG4gICAgbGV0IHNjcmlwdCA9ICdyZXR1cm4gYXJndW1lbnRzWzBdLnRhZ05hbWUudG9Mb3dlckNhc2UoKSc7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuZXhlY3V0ZUF0b20oJ2V4ZWN1dGVfc2NyaXB0JywgW3NjcmlwdCwgW2F0b21zRWxlbWVudF1dKTtcbiAgfSBlbHNlIHtcbiAgICBsZXQgY29tbWFuZCA9IGBhdS5nZXRFbGVtZW50KCcke2VsfScpLnR5cGUoKWA7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudWlBdXRvQ2xpZW50LnNlbmRDb21tYW5kKGNvbW1hbmQpO1xuICB9XG59O1xuXG5jb21tYW5kcy5nZXRMb2NhdGlvbiA9IGFzeW5jIGZ1bmN0aW9uIGdldExvY2F0aW9uIChlbCkge1xuICBlbCA9IHVud3JhcEVsKGVsKTtcbiAgaWYgKHRoaXMuaXNXZWJDb250ZXh0KCkpIHtcbiAgICBsZXQgYXRvbXNFbGVtZW50ID0gYXdhaXQgdGhpcy51c2VBdG9tc0VsZW1lbnQoZWwpO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmV4ZWN1dGVBdG9tKCdnZXRfdG9wX2xlZnRfY29vcmRpbmF0ZXMnLCBbYXRvbXNFbGVtZW50XSk7XG4gIH0gZWxzZSB7XG4gICAgbGV0IGNvbW1hbmQgPSBgYXUuZ2V0RWxlbWVudCgnJHtlbH0nKS5nZXRFbGVtZW50TG9jYXRpb24oKWA7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudWlBdXRvQ2xpZW50LnNlbmRDb21tYW5kKGNvbW1hbmQpO1xuICB9XG59O1xuXG5jb21tYW5kcy5nZXRMb2NhdGlvbkluVmlldyA9IGFzeW5jIGZ1bmN0aW9uIGdldExvY2F0aW9uSW5WaWV3IChlbCkge1xuICByZXR1cm4gYXdhaXQgdGhpcy5nZXRMb2NhdGlvbihlbCk7XG59O1xuXG5jb21tYW5kcy5nZXRTaXplID0gYXN5bmMgZnVuY3Rpb24gZ2V0U2l6ZSAoZWwpIHtcbiAgZWwgPSB1bndyYXBFbChlbCk7XG4gIGlmICh0aGlzLmlzV2ViQ29udGV4dCgpKSB7XG4gICAgbGV0IGF0b21zRWxlbWVudCA9IHRoaXMuZ2V0QXRvbXNFbGVtZW50KGVsKTtcbiAgICBpZiAoYXRvbXNFbGVtZW50ID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLlVua25vd25FcnJvcihgRXJyb3IgY29udmVydGluZyBlbGVtZW50IElEIGZvciB1c2luZyBpbiBXRCBhdG9tczogJyR7ZWx9J2ApO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5leGVjdXRlQXRvbSgnZ2V0X3NpemUnLCBbYXRvbXNFbGVtZW50XSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxldCBjb21tYW5kID0gYGF1LmdldEVsZW1lbnQoJyR7ZWx9JykuZ2V0RWxlbWVudFNpemUoKWA7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudWlBdXRvQ2xpZW50LnNlbmRDb21tYW5kKGNvbW1hbmQpO1xuICB9XG59O1xuXG5jb21tYW5kcy5nZXRFbGVtZW50Q29udGVudFNpemUgPSBhc3luYyBmdW5jdGlvbiBnZXRFbGVtZW50Q29udGVudFNpemUgKGVsKSB7XG4gIGVsID0gdW53cmFwRWwoZWwpO1xuICBjb25zdCBjb21tYW5kID0gYGF1LmdldEVsZW1lbnQoJyR7ZWx9JykuY2hpbGRFbGVtZW50c0ZyYW1lcygpYDtcbiAgY29uc3QgZnJhbWVzID0gYXdhaXQgdGhpcy51aUF1dG9DbGllbnQuc2VuZENvbW1hbmQoY29tbWFuZCk7XG4gIGNvbnN0IHR5cGUgPSBhd2FpdCB0aGlzLmdldE5hbWUoZWwpO1xuXG4gIGxldCBjb250ZW50SGVpZ2h0ID0gMDtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnVUlBVGFibGVWaWV3Jzoge1xuICAgICAgY29uc3QgZmlyc3RFbGVtZW50RnJhbWUgPSBfLmZpcnN0KGZyYW1lcyk7XG4gICAgICBjb25zdCBsYXN0RWxlbWVudEZyYW1lID0gXy5sYXN0KGZyYW1lcyk7XG4gICAgICBjb250ZW50SGVpZ2h0ID0gbGFzdEVsZW1lbnRGcmFtZS5vcmlnaW4ueSArIGxhc3RFbGVtZW50RnJhbWUuc2l6ZS5oZWlnaHQgLSBmaXJzdEVsZW1lbnRGcmFtZS5vcmlnaW4ueTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlICdVSUFDb2xsZWN0aW9uVmlldyc6IHtcbiAgICAgIGxldCBmaXJzdEVsZW1lbnRGcmFtZSA9IF8uZmlyc3QoZnJhbWVzKTtcbiAgICAgIGxldCBlbGVtZW50c0luUm93ID0gMDtcblxuICAgICAgLy8gR2V0IG51bWJlciBvZiBlbGVtZW50cyBpbiBhIHJvd1xuICAgICAgZm9yIChjb25zdCBbaSwgZnJhbWVdIG9mIGZyYW1lcy5lbnRyaWVzKCkpIHtcbiAgICAgICAgaWYgKGZyYW1lLm9yaWdpbi55ICE9PSBmaXJzdEVsZW1lbnRGcmFtZS5vcmlnaW4ueSkge1xuICAgICAgICAgIGVsZW1lbnRzSW5Sb3cgPSBpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHNwYWNlQmV0d2VlbkVsZW1lbnRzID0gZnJhbWVzW2VsZW1lbnRzSW5Sb3ddLm9yaWdpbi55IC0gZnJhbWVzW2VsZW1lbnRzSW5Sb3cgLSAxXS5vcmlnaW4ueSAtIGZyYW1lc1tlbGVtZW50c0luUm93IC0gMV0uc2l6ZS5oZWlnaHQ7XG4gICAgICBjb25zdCBudW1iZXJPZlJvd3MgPSBNYXRoLmNlaWwoZnJhbWVzLmxlbmd0aCAvIGVsZW1lbnRzSW5Sb3cpO1xuXG4gICAgICAvLyBBc3N1bWUgdGhhdCBhbGwgY2VsbHMgYXJlIG9mIHRoZSBzYW1lIHNpemVcbiAgICAgIGNvbnRlbnRIZWlnaHQgPSBudW1iZXJPZlJvd3MgKiBmaXJzdEVsZW1lbnRGcmFtZS5zaXplLmhlaWdodCArIHNwYWNlQmV0d2VlbkVsZW1lbnRzICogKG51bWJlck9mUm93cyAtIDEpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGRlZmF1bHQ6IHtcbiAgICAgIC8vIFRoaXMgbWV0aG9kIGNhbGN1bGF0ZXMgY29udGVudCBzaXplIG9ubHkgZm9yIFVJQVRhYmxlVmlldyBhbmQgVUlBQ29sbGVjdGlvblZpZXcuIFVJQVdlYlZpZXcgaXMgY29tbWluZyBzb29uLlxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgY29uc3Qgc2l6ZSA9IGF3YWl0IHRoaXMuZ2V0U2l6ZShlbCk7XG4gIGNvbnN0IHRvcExlZnRDb29yZCA9IGF3YWl0IHRoaXMuZ2V0TG9jYXRpb25JblZpZXcoZWwpO1xuXG4gIHJldHVybiBKU09OLnN0cmluZ2lmeSh7XG4gICAgd2lkdGg6IHNpemUud2lkdGgsXG4gICAgaGVpZ2h0OiBzaXplLmhlaWdodCxcbiAgICB0b3A6IHRvcExlZnRDb29yZC55LFxuICAgIGxlZnQ6IHRvcExlZnRDb29yZC54LFxuICAgIHNjcm9sbGFibGVPZmZzZXQ6IGNvbnRlbnRIZWlnaHRcbiAgfSk7XG59O1xuXG5PYmplY3QuYXNzaWduKGV4dGVuc2lvbnMsIGNvbW1hbmRzLCBoZWxwZXJzKTtcbmV4cG9ydCB7IGNvbW1hbmRzLCBoZWxwZXJzIH07XG5leHBvcnQgZGVmYXVsdCBleHRlbnNpb25zO1xuIl0sImZpbGUiOiJsaWIvY29tbWFuZHMvZWxlbWVudC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
