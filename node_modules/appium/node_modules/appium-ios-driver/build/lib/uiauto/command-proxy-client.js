#!/usr/bin/env node
"use strict";

require("source-map-support/register");

var net = require('net');

var output = '';

function exit(status) {
  console.log('----- OUTPUT -----');
  console.log(output);
  process.nextTick(function () {
    process.exit(status);
  });
}

function connect(sock, dataFromInstruments) {
  var client = net.connect({
    path: sock
  }, function () {
    if (dataFromInstruments && dataFromInstruments.length > 0) {
      console.log('Data from instruments to command proxy:');
      console.log(dataFromInstruments.substring(0, 100));
    }

    client.end(dataFromInstruments, "utf8");
  });
  client.setEncoding('utf8');
  client.on('data', function (dataFromCommandProxy) {
    console.log('Data from command proxy to instruments: ' + dataFromCommandProxy);
    output += dataFromCommandProxy;
  });
  client.on('error', function (err) {
    console.log('Error from command proxy to instruments: ' + err);
  });
  client.on('end', function () {
    client.end();
    exit(0);
  });
}

try {
  console.log('----- LOGS -----');
  connect(process.argv[2], process.argv[3]);
} catch (err) {
  console.log('An error occured: ' + (err || "").toString());
  exit(1);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi91aWF1dG8vY29tbWFuZC1wcm94eS1jbGllbnQuanMiXSwibmFtZXMiOlsibmV0IiwicmVxdWlyZSIsIm91dHB1dCIsImV4aXQiLCJzdGF0dXMiLCJjb25zb2xlIiwibG9nIiwicHJvY2VzcyIsIm5leHRUaWNrIiwiY29ubmVjdCIsInNvY2siLCJkYXRhRnJvbUluc3RydW1lbnRzIiwiY2xpZW50IiwicGF0aCIsImxlbmd0aCIsInN1YnN0cmluZyIsImVuZCIsInNldEVuY29kaW5nIiwib24iLCJkYXRhRnJvbUNvbW1hbmRQcm94eSIsImVyciIsImFyZ3YiLCJ0b1N0cmluZyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFlQTs7OztBQUVBLElBQUlBLEdBQUcsR0FBR0MsT0FBTyxDQUFDLEtBQUQsQ0FBakI7O0FBRUEsSUFBSUMsTUFBTSxHQUFHLEVBQWI7O0FBRUEsU0FBU0MsSUFBVCxDQUFlQyxNQUFmLEVBQXVCO0FBQ3JCQyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxvQkFBWjtBQUNBRCxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUosTUFBWjtBQUVBSyxFQUFBQSxPQUFPLENBQUNDLFFBQVIsQ0FBaUIsWUFBWTtBQUMzQkQsSUFBQUEsT0FBTyxDQUFDSixJQUFSLENBQWFDLE1BQWI7QUFDRCxHQUZEO0FBR0Q7O0FBRUQsU0FBU0ssT0FBVCxDQUFrQkMsSUFBbEIsRUFBd0JDLG1CQUF4QixFQUE2QztBQUMzQyxNQUFJQyxNQUFNLEdBQUdaLEdBQUcsQ0FBQ1MsT0FBSixDQUFZO0FBQUNJLElBQUFBLElBQUksRUFBRUg7QUFBUCxHQUFaLEVBQTBCLFlBQVk7QUFDakQsUUFBSUMsbUJBQW1CLElBQUlBLG1CQUFtQixDQUFDRyxNQUFwQixHQUE2QixDQUF4RCxFQUEwRDtBQUN4RFQsTUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVkseUNBQVo7QUFDQUQsTUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlLLG1CQUFtQixDQUFDSSxTQUFwQixDQUE4QixDQUE5QixFQUFpQyxHQUFqQyxDQUFaO0FBQ0Q7O0FBQ0RILElBQUFBLE1BQU0sQ0FBQ0ksR0FBUCxDQUFXTCxtQkFBWCxFQUFnQyxNQUFoQztBQUNELEdBTlksQ0FBYjtBQU9BQyxFQUFBQSxNQUFNLENBQUNLLFdBQVAsQ0FBbUIsTUFBbkI7QUFDQUwsRUFBQUEsTUFBTSxDQUFDTSxFQUFQLENBQVUsTUFBVixFQUFrQixVQUFVQyxvQkFBVixFQUFnQztBQUNoRGQsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksNkNBQTZDYSxvQkFBekQ7QUFDQWpCLElBQUFBLE1BQU0sSUFBSWlCLG9CQUFWO0FBQ0QsR0FIRDtBQUlBUCxFQUFBQSxNQUFNLENBQUNNLEVBQVAsQ0FBVSxPQUFWLEVBQW1CLFVBQVVFLEdBQVYsRUFBZTtBQUNoQ2YsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksOENBQThDYyxHQUExRDtBQUNELEdBRkQ7QUFHQVIsRUFBQUEsTUFBTSxDQUFDTSxFQUFQLENBQVUsS0FBVixFQUFpQixZQUFZO0FBQzNCTixJQUFBQSxNQUFNLENBQUNJLEdBQVA7QUFDQWIsSUFBQUEsSUFBSSxDQUFDLENBQUQsQ0FBSjtBQUNELEdBSEQ7QUFJRDs7QUFFRCxJQUFJO0FBQ0ZFLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLGtCQUFaO0FBQ0FHLEVBQUFBLE9BQU8sQ0FBQ0YsT0FBTyxDQUFDYyxJQUFSLENBQWEsQ0FBYixDQUFELEVBQWtCZCxPQUFPLENBQUNjLElBQVIsQ0FBYSxDQUFiLENBQWxCLENBQVA7QUFDRCxDQUhELENBR0UsT0FBT0QsR0FBUCxFQUFZO0FBQ1pmLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLHVCQUF1QixDQUFDYyxHQUFHLElBQUksRUFBUixFQUFZRSxRQUFaLEVBQW5DO0FBQ0FuQixFQUFBQSxJQUFJLENBQUMsQ0FBRCxDQUFKO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBub2RlXG5cbi8vIFRoaXMgc2NyaXB0IGlzIHVzZWQgYnkgdGhlIFVJQXV0byBqb2IsIHJ1bm5pbmcgb24gSW5zdHJ1bWVudHMsIHRvIGNvbm5lY3Rcbi8vIHRvIHRoZSBDb21tYW5kIFByb3h5LiBJdCB0cmFuc21pdHMgdGhlIEluc3RydW1lbnRzIG1lc3NhZ2VzIGV4YWN0bHkgYXMgdGhleVxuLy8gY29tZSBpbi4gQmVjYXVzZSBzdGRlcnIgaXMgdW5yZWxpYWJsZSwgd2UgYXBwZW5kIGxvZ3MgYW5kIHByb2dyYW0gb3V0cHV0XG4vLyBiZWZvcmUgc2VuZGluZyB0aGVtIHRvIHRoZSBVSUF1dG8gc2NyaXB0IGluIHRoZSBmb2xsb3dpbmcgZm9ybTpcbi8vIC0tLS0tIExPR1MgLS0tLS1cbi8vIGJsYWggYmxhaCBibGFoLi4uXG4vLyBibGFoIGJsYWggYmxhaC4uLlxuLy8gLS0tLS0gT1VUUFVUIC0tLS0tXG4vLyA8T1VUUFVUPlxuXG4vLyBUaGlzIHNjcmlwdCBpcyBydW4gb24gdGhlIGRldmljZSwgYW5kIGFzIHN1Y2ggaXMgbm90IEVTNi4gUHJvYmxlbXMgY2FuXG4vLyBlbnN1ZSBpZiBpdCBpcyB0cmFuc3BpbGVkLlxuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIG5ldCA9IHJlcXVpcmUoJ25ldCcpO1xuXG52YXIgb3V0cHV0ID0gJyc7XG5cbmZ1bmN0aW9uIGV4aXQgKHN0YXR1cykge1xuICBjb25zb2xlLmxvZygnLS0tLS0gT1VUUFVUIC0tLS0tJyk7XG4gIGNvbnNvbGUubG9nKG91dHB1dCk7XG4gIC8vIGNoaWxsIG91dCBiZWZvcmUgZXhpdGluZ1xuICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmV4aXQoc3RhdHVzKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNvbm5lY3QgKHNvY2ssIGRhdGFGcm9tSW5zdHJ1bWVudHMpIHtcbiAgdmFyIGNsaWVudCA9IG5ldC5jb25uZWN0KHtwYXRoOiBzb2NrfSwgZnVuY3Rpb24gKCkge1xuICAgIGlmIChkYXRhRnJvbUluc3RydW1lbnRzICYmIGRhdGFGcm9tSW5zdHJ1bWVudHMubGVuZ3RoID4gMCl7XG4gICAgICBjb25zb2xlLmxvZygnRGF0YSBmcm9tIGluc3RydW1lbnRzIHRvIGNvbW1hbmQgcHJveHk6Jyk7XG4gICAgICBjb25zb2xlLmxvZyhkYXRhRnJvbUluc3RydW1lbnRzLnN1YnN0cmluZygwLCAxMDApKTtcbiAgICB9XG4gICAgY2xpZW50LmVuZChkYXRhRnJvbUluc3RydW1lbnRzLCBcInV0ZjhcIik7XG4gIH0pO1xuICBjbGllbnQuc2V0RW5jb2RpbmcoJ3V0ZjgnKTtcbiAgY2xpZW50Lm9uKCdkYXRhJywgZnVuY3Rpb24gKGRhdGFGcm9tQ29tbWFuZFByb3h5KSB7XG4gICAgY29uc29sZS5sb2coJ0RhdGEgZnJvbSBjb21tYW5kIHByb3h5IHRvIGluc3RydW1lbnRzOiAnICsgZGF0YUZyb21Db21tYW5kUHJveHkpO1xuICAgIG91dHB1dCArPSBkYXRhRnJvbUNvbW1hbmRQcm94eTtcbiAgfSk7XG4gIGNsaWVudC5vbignZXJyb3InLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgY29uc29sZS5sb2coJ0Vycm9yIGZyb20gY29tbWFuZCBwcm94eSB0byBpbnN0cnVtZW50czogJyArIGVycik7XG4gIH0pO1xuICBjbGllbnQub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICBjbGllbnQuZW5kKCk7XG4gICAgZXhpdCgwKTtcbiAgfSk7XG59XG5cbnRyeSB7XG4gIGNvbnNvbGUubG9nKCctLS0tLSBMT0dTIC0tLS0tJyk7XG4gIGNvbm5lY3QocHJvY2Vzcy5hcmd2WzJdLCBwcm9jZXNzLmFyZ3ZbM10pO1xufSBjYXRjaCAoZXJyKSB7XG4gIGNvbnNvbGUubG9nKCdBbiBlcnJvciBvY2N1cmVkOiAnICsgKGVyciB8fCBcIlwiKS50b1N0cmluZygpKTtcbiAgZXhpdCgxKTtcbn1cbi8vIH0pO1xuXG4iXSwiZmlsZSI6ImxpYi91aWF1dG8vY29tbWFuZC1wcm94eS1jbGllbnQuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
