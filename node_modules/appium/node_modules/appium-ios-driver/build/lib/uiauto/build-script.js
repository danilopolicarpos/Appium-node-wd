"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _path = _interopRequireDefault(require("path"));

var _appiumSupport = require("appium-support");

var _lodash = _interopRequireDefault(require("lodash"));

let rootDir = _path.default.resolve(__dirname, '..', '..', '..', 'uiauto');

if (!__dirname.match(/build\/lib\/uiauto/)) {
  rootDir = _path.default.resolve(__dirname, 'uiauto');
}

const importRe = /^#import ('|")([^('|")]+)('|")$/mg;

async function getDepsForFile(file, filesExamined, extraImports = []) {
  if (_lodash.default.includes(filesExamined, file)) {
    throw new Error(`Re-examining file ${file}; you need to make sure ` + `the graph is set up so we do not require files twice`);
  }

  filesExamined.push(file);
  let data = await _appiumSupport.fs.readFile(file, 'utf8');
  let deps = {
    [file]: []
  };
  let imports = [];
  let match = importRe.exec(data);

  while (match) {
    if (match) {
      imports.push(match[2]);
    }

    match = importRe.exec(data);
  }

  imports = extraImports.concat(imports);

  for (let importedFile of imports) {
    let importedPath = _path.default.resolve(_path.default.dirname(file), importedFile);

    let importedDeps = await getDepsForFile(importedPath, filesExamined);
    deps[file].push(importedDeps);
  }

  return deps;
}

async function buildScriptFromDeps(deps) {
  let script = '';

  for (let [file, subDepsArray] of _lodash.default.toPairs(deps)) {
    for (let subDeps of subDepsArray) {
      script += await buildScriptFromDeps(subDeps);
    }

    let fileContents = await _appiumSupport.fs.readFile(file, 'utf8');
    let newFileData = stripImports(fileContents);
    let fileWithoutRoot = file.replace(`${rootDir}/`, '');
    script += `\n/* begin file: ${fileWithoutRoot} */\n`;
    script += newFileData;
    script += `\n/* end file: ${fileWithoutRoot} */\n`;
  }

  return script;
}

function stripImports(data) {
  data = data.replace(importRe, '');
  data = data.trim();
  return data;
}

async function buildScript(entryPoint, extraImports = []) {
  let filesExamined = [];
  let deps = await getDepsForFile(entryPoint, filesExamined, extraImports);
  let script = await buildScriptFromDeps(deps);
  return script;
}

var _default = buildScript;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi91aWF1dG8vYnVpbGQtc2NyaXB0LmpzIl0sIm5hbWVzIjpbInJvb3REaXIiLCJwYXRoIiwicmVzb2x2ZSIsIl9fZGlybmFtZSIsIm1hdGNoIiwiaW1wb3J0UmUiLCJnZXREZXBzRm9yRmlsZSIsImZpbGUiLCJmaWxlc0V4YW1pbmVkIiwiZXh0cmFJbXBvcnRzIiwiXyIsImluY2x1ZGVzIiwiRXJyb3IiLCJwdXNoIiwiZGF0YSIsImZzIiwicmVhZEZpbGUiLCJkZXBzIiwiaW1wb3J0cyIsImV4ZWMiLCJjb25jYXQiLCJpbXBvcnRlZEZpbGUiLCJpbXBvcnRlZFBhdGgiLCJkaXJuYW1lIiwiaW1wb3J0ZWREZXBzIiwiYnVpbGRTY3JpcHRGcm9tRGVwcyIsInNjcmlwdCIsInN1YkRlcHNBcnJheSIsInRvUGFpcnMiLCJzdWJEZXBzIiwiZmlsZUNvbnRlbnRzIiwibmV3RmlsZURhdGEiLCJzdHJpcEltcG9ydHMiLCJmaWxlV2l0aG91dFJvb3QiLCJyZXBsYWNlIiwidHJpbSIsImJ1aWxkU2NyaXB0IiwiZW50cnlQb2ludCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFHQSxJQUFJQSxPQUFPLEdBQUdDLGNBQUtDLE9BQUwsQ0FBYUMsU0FBYixFQUF3QixJQUF4QixFQUE4QixJQUE5QixFQUFvQyxJQUFwQyxFQUEwQyxRQUExQyxDQUFkOztBQUNBLElBQUksQ0FBQ0EsU0FBUyxDQUFDQyxLQUFWLENBQWdCLG9CQUFoQixDQUFMLEVBQTRDO0FBQzFDSixFQUFBQSxPQUFPLEdBQUdDLGNBQUtDLE9BQUwsQ0FBYUMsU0FBYixFQUF3QixRQUF4QixDQUFWO0FBQ0Q7O0FBR0QsTUFBTUUsUUFBUSxHQUFHLG1DQUFqQjs7QUFFQSxlQUFlQyxjQUFmLENBQStCQyxJQUEvQixFQUFxQ0MsYUFBckMsRUFBb0RDLFlBQVksR0FBRyxFQUFuRSxFQUF1RTtBQUVyRSxNQUFJQyxnQkFBRUMsUUFBRixDQUFXSCxhQUFYLEVBQTBCRCxJQUEx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QUNBLFNBQU9TLE1BQVA7QUFDRDs7ZUFFY1UsVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgZnMgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5cbmxldCByb290RGlyID0gcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uJywgJy4uJywgJy4uJywgJ3VpYXV0bycpO1xuaWYgKCFfX2Rpcm5hbWUubWF0Y2goL2J1aWxkXFwvbGliXFwvdWlhdXRvLykpIHtcbiAgcm9vdERpciA9IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICd1aWF1dG8nKTtcbn1cblxuLy8gdGhpcyByZWdleCBoZWxwcyB1cyBnZXQgdGhlIGZpbGUgcGF0aCBvZiBhbiBpbXBvcnRcbmNvbnN0IGltcG9ydFJlID0gL14jaW1wb3J0ICgnfFwiKShbXignfFwiKV0rKSgnfFwiKSQvbWc7XG5cbmFzeW5jIGZ1bmN0aW9uIGdldERlcHNGb3JGaWxlIChmaWxlLCBmaWxlc0V4YW1pbmVkLCBleHRyYUltcG9ydHMgPSBbXSkge1xuICAvLyBtYWtlIHN1cmUgd2UgZG9uJ3QgaGF2ZSBhIGN5Y2xlIGluIG91ciBkZXBlbmRlbmNpZXNcbiAgaWYgKF8uaW5jbHVkZXMoZmlsZXNFeGFtaW5lZCwgZmlsZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFJlLWV4YW1pbmluZyBmaWxlICR7ZmlsZX07IHlvdSBuZWVkIHRvIG1ha2Ugc3VyZSBgICtcbiAgICAgICAgICAgICAgICAgICAgYHRoZSBncmFwaCBpcyBzZXQgdXAgc28gd2UgZG8gbm90IHJlcXVpcmUgZmlsZXMgdHdpY2VgKTtcbiAgfVxuXG4gIC8vIHNhdmUgdGhlIGZpbGUgc28gd2UgZG9uJ3QgbG9vayBhdCBpdCBhZ2FpblxuICBmaWxlc0V4YW1pbmVkLnB1c2goZmlsZSk7XG4gIGxldCBkYXRhID0gYXdhaXQgZnMucmVhZEZpbGUoZmlsZSwgJ3V0ZjgnKTtcbiAgbGV0IGRlcHMgPSB7XG4gICAgW2ZpbGVdOiBbXVxuICB9O1xuXG4gIC8vIGNoZWNrIGZvciBpbXBvcnQgc3RhdGVtZW50cyBpbiB0aGUgZmlsZSwgYW5kIG1ha2UgYSBsaXN0IG9mIHRoZW1cbiAgbGV0IGltcG9ydHMgPSBbXTtcbiAgbGV0IG1hdGNoID0gaW1wb3J0UmUuZXhlYyhkYXRhKTtcbiAgd2hpbGUgKG1hdGNoKSB7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICBpbXBvcnRzLnB1c2gobWF0Y2hbMl0pO1xuICAgIH1cbiAgICBtYXRjaCA9IGltcG9ydFJlLmV4ZWMoZGF0YSk7XG4gIH1cbiAgLy8gYWRkIGluIGFueSBleHRyYSBpbXBvcnRzIHNlbnQgaW5cbiAgaW1wb3J0cyA9IGV4dHJhSW1wb3J0cy5jb25jYXQoaW1wb3J0cyk7XG5cbiAgLy8gZ28gdGhyb3VnaCBhbGwgdGhlIGltcG9ydHMgZm9yIHRoZSBmaWxlLCBhbmQgZG8gdGhlIHNhbWUgcHJvY2Vzc1xuICBmb3IgKGxldCBpbXBvcnRlZEZpbGUgb2YgaW1wb3J0cykge1xuICAgIGxldCBpbXBvcnRlZFBhdGggPSBwYXRoLnJlc29sdmUocGF0aC5kaXJuYW1lKGZpbGUpLCBpbXBvcnRlZEZpbGUpO1xuICAgIC8vIHJlY3Vyc2l2ZWx5IGdldCBkZXBlbmRlbmNpZXMgZm9yIGltcG9ydGVkIGZpbGVzXG4gICAgbGV0IGltcG9ydGVkRGVwcyA9IGF3YWl0IGdldERlcHNGb3JGaWxlKGltcG9ydGVkUGF0aCwgZmlsZXNFeGFtaW5lZCk7XG4gICAgZGVwc1tmaWxlXS5wdXNoKGltcG9ydGVkRGVwcyk7XG4gIH1cblxuICByZXR1cm4gZGVwcztcbn1cblxuYXN5bmMgZnVuY3Rpb24gYnVpbGRTY3JpcHRGcm9tRGVwcyAoZGVwcykge1xuICBsZXQgc2NyaXB0ID0gJyc7XG4gIC8vIGdvIHRocm91Z2ggYWxsIHRoZSBkZXBlbmRlbmNpZXMgYW5kIHJlY3Vyc2l2ZWx5XG4gIC8vIGFkZCB0aGVtIHRvIG91ciBzY3JpcHQgc3RyaW5nXG4gIGZvciAobGV0IFtmaWxlLCBzdWJEZXBzQXJyYXldIG9mIF8udG9QYWlycyhkZXBzKSkge1xuICAgIGZvciAobGV0IHN1YkRlcHMgb2Ygc3ViRGVwc0FycmF5KSB7XG4gICAgICBzY3JpcHQgKz0gYXdhaXQgYnVpbGRTY3JpcHRGcm9tRGVwcyhzdWJEZXBzKTtcbiAgICB9XG4gICAgbGV0IGZpbGVDb250ZW50cyA9IGF3YWl0IGZzLnJlYWRGaWxlKGZpbGUsICd1dGY4Jyk7XG4gICAgbGV0IG5ld0ZpbGVEYXRhID0gc3RyaXBJbXBvcnRzKGZpbGVDb250ZW50cyk7XG5cbiAgICBsZXQgZmlsZVdpdGhvdXRSb290ID0gZmlsZS5yZXBsYWNlKGAke3Jvb3REaXJ9L2AsICcnKTtcbiAgICBzY3JpcHQgKz0gYFxcbi8qIGJlZ2luIGZpbGU6ICR7ZmlsZVdpdGhvdXRSb290fSAqL1xcbmA7XG4gICAgc2NyaXB0ICs9IG5ld0ZpbGVEYXRhO1xuICAgIHNjcmlwdCArPSBgXFxuLyogZW5kIGZpbGU6ICR7ZmlsZVdpdGhvdXRSb290fSAqL1xcbmA7XG4gIH1cbiAgcmV0dXJuIHNjcmlwdDtcbn1cblxuZnVuY3Rpb24gc3RyaXBJbXBvcnRzIChkYXRhKSB7XG4gIC8vIGdldCByaWQgb2YgdGhlIGltcG9ydCBzdGF0ZW1lbnRzIGZyb20gdGhlIHN0cmluZ1xuICBkYXRhID0gZGF0YS5yZXBsYWNlKGltcG9ydFJlLCAnJyk7XG4gIGRhdGEgPSBkYXRhLnRyaW0oKTtcbiAgcmV0dXJuIGRhdGE7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGJ1aWxkU2NyaXB0IChlbnRyeVBvaW50LCBleHRyYUltcG9ydHMgPSBbXSkge1xuICAvLyBrZWVwIGEgbGlzdCBvZiBmaWxlcyB3ZSBleGFtaW5lIGZvciB0aGUgcHVycG9zZXMgb2YgbWFraW5nIHN1cmUgd2UncmVcbiAgLy8gbm90IGFkZGluZyB0aGUgc2FtZSBmaWxlIHRvIHRoZSBjb2xsYXRlZCB2ZXJzaW9uIHR3aWNlXG4gIGxldCBmaWxlc0V4YW1pbmVkID0gW107XG5cbiAgbGV0IGRlcHMgPSBhd2FpdCBnZXREZXBzRm9yRmlsZShlbnRyeVBvaW50LCBmaWxlc0V4YW1pbmVkLCBleHRyYUltcG9ydHMpO1xuICBsZXQgc2NyaXB0ID0gIGF3YWl0IGJ1aWxkU2NyaXB0RnJvbURlcHMoZGVwcyk7XG4gIHJldHVybiBzY3JpcHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJ1aWxkU2NyaXB0O1xuIl0sImZpbGUiOiJsaWIvdWlhdXRvL2J1aWxkLXNjcmlwdC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
