#!/usr/bin/env node
"use strict";

require("source-map-support/register");

var net = require('net');

var output = '';

function exit(status) {
  console.log('----- OUTPUT -----');
  console.log(output);
  process.nextTick(function () {
    process.exit(status);
  });
}

function connect(sock, dataFromInstruments) {
  var client = net.connect({
    path: sock
  }, function () {
    if (dataFromInstruments && dataFromInstruments.length > 0) {
      console.log('Data from instruments to command proxy:');
      console.log(dataFromInstruments.substring(0, 100));
    }

    client.end(dataFromInstruments, "utf8");
  });
  client.setEncoding('utf8');
  client.on('data', function (dataFromCommandProxy) {
    console.log('Data from command proxy to instruments: ' + dataFromCommandProxy);
    output += dataFromCommandProxy;
  });
  client.on('error', function (err) {
    console.log('Error from command proxy to instruments: ' + err);
  });
  client.on('end', function () {
    client.end();
    exit(0);
  });
}

try {
  console.log('----- LOGS -----');
  connect(process.argv[2], process.argv[3]);
} catch (err) {
  console.log('An error occured: ' + (err || "").toString());
  exit(1);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi91aWF1dG8vYmluL2NvbW1hbmQtcHJveHktY2xpZW50LmpzIl0sIm5hbWVzIjpbIm5ldCIsInJlcXVpcmUiLCJvdXRwdXQiLCJleGl0Iiwic3RhdHVzIiwiY29uc29sZSIsImxvZyIsInByb2Nlc3MiLCJuZXh0VGljayIsImNvbm5lY3QiLCJzb2NrIiwiZGF0YUZyb21JbnN0cnVtZW50cyIsImNsaWVudCIsInBhdGgiLCJsZW5ndGgiLCJzdWJzdHJpbmciLCJlbmQiLCJzZXRFbmNvZGluZyIsIm9uIiwiZGF0YUZyb21Db21tYW5kUHJveHkiLCJlcnIiLCJhcmd2IiwidG9TdHJpbmciXSwibWFwcGluZ3MiOiJBQUFBO0FBZUE7Ozs7QUFFQSxJQUFJQSxHQUFHLEdBQUdDLE9BQU8sQ0FBQyxLQUFELENBQWpCOztBQUVBLElBQUlDLE1BQU0sR0FBRyxFQUFiOztBQUVBLFNBQVNDLElBQVQsQ0FBZUMsTUFBZixFQUF1QjtBQUNyQkMsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksb0JBQVo7QUFDQUQsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlKLE1BQVo7QUFFQUssRUFBQUEsT0FBTyxDQUFDQyxRQUFSLENBQWlCLFlBQVk7QUFDM0JELElBQUFBLE9BQU8sQ0FBQ0osSUFBUixDQUFhQyxNQUFiO0FBQ0QsR0FGRDtBQUdEOztBQUVELFNBQVNLLE9BQVQsQ0FBa0JDLElBQWxCLEVBQXdCQyxtQkFBeEIsRUFBNkM7QUFDM0MsTUFBSUMsTUFBTSxHQUFHWixHQUFHLENBQUNTLE9BQUosQ0FBWTtBQUFDSSxJQUFBQSxJQUFJLEVBQUVIO0FBQVAsR0FBWixFQUEwQixZQUFZO0FBQ2pELFFBQUlDLG1CQUFtQixJQUFJQSxtQkFBbUIsQ0FBQ0csTUFBcEIsR0FBNkIsQ0FBeEQsRUFBMEQ7QUFDeERULE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLHlDQUFaO0FBQ0FELE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZSyxtQkFBbUIsQ0FBQ0ksU0FBcEIsQ0FBOEIsQ0FBOUIsRUFBaUMsR0FBakMsQ0FBWjtBQUNEOztBQUNESCxJQUFBQSxNQUFNLENBQUNJLEdBQVAsQ0FBV0wsbUJBQVgsRUFBZ0MsTUFBaEM7QUFDRCxHQU5ZLENBQWI7QUFPQUMsRUFBQUEsTUFBTSxDQUFDSyxXQUFQLENBQW1CLE1BQW5CO0FBQ0FMLEVBQUFBLE1BQU0sQ0FBQ00sRUFBUCxDQUFVLE1BQVYsRUFBa0IsVUFBVUMsb0JBQVYsRUFBZ0M7QUFDaERkLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLDZDQUE2Q2Esb0JBQXpEO0FBQ0FqQixJQUFBQSxNQUFNLElBQUlpQixvQkFBVjtBQUNELEdBSEQ7QUFJQVAsRUFBQUEsTUFBTSxDQUFDTSxFQUFQLENBQVUsT0FBVixFQUFtQixVQUFVRSxHQUFWLEVBQWU7QUFDaENmLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLDhDQUE4Q2MsR0FBMUQ7QUFDRCxHQUZEO0FBR0FSLEVBQUFBLE1BQU0sQ0FBQ00sRUFBUCxDQUFVLEtBQVYsRUFBaUIsWUFBWTtBQUMzQk4sSUFBQUEsTUFBTSxDQUFDSSxHQUFQO0FBQ0FiLElBQUFBLElBQUksQ0FBQyxDQUFELENBQUo7QUFDRCxHQUhEO0FBSUQ7O0FBRUQsSUFBSTtBQUNGRSxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxrQkFBWjtBQUNBRyxFQUFBQSxPQUFPLENBQUNGLE9BQU8sQ0FBQ2MsSUFBUixDQUFhLENBQWIsQ0FBRCxFQUFrQmQsT0FBTyxDQUFDYyxJQUFSLENBQWEsQ0FBYixDQUFsQixDQUFQO0FBQ0QsQ0FIRCxDQUdFLE9BQU9ELEdBQVAsRUFBWTtBQUNaZixFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSx1QkFBdUIsQ0FBQ2MsR0FBRyxJQUFJLEVBQVIsRUFBWUUsUUFBWixFQUFuQztBQUNBbkIsRUFBQUEsSUFBSSxDQUFDLENBQUQsQ0FBSjtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiIyEvdXNyL2Jpbi9lbnYgbm9kZVxuXG4vLyBUaGlzIHNjcmlwdCBpcyB1c2VkIGJ5IHRoZSBVSUF1dG8gam9iLCBydW5uaW5nIG9uIEluc3RydW1lbnRzLCB0byBjb25uZWN0XG4vLyB0byB0aGUgQ29tbWFuZCBQcm94eS4gSXQgdHJhbnNtaXRzIHRoZSBJbnN0cnVtZW50cyBtZXNzYWdlcyBleGFjdGx5IGFzIHRoZXlcbi8vIGNvbWUgaW4uIEJlY2F1c2Ugc3RkZXJyIGlzIHVucmVsaWFibGUsIHdlIGFwcGVuZCBsb2dzIGFuZCBwcm9ncmFtIG91dHB1dFxuLy8gYmVmb3JlIHNlbmRpbmcgdGhlbSB0byB0aGUgVUlBdXRvIHNjcmlwdCBpbiB0aGUgZm9sbG93aW5nIGZvcm06XG4vLyAtLS0tLSBMT0dTIC0tLS0tXG4vLyBibGFoIGJsYWggYmxhaC4uLlxuLy8gYmxhaCBibGFoIGJsYWguLi5cbi8vIC0tLS0tIE9VVFBVVCAtLS0tLVxuLy8gPE9VVFBVVD5cblxuLy8gVGhpcyBzY3JpcHQgaXMgcnVuIG9uIHRoZSBkZXZpY2UsIGFuZCBhcyBzdWNoIGlzIG5vdCBFUzYuIFByb2JsZW1zIGNhblxuLy8gZW5zdWUgaWYgaXQgaXMgdHJhbnNwaWxlZC5cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBuZXQgPSByZXF1aXJlKCduZXQnKTtcblxudmFyIG91dHB1dCA9ICcnO1xuXG5mdW5jdGlvbiBleGl0IChzdGF0dXMpIHtcbiAgY29uc29sZS5sb2coJy0tLS0tIE9VVFBVVCAtLS0tLScpO1xuICBjb25zb2xlLmxvZyhvdXRwdXQpO1xuICAvLyBjaGlsbCBvdXQgYmVmb3JlIGV4aXRpbmdcbiAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5leGl0KHN0YXR1cyk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjb25uZWN0IChzb2NrLCBkYXRhRnJvbUluc3RydW1lbnRzKSB7XG4gIHZhciBjbGllbnQgPSBuZXQuY29ubmVjdCh7cGF0aDogc29ja30sIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZGF0YUZyb21JbnN0cnVtZW50cyAmJiBkYXRhRnJvbUluc3RydW1lbnRzLmxlbmd0aCA+IDApe1xuICAgICAgY29uc29sZS5sb2coJ0RhdGEgZnJvbSBpbnN0cnVtZW50cyB0byBjb21tYW5kIHByb3h5OicpO1xuICAgICAgY29uc29sZS5sb2coZGF0YUZyb21JbnN0cnVtZW50cy5zdWJzdHJpbmcoMCwgMTAwKSk7XG4gICAgfVxuICAgIGNsaWVudC5lbmQoZGF0YUZyb21JbnN0cnVtZW50cywgXCJ1dGY4XCIpO1xuICB9KTtcbiAgY2xpZW50LnNldEVuY29kaW5nKCd1dGY4Jyk7XG4gIGNsaWVudC5vbignZGF0YScsIGZ1bmN0aW9uIChkYXRhRnJvbUNvbW1hbmRQcm94eSkge1xuICAgIGNvbnNvbGUubG9nKCdEYXRhIGZyb20gY29tbWFuZCBwcm94eSB0byBpbnN0cnVtZW50czogJyArIGRhdGFGcm9tQ29tbWFuZFByb3h5KTtcbiAgICBvdXRwdXQgKz0gZGF0YUZyb21Db21tYW5kUHJveHk7XG4gIH0pO1xuICBjbGllbnQub24oJ2Vycm9yJywgZnVuY3Rpb24gKGVycikge1xuICAgIGNvbnNvbGUubG9nKCdFcnJvciBmcm9tIGNvbW1hbmQgcHJveHkgdG8gaW5zdHJ1bWVudHM6ICcgKyBlcnIpO1xuICB9KTtcbiAgY2xpZW50Lm9uKCdlbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgY2xpZW50LmVuZCgpO1xuICAgIGV4aXQoMCk7XG4gIH0pO1xufVxuXG50cnkge1xuICBjb25zb2xlLmxvZygnLS0tLS0gTE9HUyAtLS0tLScpO1xuICBjb25uZWN0KHByb2Nlc3MuYXJndlsyXSwgcHJvY2Vzcy5hcmd2WzNdKTtcbn0gY2F0Y2ggKGVycikge1xuICBjb25zb2xlLmxvZygnQW4gZXJyb3Igb2NjdXJlZDogJyArIChlcnIgfHwgXCJcIikudG9TdHJpbmcoKSk7XG4gIGV4aXQoMSk7XG59XG4vLyB9KTtcblxuIl0sImZpbGUiOiJsaWIvdWlhdXRvL2Jpbi9jb21tYW5kLXByb3h5LWNsaWVudC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLiJ9
