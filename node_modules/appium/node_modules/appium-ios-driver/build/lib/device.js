"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.runSimulatorReset = runSimulatorReset;
exports.isolateSimulatorDevice = isolateSimulatorDevice;
exports.checkSimulatorAvailable = checkSimulatorAvailable;
exports.moveBuiltInApp = moveBuiltInApp;
exports.getAdjustedDeviceName = getAdjustedDeviceName;
exports.endSimulator = endSimulator;
exports.runRealDeviceReset = runRealDeviceReset;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumIosSimulator = require("appium-ios-simulator");

var _path = _interopRequireDefault(require("path"));

var utils = _interopRequireWildcard(require("./utils"));

var _logger = _interopRequireDefault(require("./logger"));

async function checkSimulatorAvailable(opts, sdkVersion, availableDevices) {
  if (sdkVersion < 7.1) {
    _logger.default.debug('Instruments v < 7.1, not checking device string support');

    return;
  }

  _logger.default.debug('Checking whether our device string is supported');

  let dString = await getAdjustedDeviceName(opts);

  let noDevicesError = function () {
    let msg = `Could not find a device to launch. You requested ` + `'${dString}', but the available devices were: ` + JSON.stringify(availableDevices);

    _logger.default.errorAndThrow(msg);
  };

  if (sdkVersion >= 8) {
    let sim = utils.getSimForDeviceString(dString, availableDevices);

    if (sim[0] === null || sim[1] === null) {
      noDevicesError();
    }

    _logger.default.debug(`iOS sim UDID is ${sim[1]}`);

    return sim[1];
  } else if (!_lodash.default.includes(availableDevices, dString)) {
    noDevicesError();
  }
}

async function getAdjustedDeviceName(opts) {
  opts._adjustedDeviceName = opts._adjustedDeviceName || (await (0, _appiumIosSimulator.getDeviceString)(opts));
  return opts._adjustedDeviceName;
}

async function moveBuiltInApp() {}

async function runSimulatorReset(sim, opts, keepApp) {
  if (!opts.reset && !opts.fullReset) {
    _logger.default.debug('Reset not set, not ending sim');

    return;
  }

  _logger.default.debug('Running ios sim reset flow');

  await endSimulator(sim);

  if (opts.fullReset) {
    _logger.default.debug('Full reset is on, so erasing simulator');

    await fullResetSimulator(sim);
  } else if (opts.reset) {
    await resetSimulator(sim, opts, keepApp);
  }
}

async function fullResetSimulator(sim) {
  _logger.default.debug('Cleaning the simulator');

  if (sim) {
    await sim.clean();
  }
}

async function resetSimulator(sim, opts, keepApp) {
  if (!sim) return;

  _logger.default.debug('Cleaning sim state.');

  try {
    await clearAppData(sim, opts, keepApp);
  } catch (err) {
    _logger.default.warn(err);

    _logger.default.warn('Could not reset simulator. Leaving as is.');
  }
}

async function endSimulator(sim) {
  if (!sim) return;

  _logger.default.debug('Killing the simulator');

  await sim.shutdown();
}

async function isolateSimulatorDevice(sim, opts, sdkVersion) {
  if (opts.isolateSimDevice && sdkVersion >= 8) {
    await sim.isolateSim();
  }
}

async function clearAppData(sim, opts, keepApp) {
  if (!keepApp && opts.app && opts.bundleId) {
    await sim.cleanCustomApp(_path.default.basename(opts.app), opts.bundleId);
  }
}

async function resetRealDevice(device, opts) {
  if (opts.bundleId && opts.fullReset) {
    let bundleId = opts.bundleId;

    _logger.default.debug(`Full reset requested. Will try to uninstall the app '${bundleId}'.`);

    if (!(await device.isInstalled(bundleId))) {
      _logger.default.debug('App not installed. No need to uninstall');

      return;
    }

    try {
      await device.remove(bundleId);
    } catch (err) {
      _logger.default.error(`Could not remove '${bundleId}' from device`);

      throw err;
    }

    _logger.default.debug(`Removed ${bundleId}`);
  }
}

async function runRealDeviceReset(device, opts) {
  if (opts.reset || opts.fullReset) {
    _logger.default.debug('Running ios real device reset flow');

    if (opts.reset) {
      await resetRealDevice(device, opts);
    }
  } else {
    _logger.default.debug('Reset not set, continuing');
  }
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
