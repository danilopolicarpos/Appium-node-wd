"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.startServer = startServer;
exports.startHttpsServer = startHttpsServer;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("./logger"));

var _appiumBaseDriver = require("appium-base-driver");

var _driver = require("./driver");

var _https = _interopRequireDefault(require("https"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _requestPromise = _interopRequireDefault(require("request-promise"));

var _url = _interopRequireDefault(require("url"));

var _portfinder = _interopRequireDefault(require("portfinder"));

const pem = _bluebird.default.promisifyAll(require('pem'));

async function startServer(port, host) {
  let driver = new _driver.IosDriver();
  let router = (0, _appiumBaseDriver.routeConfiguringFunction)(driver);
  let server = await (0, _appiumBaseDriver.server)(router, port, host);

  _logger.default.info(`IosDriver server listening on http://${host}:${port}`);

  return server;
}

async function startHttpsServer(port, host) {
  let privateKey = await pem.createPrivateKeyAsync();
  let keys = await pem.createCertificateAsync({
    days: 1,
    selfSigned: true,
    serviceKey: privateKey.key
  });
  let pemCertificate = keys.certificate;
  let httpsPort = await _portfinder.default.getPortPromise();
  const serverOpts = {
    key: keys.serviceKey,
    cert: pemCertificate
  };

  let sslServer = _https.default.createServer(serverOpts, function requestReceived(req, res) {
    _logger.default.debug(`Received HTTPS '${req.method}' request for '${req.url}'`);

    if (req.method === 'OPTIONS') {
      res.setHeader('Access-Control-Allow-Origin', '*');
      res.setHeader('Access-Control-Allow-Methods', 'POST, GET, OPTIONS');
      res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
      res.writeHead(200);
      res.end();
    } else if (req.method === 'POST') {
      let body = '';
      req.on('data', function onData(data) {
        body += data;
      });
      req.on('end', async function onEnd() {
        let httpsUrl = _url.default.parse(req.url);

        let uri = `http://${host}:${port}${httpsUrl.pathname}`;

        _logger.default.debug(`Passing '${body}' to '${uri}'`);

        let options = {
          method: 'POST',
          uri,
          body
        };
        await (0, _requestPromise.default)(options);
        res.writeHead(200);
        res.end();
      });
    }
  }).listen(httpsPort);

  return {
    sslServer,
    pemCertificate,
    httpsPort
  };
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9zZXJ2ZXIuanMiXSwibmFtZXMiOlsicGVtIiwiQiIsInByb21pc2lmeUFsbCIsInJlcXVpcmUiLCJzdGFydFNlcnZlciIsInBvcnQiLCJob3N0IiwiZHJpdmVyIiwiSW9zRHJpdmVyIiwicm91dGVyIiwic2VydmVyIiwibG9nIiwiaW5mbyIsInN0YXJ0SHR0cHNTZXJ2ZXIiLCJwcml2YXRlS2V5IiwiY3JlYXRlUHJpdmF0ZUtleUFzeW5jIiwia2V5cyIsImNyZWF0ZUNlcnRpZmljYXRlQXN5bmMiLCJkYXlzIiwic2VsZlNpZ25lZCIsInNlcnZpY2VLZXkiLCJrZXkiLCJwZW1DZXJ0aWZpY2F0ZSIsImNlcnRpZmljYXRlIiwiaHR0cHNQb3J0IiwicG9ydGZpbmRlciIsImdldFBvcnRQcm9taXNlIiwic2VydmVyT3B0cyIsImNlcnQiLCJzc2xTZXJ2ZXIiLCJodHRwcyIsImNyZWF0ZVNlcnZlciIsInJlcXVlc3RSZWNlaXZlZCIsInJlcSIsInJlcyIsImRlYnVnIiwibWV0aG9kIiwidXJsIiwic2V0SGVhZGVyIiwid3JpdGVIZWFkIiwiZW5kIiwiYm9keSIsIm9uIiwib25EYXRhIiwiZGF0YSIsIm9uRW5kIiwiaHR0cHNVcmwiLCJwYXJzZSIsInVyaSIsInBhdGhuYW1lIiwib3B0aW9ucyIsImxpc3RlbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0EsTUFBTUEsR0FBRyxHQUFHQyxrQkFBRUMsWUFBRixDQUFlQyxPQUFPLENBQUMsS0FBRCxDQUF0QixDQUFaOztBQUdBLGVBQWVDLFdBQWYsQ0FBNEJDLElBQTVCLEVBQWtDQyxJQUFsQyxFQUF3QztBQUN0QyxNQUFJQyxNQUFNLEdBQUcsSUFBSUMsaUJBQUosRUFBYjtBQUNBLE1BQUlDLE1BQU0sR0FBRyxnREFBeUJGLE1BQXpCLENBQWI7QUFDQSxNQUFJRyxNQUFNLEdBQUcsTUFBTSw4QkFBV0QsTUFBWCxF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dCB7IHNlcnZlciBhcyBiYXNlU2VydmVyLCByb3V0ZUNvbmZpZ3VyaW5nRnVuY3Rpb24gfSBmcm9tICdhcHBpdW0tYmFzZS1kcml2ZXInO1xuaW1wb3J0IHsgSW9zRHJpdmVyIH0gZnJvbSAnLi9kcml2ZXInO1xuaW1wb3J0IGh0dHBzIGZyb20gJ2h0dHBzJztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCByZXF1ZXN0IGZyb20gJ3JlcXVlc3QtcHJvbWlzZSc7XG5pbXBvcnQgdXJsIGZyb20gJ3VybCc7XG5pbXBvcnQgcG9ydGZpbmRlciBmcm9tICdwb3J0ZmluZGVyJztcbmNvbnN0IHBlbSA9IEIucHJvbWlzaWZ5QWxsKHJlcXVpcmUoJ3BlbScpKTtcblxuXG5hc3luYyBmdW5jdGlvbiBzdGFydFNlcnZlciAocG9ydCwgaG9zdCkge1xuICBsZXQgZHJpdmVyID0gbmV3IElvc0RyaXZlcigpO1xuICBsZXQgcm91dGVyID0gcm91dGVDb25maWd1cmluZ0Z1bmN0aW9uKGRyaXZlcik7XG4gIGxldCBzZXJ2ZXIgPSBhd2FpdCBiYXNlU2VydmVyKHJvdXRlciwgcG9ydCwgaG9zdCk7XG4gIGxvZy5pbmZvKGBJb3NEcml2ZXIgc2VydmVyIGxpc3RlbmluZyBvbiBodHRwOi8vJHtob3N0fToke3BvcnR9YCk7XG4gIHJldHVybiBzZXJ2ZXI7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHN0YXJ0SHR0cHNTZXJ2ZXIgKHBvcnQsIGhvc3QpIHtcbiAgLy8gQ3JlYXRlIGEgcmFuZG9tIHBlbSBjZXJ0aWZpY2F0ZVxuICBsZXQgcHJpdmF0ZUtleSA9IGF3YWl0IHBlbS5jcmVhdGVQcml2YXRlS2V5QXN5bmMoKTtcbiAgbGV0IGtleXMgPSBhd2FpdCBwZW0uY3JlYXRlQ2VydGlmaWNhdGVBc3luYyh7ZGF5czogMSwgc2VsZlNpZ25lZDogdHJ1ZSwgc2VydmljZUtleTogcHJpdmF0ZUtleS5rZXl9KTtcbiAgbGV0IHBlbUNlcnRpZmljYXRlID0ga2V5cy5jZXJ0aWZpY2F0ZTtcblxuICAvLyBmaW5kIGEgcG9ydFxuICBsZXQgaHR0cHNQb3J0ID0gYXdhaXQgcG9ydGZpbmRlci5nZXRQb3J0UHJvbWlzZSgpO1xuXG4gIC8vIEhvc3QgYW4gU1NMIHNlcnZlciB0aGF0IHVzZXMgdGhhdCBjZXJ0aWZpY2F0ZVxuICBjb25zdCBzZXJ2ZXJPcHRzID0ge2tleToga2V5cy5zZXJ2aWNlS2V5LCBjZXJ0OiBwZW1DZXJ0aWZpY2F0ZX07XG4gIGxldCBzc2xTZXJ2ZXIgPSBodHRwcy5jcmVhdGVTZXJ2ZXIoc2VydmVyT3B0cywgZnVuY3Rpb24gcmVxdWVzdFJlY2VpdmVkIChyZXEsIHJlcykge1xuICAgIGxvZy5kZWJ1ZyhgUmVjZWl2ZWQgSFRUUFMgJyR7cmVxLm1ldGhvZH0nIHJlcXVlc3QgZm9yICcke3JlcS51cmx9J2ApO1xuICAgIGlmIChyZXEubWV0aG9kID09PSAnT1BUSU9OUycpIHtcbiAgICAgIHJlcy5zZXRIZWFkZXIoJ0FjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbicsICcqJyk7XG4gICAgICByZXMuc2V0SGVhZGVyKCdBY2Nlc3MtQ29udHJvbC1BbGxvdy1NZXRob2RzJywgJ1BPU1QsIEdFVCwgT1BUSU9OUycpO1xuICAgICAgcmVzLnNldEhlYWRlcignQWNjZXNzLUNvbnRyb2wtQWxsb3ctSGVhZGVycycsICdDb250ZW50LVR5cGUnKTtcbiAgICAgIHJlcy53cml0ZUhlYWQoMjAwKTtcbiAgICAgIHJlcy5lbmQoKTtcbiAgICB9IGVsc2UgaWYgKHJlcS5tZXRob2QgPT09ICdQT1NUJykge1xuICAgICAgbGV0IGJvZHkgPSAnJztcbiAgICAgIHJlcS5vbignZGF0YScsIGZ1bmN0aW9uIG9uRGF0YSAoZGF0YSkge1xuICAgICAgICBib2R5ICs9IGRhdGE7XG4gICAgICB9KTtcbiAgICAgIHJlcS5vbignZW5kJywgYXN5bmMgZnVuY3Rpb24gb25FbmQgKCkge1xuICAgICAgICBsZXQgaHR0cHNVcmwgPSB1cmwucGFyc2UocmVxLnVybCk7XG4gICAgICAgIGxldCB1cmkgPSBgaHR0cDovLyR7aG9zdH06JHtwb3J0fSR7aHR0cHNVcmwucGF0aG5hbWV9YDtcbiAgICAgICAgbG9nLmRlYnVnKGBQYXNzaW5nICcke2JvZHl9JyB0byAnJHt1cml9J2ApO1xuXG4gICAgICAgIC8vIG5vdyB3ZSBzZW5kIHRvIHRoZSByaWdodCBwbGFjZVxuICAgICAgICBsZXQgb3B0aW9ucyA9IHtcbiAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICB1cmksXG4gICAgICAgICAgYm9keSxcbiAgICAgICAgfTtcbiAgICAgICAgYXdhaXQgcmVxdWVzdChvcHRpb25zKTtcbiAgICAgICAgcmVzLndyaXRlSGVhZCgyMDApO1xuICAgICAgICByZXMuZW5kKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0pLmxpc3RlbihodHRwc1BvcnQpO1xuXG4gIHJldHVybiB7XG4gICAgc3NsU2VydmVyLFxuICAgIHBlbUNlcnRpZmljYXRlLFxuICAgIGh0dHBzUG9ydCxcbiAgfTtcbn1cblxuZXhwb3J0IHsgc3RhcnRTZXJ2ZXIsIHN0YXJ0SHR0cHNTZXJ2ZXIgfTtcbiJdLCJmaWxlIjoibGliL3NlcnZlci5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiJ9
