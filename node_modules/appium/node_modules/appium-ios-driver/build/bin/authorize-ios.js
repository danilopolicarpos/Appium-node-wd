#!/usr/bin/env node
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.authorize = authorize;
exports.default = void 0;

require("source-map-support/register");

var _teen_process = require("teen_process");

var _appiumXcode = _interopRequireDefault(require("appium-xcode"));

var _appiumSupport = require("appium-support");

var _path = _interopRequireDefault(require("path"));

var _glob2 = _interopRequireDefault(require("glob"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _lodash = _interopRequireDefault(require("lodash"));

const glob = _bluebird.default.promisify(_glob2.default);

const log = _appiumSupport.logger.getLogger('AuthorizeIOS');

async function authorize(insecure) {
  let xcodeDir;
  let user;

  try {
    log.info('Enabling DevToolsSecurity');
    await (0, _teen_process.exec)('DevToolsSecurity', ['--enable']);
    log.info(`Updating security db for ${insecure ? 'insecure' : 'developer'} access`);
    const cmd = 'security';
    const args = ['authorizationdb', 'write', 'system.privilege.taskport', insecure ? 'allow' : 'is-developer'];
    await (0, _teen_process.exec)(cmd, args);
    log.info('Granting access to built-in simulator apps');

    if (!process.env.HOME) {
      throw new Error('Could not determine your $HOME');
    }

    user = /\/([^/]+)$/.exec(process.env.HOME)[1];
    xcodeDir = await _appiumXcode.default.getPath();
    log.info(`The xcode directory is: ${xcodeDir}`);
  } catch (e) {
    log.errorAndThrow(e);
  }

  const olderXcodeSimulatorPath = _path.default.resolve(xcodeDir, 'Platforms/iPhoneSimulator.platform/' + 'Developer/SDKs/iPhoneSimulator*.sdk/Applications');

  const newerXcodeSimulatorPath = _path.default.resolve('/Library/Developer/CoreSimulator/' + 'Profiles/Runtimes/iOS *.simruntime/' + 'Contents/Resources/RuntimeRoot/Applications/');

  const directories = [...(await glob(olderXcodeSimulatorPath)), ...(await glob(newerXcodeSimulatorPath))].filter(async dir => await _appiumSupport.fs.exists(dir));

  if (_lodash.default.isEmpty(directories)) {
    log.warn('No iOS sim app directories to change. Skipping.');
    return;
  }

  log.info(`Changing ownership to '${user}' on directories: ${directories.join(', ')}`);

  try {
    const args = ['-R', `${user}:`, ...directories];
    await (0, _teen_process.exec)('chown', args);
  } catch (err) {
    log.error(`Encountered an issue changing user priveledges ` + `for iOS sim app dirs: ${directories}`);
    log.error(`Error was: ${err.message}`);
  }
}

if (require.main === module) {
  authorize();
}

var _default = authorize;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJpbi9hdXRob3JpemUtaW9zLmpzIl0sIm5hbWVzIjpbImdsb2IiLCJCIiwicHJvbWlzaWZ5IiwiX2dsb2IiLCJsb2ciLCJsb2dnZXIiLCJnZXRMb2dnZXIiLCJhdXRob3JpemUiLCJpbnNlY3VyZSIsInhjb2RlRGlyIiwidXNlciIsImluZm8iLCJjbWQiLCJhcmdzIiwicHJvY2VzcyIsImVudiIsIkhPTUUiLCJFcnJvciIsImV4ZWMiLCJ4Y29kZSIsImdldFBhdGgiLCJlIiwiZXJyb3JBbmRUaHJvdyIsIm9sZGVyWGNvZGVTaW11bGF0b3JQYXRoIiwicGF0aCIsInJlc29sdmUiLCJuZXdlclhjb2RlU2ltdWxhdG9yUGF0aCIsImRpcmVjdG9yaWVzIiwiZmlsdGVyIiwiZGlyIiwiZnMiLCJleGlzdHMiLCJfIiwiaXNFbXB0eSIsIndhcm4iLCJqb2luIiwiZXJyIiwiZXJyb3IiLCJtZXNzYWdlIiwicmVxdWlyZSIsIm1haW4iLCJtb2R1bGUiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBR0EsTUFBTUEsSUFBSSxHQUFHQyxrQkFBRUMsU0FBRixDQUFZQyxjQUFaLENBQWI7O0FBQ0EsTUFBTUMsR0FBRyxHQUFHQyxzQkFBT0MsU0FBUCxDQUFpQixjQUFqQixDQUFaOztBQUVBLGVBQWVDLFNBQWYsQ0FBMEJDLFFBQTFCLEVBQW9DO0FBQ2xDLE1BQUlDLFFBQUo7QUFDQSxNQUFJQyxJQUFKOztBQUVBLE1BQUk7QUFFRk4sSUFBQUEsR0FBRyxDQUFDTyxJQUFKLENBQVMsMkJBQVQ7QUFDQSxVQUFNLHdCQUFLLGtCQUFMLEVBQXlCLENBQUMsVUFBRCxDQUF6QixDQUFOO0FBRUFQLElBQUFBLEdBQUcsQ0FBQ08sSUFBSixDQUFVLDRCQUEyQkgsUUFBUSxHQUFHLFVBQUgsR0FBZ0IsV0FBWSxTQUF6RTtBQUNBLFVBQU1JLEdBQUcsR0FBRyxVQUFaO0FBQ0EsVUFBTUMsSUFBSSxHQUFHLENBQ1gsaUJBRFcsRUFDUSxPQURSLEVBQ2lCLDJCQURqQixFQUVWTCxRQUFRLEdBQUcsT0FBSCxHQUFhLGNBRlgsQ0FBYjtBQUlBLFVBQU0sd0JBQUtJLEdBQUwsRUFBVUMsSUFBVixDQUFOO0FBRUFULElBQUFBLEdBQUcsQ0FBQ08sSUFBSixDQUFTLDRDQUFUOztBQUNBLFFBQUksQ0FBQ0csT0FBTyxDQUFDQyxHQUFSLENBQVlDLElBQWpCLEVBQXVCO0FBQ3JCLFlBQU0sSUFBSUMsS0FBSixDQUFVLGdDQUFWLENBQU47QUFDRDs7QUFFRFAsSUFBQUEsSUFBSSxHQUFHLGFBQWFRLElBQWIsQ0FBa0JKLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxJQUE5QixFQUFvQyxDQUFwQyxDQUFQO0FBQ0FQLElBQUFBLFFBQVEsR0FBRyxNQUFNVSxxQkFBTUMsT0FBTixFQUFqQjtBQUNBaEIsSUFBQUEsR0FBRyxDQUFDTyxJQUFKLENBQVUsMkJBQTBCRixRQUFTLEVBQTdDO0FBQ0QsR0FyQkQsQ0FxQkUsT0FBT1ksQ0FBUCxFQUFVO0FBQ1ZqQixJQUFBQSxHQUFHLENBQUNrQixhQUFKLENBQWtCRCxDQUFsQjtBQUNEOztBQUdELFFBQU1FLHVCQUF1QixHQUFHQyxjQUFLQyxPQUFMLENBQWFoQixRQUFiLEVBQ0osd0NBQ0Esa0RBRkksQ0FBaEM7O0FBR0EsUUFBTWlCLHVCQUF1QixHQUFHRixjQUFLQyxPQUFMLENBQWEsc0NBQ2pCLHFDQURpQixHQUVqQiw4Q0FGSSxDQUFoQzs7QUFJQSxRQUFNRSxXQUFXLEdBQUcsQ0FDbEIsSUFBRyxNQUFNM0IsSUFBSSxDQUFDdUIsdUJBQUQsQ0FBYixDQURrQixFQUVsQixJQUFHLE1BQU12QixJQUFJLENBQUMwQix1QkFBRCxDQUFiLENBRmtCLEVBR2xCRSxNQUhrQixDQUdYLE1BQU9DLEdBQVAsSUFBZSxNQUFNQyxrQkFBR0MsTUFBSCxDQUFVRixHQUFWLENBSFYsQ0FBcEI7O0FBS0EsTUFBSUcsZ0JBQUVDLE9BQUYsQ0FBVU4sV0FBVixDQUFKLEVBQTRCO0FBQzFCdkIsSUFBQUEsR0FBRyxDQUFDOEIsSUFBSixDQUFTLGlEQUFUO0FBQ0E7QUFDRDs7QUFFRDlCLEVBQUFBLEdBQUcsQ0FBQ08sSUFBSixDQUFVLDBCQUF5QkQsSUFBSyxxQkFBb0JpQixXQUFXLENBQUNRLElBQVosQ0FBaUIsSUFBakIsQ0FBdUIsRUFBbkY7O0FBQ0EsTUFBSTtBQUNGLFVBQU10QixJQUFJLEdBQUcsQ0FBQyxJQUFELEVBQVEsR0FBRUgsSUFBSyxHQUFmLEVBQW1CLEdBQUdpQixXQUF0QixDQUFiO0FBQ0EsVUFBTSx3QkFBSyxPQUFMLEVBQWNkLElBQWQsQ0FBTjtBQUNELEdBSEQsQ0FHRSxPQUFPdUIsR0FBUCxFQUFZO0FBQ1poQyxJQUFBQSxHQUFHLENBQUNpQyxLQUFKLENBQVcsaURBQUQsR0FDSSx5QkFBd0JWLFdBQVksRUFEbEQ7QUFFQXZCLElBQUFBLEdBQUcsQ0FBQ2lDLEtBQUosQ0FBVyxjQUFhRCxHQUFHLENBQUNFLE9BQVEsRUFBcEM7QUFDRDtBQUNGOztBQUVELElBQUlDLE9BQU8sQ0FBQ0MsSUFBUixLQUFpQkMsTUFBckIsRUFBNkI7QUFDM0JsQyxFQUFBQSxTQUFTO0FBQ1Y7O2VBSWNBLFMiLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBub2RlXG5pbXBvcnQgeyBleGVjIH0gZnJvbSAndGVlbl9wcm9jZXNzJztcbmltcG9ydCB4Y29kZSBmcm9tICdhcHBpdW0teGNvZGUnO1xuaW1wb3J0IHsgZnMsIGxvZ2dlciB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IF9nbG9iIGZyb20gJ2dsb2InO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuXG5jb25zdCBnbG9iID0gQi5wcm9taXNpZnkoX2dsb2IpO1xuY29uc3QgbG9nID0gbG9nZ2VyLmdldExvZ2dlcignQXV0aG9yaXplSU9TJyk7XG5cbmFzeW5jIGZ1bmN0aW9uIGF1dGhvcml6ZSAoaW5zZWN1cmUpIHtcbiAgbGV0IHhjb2RlRGlyO1xuICBsZXQgdXNlcjtcblxuICB0cnkge1xuICAgIC8vIGVuYWJsZSBkZXZlbG9wZXIgdG9vbHNcbiAgICBsb2cuaW5mbygnRW5hYmxpbmcgRGV2VG9vbHNTZWN1cml0eScpO1xuICAgIGF3YWl0IGV4ZWMoJ0RldlRvb2xzU2VjdXJpdHknLCBbJy0tZW5hYmxlJ10pO1xuICAgIC8vIHVwZGF0ZSBzZWN1cml0eSBkYiAtLSByZW1vdmVzIGF1dGhvcml6YXRpb24gcHJvbXB0XG4gICAgbG9nLmluZm8oYFVwZGF0aW5nIHNlY3VyaXR5IGRiIGZvciAke2luc2VjdXJlID8gJ2luc2VjdXJlJyA6ICdkZXZlbG9wZXInfSBhY2Nlc3NgKTtcbiAgICBjb25zdCBjbWQgPSAnc2VjdXJpdHknO1xuICAgIGNvbnN0IGFyZ3MgPSBbXG4gICAgICAnYXV0aG9yaXphdGlvbmRiJywgJ3dyaXRlJywgJ3N5c3RlbS5wcml2aWxlZ2UudGFza3BvcnQnLFxuICAgICAgKGluc2VjdXJlID8gJ2FsbG93JyA6ICdpcy1kZXZlbG9wZXInKSxcbiAgICBdO1xuICAgIGF3YWl0IGV4ZWMoY21kLCBhcmdzKTtcblxuICAgIGxvZy5pbmZvKCdHcmFudGluZyBhY2Nlc3MgdG8gYnVpbHQtaW4gc2ltdWxhdG9yIGFwcHMnKTtcbiAgICBpZiAoIXByb2Nlc3MuZW52LkhPTUUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGRldGVybWluZSB5b3VyICRIT01FJyk7XG4gICAgfVxuXG4gICAgdXNlciA9IC9cXC8oW14vXSspJC8uZXhlYyhwcm9jZXNzLmVudi5IT01FKVsxXTtcbiAgICB4Y29kZURpciA9IGF3YWl0IHhjb2RlLmdldFBhdGgoKTtcbiAgICBsb2cuaW5mbyhgVGhlIHhjb2RlIGRpcmVjdG9yeSBpczogJHt4Y29kZURpcn1gKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGxvZy5lcnJvckFuZFRocm93KGUpO1xuICB9XG5cbiAgLy8gY2hhbmdlIHBlcm1pc3Npb25cbiAgY29uc3Qgb2xkZXJYY29kZVNpbXVsYXRvclBhdGggPSBwYXRoLnJlc29sdmUoeGNvZGVEaXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnUGxhdGZvcm1zL2lQaG9uZVNpbXVsYXRvci5wbGF0Zm9ybS8nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdEZXZlbG9wZXIvU0RLcy9pUGhvbmVTaW11bGF0b3IqLnNkay9BcHBsaWNhdGlvbnMnKTtcbiAgY29uc3QgbmV3ZXJYY29kZVNpbXVsYXRvclBhdGggPSBwYXRoLnJlc29sdmUoJy9MaWJyYXJ5L0RldmVsb3Blci9Db3JlU2ltdWxhdG9yLycgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1Byb2ZpbGVzL1J1bnRpbWVzL2lPUyAqLnNpbXJ1bnRpbWUvJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQ29udGVudHMvUmVzb3VyY2VzL1J1bnRpbWVSb290L0FwcGxpY2F0aW9ucy8nKTtcblxuICBjb25zdCBkaXJlY3RvcmllcyA9IFtcbiAgICAuLi5hd2FpdCBnbG9iKG9sZGVyWGNvZGVTaW11bGF0b3JQYXRoKSxcbiAgICAuLi5hd2FpdCBnbG9iKG5ld2VyWGNvZGVTaW11bGF0b3JQYXRoKSxcbiAgXS5maWx0ZXIoYXN5bmMgKGRpcikgPT4gYXdhaXQgZnMuZXhpc3RzKGRpcikpO1xuXG4gIGlmIChfLmlzRW1wdHkoZGlyZWN0b3JpZXMpKSB7XG4gICAgbG9nLndhcm4oJ05vIGlPUyBzaW0gYXBwIGRpcmVjdG9yaWVzIHRvIGNoYW5nZS4gU2tpcHBpbmcuJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbG9nLmluZm8oYENoYW5naW5nIG93bmVyc2hpcCB0byAnJHt1c2VyfScgb24gZGlyZWN0b3JpZXM6ICR7ZGlyZWN0b3JpZXMuam9pbignLCAnKX1gKTtcbiAgdHJ5IHtcbiAgICBjb25zdCBhcmdzID0gWyctUicsIGAke3VzZXJ9OmAsIC4uLmRpcmVjdG9yaWVzXTtcbiAgICBhd2FpdCBleGVjKCdjaG93bicsIGFyZ3MpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBsb2cuZXJyb3IoYEVuY291bnRlcmVkIGFuIGlzc3VlIGNoYW5naW5nIHVzZXIgcHJpdmVsZWRnZXMgYCArXG4gICAgICAgICAgICAgICAgIGBmb3IgaU9TIHNpbSBhcHAgZGlyczogJHtkaXJlY3Rvcmllc31gKTtcbiAgICBsb2cuZXJyb3IoYEVycm9yIHdhczogJHtlcnIubWVzc2FnZX1gKTtcbiAgfVxufVxuXG5pZiAocmVxdWlyZS5tYWluID09PSBtb2R1bGUpIHtcbiAgYXV0aG9yaXplKCk7XG59XG5cblxuZXhwb3J0IHsgYXV0aG9yaXplIH07XG5leHBvcnQgZGVmYXVsdCBhdXRob3JpemU7XG4iXSwiZmlsZSI6ImJpbi9hdXRob3JpemUtaW9zLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIn0=
