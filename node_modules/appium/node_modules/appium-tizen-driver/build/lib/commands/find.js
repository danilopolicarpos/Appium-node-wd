"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumBaseDriver = require("appium-base-driver");

let helpers = {},
    extensions = {};
exports.helpers = helpers;
let elements = {};
let index = 0;

helpers.doFindElementOrEls = async function (params) {
  let strategy = "automationId";

  if (params.strategy === "name") {
    strategy = params.strategy;
  }

  let param = {
    "elementId": params.selector,
    strategy
  };
  let result = await this.bootstrap.sendAction('find', param);

  if (!_lodash.default.isEmpty(result)) {
    result.forEach(function (element) {
      index++;
      elements[index] = element.ELEMENT;
      element.ELEMENT = `${index}`;
    });

    if (!params.multiple) {
      result = result[0];
    }
  }

  return result;
};

helpers.findElOrEls = async function (strategy, selector, mult, context = '') {
  this.validateLocatorStrategy(strategy);

  if (!selector) {
    throw new Error("Must provide a selector when finding elements");
  }

  let params = {
    strategy,
    selector,
    context,
    multiple: mult
  };
  let element;

  let doFind = async () => {
    try {
      element = await this.doFindElementOrEls(params);
    } catch (err) {
      if ((0, _appiumBaseDriver.isErrorType)(err, _appiumBaseDriver.errors.NoSuchElementError)) {
        return false;
      }

      throw err;
    }

    return !_lodash.default.isEmpty(element);
  };

  try {
    await this.implicitWaitForCondition(doFind);
  } catch (err) {
    if (err.message && err.message.match(/Condition unmet/)) {
      element = [];
    } else {
      throw err;
    }
  }

  if (mult) {
    return element;
  } else {
    if (_lodash.default.isEmpty(element)) {
      throw new _appiumBaseDriver.errors.NoSuchElementError();
    }

    return element;
  }
};

helpers.getAutomationId = function (elementId) {
  let result = elements[elementId];

  if (!result) {
    result = "";
  }

  return result;
};

Object.assign(extensions, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9maW5kLmpzIl0sIm5hbWVzIjpbImhlbHBlcnMiLCJleHRlbnNpb25zIiwiZWxlbWVudHMiLCJpbmRleCIsImRvRmluZEVsZW1lbnRPckVscyIsInBhcmFtcyIsInN0cmF0ZWd5IiwicGFyYW0iLCJzZWxlY3RvciIsInJlc3VsdCIsImJvb3RzdHJhcCIsInNlbmRBY3Rpb24iLCJfIiwiaXNFbXB0eSIsImZvckVhY2giLCJlbGVtZW50IiwiRUxFTUVOVCIsIm11bHRpcGxlIiwiZmluZEVsT3JFbHMiLCJtdWx0IiwiY29udGV4dCIsInZhbGlkYXRlTG9jYXRvclN0cmF0ZWd5IiwiRXJyb3IiLCJkb0ZpbmQiLCJlcnIiLCJlcnJvcnMiLCJOb1N1Y2hFbGVtZW50RXJyb3IiLCJpbXBsaWNpdFdhaXRGb3JDb25kaXRpb24iLCJtZXNzYWdlIiwibWF0Y2giLCJnZXRBdXRvbWF0aW9uSWQiLCJlbGVtZW50SWQiLCJPYmplY3QiLCJhc3NpZ24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUEsSUFBSUEsT0FBTyxHQUFHLEVBQWQ7QUFBQSxJQUFrQkMsVUFBVSxHQUFHLEVBQS9COztBQUVBLElBQUlDLFFBQVEsR0FBRyxFQUFmO0FBQ0EsSUFBSUMsS0FBSyxHQUFHLENBQVo7O0FBRUFILE9BQU8sQ0FBQ0ksa0JBQVIsR0FBNkIsZ0JBQWdCQyxNQUFoQixFQUF3QjtBQUNuRCxNQUFJQyxRQUFRLEdBQUcsY0FBZjs7QUFFQSxNQUFJRCxNQUFNLENBQUNDLFFBQVAsS0FBb0IsTUFBeEIsRUFBZ0M7QUFDOUJBLElBQUFBLFFBQVEsR0FBR0QsTUFBTSxDQUFDQyxRQUFsQjtBQUNEOztBQUVELE1BQUlDLEtBQUssR0FBRztBQUFFLGlCQUFhRixNQUFNLENBQUNHLFFBQXRCO0FBQWdDRixJQUFBQTtBQUFoQyxHQUFaO0FBQ0EsTUFBSUcsTUFBTSxHQUFHLE1BQU0sS0FBS0MsU0FBTCxDQUFlQyxVQUFmLENBQTBCLE1BQTFCLEVBQWtDSixLQUFsQyxDQUFuQjs7QUFFQSxNQUFJLENBQUNLLGdCQUFFQyxPQUFGLENBQVVKLE1BQVYsQ0FBTCxFQUF3QjtBQUN0QkEsSUFBQUEsTUFBTSxDQUFDSyxPQUFQLENBQWUsVUFBVUMsT0FBVixFQUFtQjtBQUNoQ1osTUFBQUEsS0FBSztBQUNMRCxNQUFBQSxRQUFRLENBQUNDLEtBQUQsQ0FBUixHQUFrQlksT0FBTyxDQUFDQyxPQUExQjtBQUNBRCxNQUFBQSxPQUFPLENBQUNDLE9BQVIsR0FBbUIsR0FBRWIsS0FBTSxFQUEzQjtBQUNELEtBSkQ7O0FBTUEsUUFBSSxDQUFDRSxNQUFNLENBQUNZLFFBQVosRUFBc0I7QUFDcEJSLE1BQUFBLE1BQU0sR0FBR0EsTUFBTSxDQUFDLENBQUQsQ0FBZjtBQUNEO0FBQ0Y7O0FBRUQsU0FBT0EsTUFBUDtBQUNELENBdkJEOztBQXlCQVQsT0FBTyxDQUFDa0IsV0FBUixHQUFzQixnQkFBZ0JaLFFBQWhCLEVBQTBCRSxRQUExQixFQUFvQ1csSUFBcEMsRUFBMENDLE9BQU8sR0FBRyxFQUFwRCxFQUF3RDtBQUM1RSxPQUFLQyx1QkFBTCxDQUE2QmYsUUFBN0I7O0FBRUEsTUFBSSxDQUFDRSxRQUFMLEVBQWU7QUFDYixVQUFNLElBQUljLEtBQUosQ0FBVSwrQ0FBVixDQUFOO0FBQ0Q7O0FBRUQsTUFBSWpCLE1BQU0sR0FBRztBQUNYQyxJQUFBQSxRQURXO0FBRVhFLElBQUFBLFFBRlc7QUFHWFksSUFBQUEsT0FIVztBQUlYSCxJQUFBQSxRQUFRLEVBQUVFO0FBSkMsR0FBYjtBQU9BLE1BQUlKLE9BQUo7O0FBQ0EsTUFBSVEsTUFBTSxHQUFHLFlBQVk7QUFDdkIsUUFBSTtBQUNGUixNQUFBQSxPQUFPLEdBQUcsTUFBTSxLQUFLWCxrQkFBTCxDQUF3QkMsTUFBeEIsQ0FBaEI7QUFDRCxLQUZELENBRUUsT0FBT21CLEdBQVAsRUFBWTtBQUNaLFVBQUksbUNBQVlBLEdBQVosRUFBaUJDLHlCQUFPQyxrQkFBeEIsQ0FBSixFQUFpRDtBQUMvQyxlQUFPLEtBQVA7QUFDRDs7QUFDRCxZQUFNRixHQUFOO0FBQ0Q7O0FBRUQsV0FBTyxDQUFDWixnQkFBRUMsT0FBRixDQUFVRSxPQUFWLENBQVI7QUFDRCxHQVhEOztBQWFBLE1BQUk7QUFDRixVQUFNLEtBQUtZLHdCQUFMLENBQThCSixNQUE5QixDQUFOO0FBQ0QsR0FGRCxDQUVFLE9BQU9DLEdBQVAsRUFBWTtBQUNaLFFBQUlBLEdBQUcsQ0FBQ0ksT0FBSixJQUFlSixHQUFHLENBQUNJLE9BQUosQ0FBWUMsS0FBWixDQUFrQixpQkFBbEIsQ0FBbkIsRUFBeUQ7QUFDdkRkLE1BQUFBLE9BQU8sR0FBRyxFQUFWO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsWUFBTVMsR0FBTjtBQUNEO0FBQ0Y7O0FBRUQsTUFBSUwsSUFBSixFQUFVO0FBQ1IsV0FBT0osT0FBUDtBQUNELEdBRkQsTUFFTztBQUNMLFFBQUlILGdCQUFFQyxPQUFGLENBQVVFLE9BQVYsQ0FBSixFQUF3QjtBQUN0QixZQUFNLElBQUlVLHlCQUFPQyxrQkFBWCxFQUFOO0FBQ0Q7O0FBQ0QsV0FBT1gsT0FBUDtBQUNEO0FBQ0YsQ0E5Q0Q7O0FBZ0RBZixPQUFPLENBQUM4QixlQUFSLEdBQTBCLFVBQVVDLFNBQVYsRUFBcUI7QUFDN0MsTUFBSXRCLE1BQU0sR0FBR1AsUUFBUSxDQUFDNkIsU0FBRCxDQUFyQjs7QUFDQSxNQUFJLENBQUN0QixNQUFMLEVBQWE7QUFDWEEsSUFBQUEsTUFBTSxHQUFHLEVBQVQ7QUFDRDs7QUFDRCxTQUFPQSxNQUFQO0FBQ0QsQ0FORDs7QUFRQXVCLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjaEMsVUFBZCxFQUEwQkQsT0FBMUI7ZUFFZUMsVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBlcnJvcnMsIGlzRXJyb3JUeXBlIH0gZnJvbSAnYXBwaXVtLWJhc2UtZHJpdmVyJztcblxubGV0IGhlbHBlcnMgPSB7fSwgZXh0ZW5zaW9ucyA9IHt9O1xuXG5sZXQgZWxlbWVudHMgPSB7fTtcbmxldCBpbmRleCA9IDA7XG5cbmhlbHBlcnMuZG9GaW5kRWxlbWVudE9yRWxzID0gYXN5bmMgZnVuY3Rpb24gKHBhcmFtcykge1xuICBsZXQgc3RyYXRlZ3kgPSBcImF1dG9tYXRpb25JZFwiO1xuXG4gIGlmIChwYXJhbXMuc3RyYXRlZ3kgPT09IFwibmFtZVwiKSB7XG4gICAgc3RyYXRlZ3kgPSBwYXJhbXMuc3RyYXRlZ3k7XG4gIH1cblxuICBsZXQgcGFyYW0gPSB7IFwiZWxlbWVudElkXCI6IHBhcmFtcy5zZWxlY3Rvciwgc3RyYXRlZ3kgfTtcbiAgbGV0IHJlc3VsdCA9IGF3YWl0IHRoaXMuYm9vdHN0cmFwLnNlbmRBY3Rpb24oJ2ZpbmQnLCBwYXJhbSk7XG5cbiAgaWYgKCFfLmlzRW1wdHkocmVzdWx0KSkge1xuICAgIHJlc3VsdC5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICBpbmRleCsrO1xuICAgICAgZWxlbWVudHNbaW5kZXhdID0gZWxlbWVudC5FTEVNRU5UO1xuICAgICAgZWxlbWVudC5FTEVNRU5UID0gYCR7aW5kZXh9YDtcbiAgICB9KTtcblxuICAgIGlmICghcGFyYW1zLm11bHRpcGxlKSB7XG4gICAgICByZXN1bHQgPSByZXN1bHRbMF07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmhlbHBlcnMuZmluZEVsT3JFbHMgPSBhc3luYyBmdW5jdGlvbiAoc3RyYXRlZ3ksIHNlbGVjdG9yLCBtdWx0LCBjb250ZXh0ID0gJycpIHtcbiAgdGhpcy52YWxpZGF0ZUxvY2F0b3JTdHJhdGVneShzdHJhdGVneSk7XG5cbiAgaWYgKCFzZWxlY3Rvcikge1xuICAgIHRocm93IG5ldyBFcnJvcihcIk11c3QgcHJvdmlkZSBhIHNlbGVjdG9yIHdoZW4gZmluZGluZyBlbGVtZW50c1wiKTtcbiAgfVxuXG4gIGxldCBwYXJhbXMgPSB7XG4gICAgc3RyYXRlZ3ksXG4gICAgc2VsZWN0b3IsXG4gICAgY29udGV4dCxcbiAgICBtdWx0aXBsZTogbXVsdFxuICB9O1xuXG4gIGxldCBlbGVtZW50O1xuICBsZXQgZG9GaW5kID0gYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBlbGVtZW50ID0gYXdhaXQgdGhpcy5kb0ZpbmRFbGVtZW50T3JFbHMocGFyYW1zKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGlmIChpc0Vycm9yVHlwZShlcnIsIGVycm9ycy5Ob1N1Y2hFbGVtZW50RXJyb3IpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHRocm93IGVycjtcbiAgICB9XG5cbiAgICByZXR1cm4gIV8uaXNFbXB0eShlbGVtZW50KTtcbiAgfTtcblxuICB0cnkge1xuICAgIGF3YWl0IHRoaXMuaW1wbGljaXRXYWl0Rm9yQ29uZGl0aW9uKGRvRmluZCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmIChlcnIubWVzc2FnZSAmJiBlcnIubWVzc2FnZS5tYXRjaCgvQ29uZGl0aW9uIHVubWV0LykpIHtcbiAgICAgIGVsZW1lbnQgPSBbXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgfVxuXG4gIGlmIChtdWx0KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH0gZWxzZSB7XG4gICAgaWYgKF8uaXNFbXB0eShlbGVtZW50KSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5Ob1N1Y2hFbGVtZW50RXJyb3IoKTtcbiAgICB9XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cbn07XG5cbmhlbHBlcnMuZ2V0QXV0b21hdGlvbklkID0gZnVuY3Rpb24gKGVsZW1lbnRJZCkge1xuICBsZXQgcmVzdWx0ID0gZWxlbWVudHNbZWxlbWVudElkXTtcbiAgaWYgKCFyZXN1bHQpIHtcbiAgICByZXN1bHQgPSBcIlwiO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5PYmplY3QuYXNzaWduKGV4dGVuc2lvbnMsIGhlbHBlcnMpO1xuZXhwb3J0IHsgaGVscGVycyB9O1xuZXhwb3J0IGRlZmF1bHQgZXh0ZW5zaW9ucztcbiJdLCJmaWxlIjoibGliL2NvbW1hbmRzL2ZpbmQuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
