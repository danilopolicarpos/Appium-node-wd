"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("../logger"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _appiumBaseDriver = require("appium-base-driver");

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;
let x = 1,
    y = 1;

commands.doTouchAction = async function (action, opts) {
  let result;

  switch (action) {
    case 'tap':
      return await this.tap(opts.element, opts.x, opts.y, opts.count);

    case 'press':
      x = opts.x;
      y = opts.y;
      return await this.touchDown(opts.x, opts.y, opts.element);

    case 'release':
      if (!opts.x) {
        opts.x = x;
      }

      if (!opts.y) {
        opts.y = y;
      }

      return await this.touchUp(opts.x, opts.y, opts.element);

    case 'moveTo':
      result = await this.touchMove(x, y, opts.x, opts.y, opts.steps, opts.element);
      x = opts.x;
      y = opts.y;
      return result;

    case 'wait':
      return await _bluebird.default.delay(opts.ms);

    case 'longPress':
      if (typeof opts.duration === 'undefined' || !opts.duration) {
        opts.duration = 2000;
      }

      return await this.touchLongClick(opts.element, opts.x, opts.y, opts.duration);

    default:
      _logger.default.errorAndThrow(`unknown action ${action}`);

  }
};

commands.performGesture = async function (gesture) {
  try {
    return await this.doTouchAction(gesture.action, gesture.options || {});
  } catch (e) {
    if ((0, _appiumBaseDriver.isErrorType)(e, _appiumBaseDriver.errors.NoSuchElementError) && gesture.action === 'release' && gesture.options.element) {
      delete gesture.options.element;

      _logger.default.debug(`retrying release without element opts: ${gesture.options}.`);

      return await this.doTouchAction(gesture.action, gesture.options || {});
    }

    throw e;
  }
};

commands.performTouch = async function (gestures) {
  let result = true;

  for (let g of gestures) {
    if (!(await this.performGesture(g))) {
      result = false;
    }
  }

  return result;
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy90b3VjaC5qcyJdLCJuYW1lcyI6WyJjb21tYW5kcyIsImhlbHBlcnMiLCJleHRlbnNpb25zIiwieCIsInkiLCJkb1RvdWNoQWN0aW9uIiwiYWN0aW9uIiwib3B0cyIsInJlc3VsdCIsInRhcCIsImVsZW1lbnQiLCJjb3VudCIsInRvdWNoRG93biIsInRvdWNoVXAiLCJ0b3VjaE1vdmUiLCJzdGVwcyIsIkIiLCJkZWxheSIsIm1zIiwiZHVyYXRpb24iLCJ0b3VjaExvbmdDbGljayIsImxvZyIsImVycm9yQW5kVGhyb3ciLCJwZXJmb3JtR2VzdHVyZSIsImdlc3R1cmUiLCJvcHRpb25zIiwiZSIsImVycm9ycyIsIk5vU3VjaEVsZW1lbnRFcnJvciIsImRlYnVnIiwicGVyZm9ybVRvdWNoIiwiZ2VzdHVyZXMiLCJnIiwiT2JqZWN0IiwiYXNzaWduIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUVBLElBQUlBLFFBQVEsR0FBRyxFQUFmO0FBQUEsSUFBbUJDLE9BQU8sR0FBRyxFQUE3QjtBQUFBLElBQWlDQyxVQUFVLEdBQUcsRUFBOUM7OztBQUVBLElBQUlDLENBQUMsR0FBRyxDQUFSO0FBQUEsSUFBV0MsQ0FBQyxHQUFHLENBQWY7O0FBRUFKLFFBQVEsQ0FBQ0ssYUFBVCxHQUF5QixnQkFBZ0JDLE1BQWhCLEVBQXdCQyxJQUF4QixFQUE4QjtBQUNyRCxNQUFJQyxNQUFKOztBQUNBLFVBQVFGLE1BQVI7QUFDRSxTQUFLLEtBQUw7QUFDRSxhQUFPLE1BQU0sS0FBS0csR0FBTCxDQUFTRixJQUFJLENBQUNHLE9BQWQsRUFBdUJILElBQUksQ0FBQ0osQ0FBNUIsRUFBK0JJLElBQUksQ0FBQ0gsQ0FBcEMsRUFBdUNHLElBQUksQ0FBQ0ksS0FBNUMsQ0FBYjs7QUFDRixTQUFLLE9BQUw7QUFDRVIsTUFBQUEsQ0FBQyxHQUFHSSxJQUFJLENBQUNKLENBQVQ7QUFDQUMsTUFBQUEsQ0FBQyxHQUFHRyxJQUFJLENB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QUEsTUFBTSxHQUFHLEtBQVQ7QUFDRDtBQUNGOztBQUVELFNBQU9BLE1BQVA7QUFDRCxDQVZEOztBQVlBeUIsTUFBTSxDQUFDQyxNQUFQLENBQWNoQyxVQUFkLEVBQTBCRixRQUExQixFQUFvQ0MsT0FBcEM7ZUFFZUMsVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyJztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCB7IGVycm9ycywgaXNFcnJvclR5cGUgfSBmcm9tICdhcHBpdW0tYmFzZS1kcml2ZXInO1xuXG5sZXQgY29tbWFuZHMgPSB7fSwgaGVscGVycyA9IHt9LCBleHRlbnNpb25zID0ge307XG5cbmxldCB4ID0gMSwgeSA9IDE7XG5cbmNvbW1hbmRzLmRvVG91Y2hBY3Rpb24gPSBhc3luYyBmdW5jdGlvbiAoYWN0aW9uLCBvcHRzKSB7XG4gIGxldCByZXN1bHQ7XG4gIHN3aXRjaCAoYWN0aW9uKSB7XG4gICAgY2FzZSAndGFwJzpcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnRhcChvcHRzLmVsZW1lbnQsIG9wdHMueCwgb3B0cy55LCBvcHRzLmNvdW50KTtcbiAgICBjYXNlICdwcmVzcyc6XG4gICAgICB4ID0gb3B0cy54O1xuICAgICAgeSA9IG9wdHMueTtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnRvdWNoRG93bihvcHRzLngsIG9wdHMueSwgb3B0cy5lbGVtZW50KTtcbiAgICBjYXNlICdyZWxlYXNlJzpcbiAgICAgIGlmICghb3B0cy54KSB7XG4gICAgICAgIG9wdHMueCA9IHg7XHJcbiAgICAgIH1cbiAgICAgIGlmICghb3B0cy55KSB7XG4gICAgICAgIG9wdHMueSA9IHk7XHJcbiAgICAgIH1cbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnRvdWNoVXAob3B0cy54LCBvcHRzLnksIG9wdHMuZWxlbWVudCk7XG4gICAgY2FzZSAnbW92ZVRvJzpcbiAgICAgIHJlc3VsdCA9IGF3YWl0IHRoaXMudG91Y2hNb3ZlKHgsIHksIG9wdHMueCwgb3B0cy55LCBvcHRzLnN0ZXBzLCBvcHRzLmVsZW1lbnQpO1xuICAgICAgeCA9IG9wdHMueDtcbiAgICAgIHkgPSBvcHRzLnk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIGNhc2UgJ3dhaXQnOlxuICAgICAgcmV0dXJuIGF3YWl0IEIuZGVsYXkob3B0cy5tcyk7XG4gICAgY2FzZSAnbG9uZ1ByZXNzJzpcbiAgICAgIGlmICh0eXBlb2Ygb3B0cy5kdXJhdGlvbiA9PT0gJ3VuZGVmaW5lZCcgfHwgIW9wdHMuZHVyYXRpb24pIHtcbiAgICAgICAgb3B0cy5kdXJhdGlvbiA9IDIwMDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy50b3VjaExvbmdDbGljayhvcHRzLmVsZW1lbnQsIG9wdHMueCwgb3B0cy55LCBvcHRzLmR1cmF0aW9uKTtcbiAgICBkZWZhdWx0OlxuICAgICAgbG9nLmVycm9yQW5kVGhyb3coYHVua25vd24gYWN0aW9uICR7YWN0aW9ufWApO1xuICB9XG59O1xuXG5jb21tYW5kcy5wZXJmb3JtR2VzdHVyZSA9IGFzeW5jIGZ1bmN0aW9uIChnZXN0dXJlKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuZG9Ub3VjaEFjdGlvbihnZXN0dXJlLmFjdGlvbiwgZ2VzdHVyZS5vcHRpb25zIHx8IHt9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIHNvbWV0aW1lIHRoZSBlbGVtZW50IGlzIG5vdCBhdmFpbGFibGUgd2hlbiByZWxlYXNpbmcsIHJldHJ5IHdpdGhvdXQgaXRcbiAgICBpZiAoaXNFcnJvclR5cGUoZSwgZXJyb3JzLk5vU3VjaEVsZW1lbnRFcnJvcikgJiYgZ2VzdHVyZS5hY3Rpb24gPT09ICdyZWxlYXNlJyAmJlxuICAgICAgZ2VzdHVyZS5vcHRpb25zLmVsZW1lbnQpIHtcbiAgICAgIGRlbGV0ZSBnZXN0dXJlLm9wdGlvbnMuZWxlbWVudDtcbiAgICAgIGxvZy5kZWJ1ZyhgcmV0cnlpbmcgcmVsZWFzZSB3aXRob3V0IGVsZW1lbnQgb3B0czogJHtnZXN0dXJlLm9wdGlvbnN9LmApO1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZG9Ub3VjaEFjdGlvbihnZXN0dXJlLmFjdGlvbiwgZ2VzdHVyZS5vcHRpb25zIHx8IHt9KTtcbiAgICB9XG4gICAgdGhyb3cgZTtcbiAgfVxufTtcblxuY29tbWFuZHMucGVyZm9ybVRvdWNoID0gYXN5bmMgZnVuY3Rpb24gKGdlc3R1cmVzKSB7XG4gIGxldCByZXN1bHQgPSB0cnVlO1xuXG4gIGZvciAobGV0IGcgb2YgZ2VzdHVyZXMpIHtcbiAgICBpZiAoIShhd2FpdCB0aGlzLnBlcmZvcm1HZXN0dXJlKGcpKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbk9iamVjdC5hc3NpZ24oZXh0ZW5zaW9ucywgY29tbWFuZHMsIGhlbHBlcnMpO1xuZXhwb3J0IHsgY29tbWFuZHMsIGhlbHBlcnMgfTtcbmV4cG9ydCBkZWZhdWx0IGV4dGVuc2lvbnM7XG4iXSwiZmlsZSI6ImxpYi9jb21tYW5kcy90b3VjaC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
