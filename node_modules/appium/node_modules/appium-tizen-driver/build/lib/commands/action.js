"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

require("source-map-support/register");

var _appiumSupport = require("appium-support");

var _lodash = _interopRequireDefault(require("lodash"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _path = _interopRequireDefault(require("path"));

var _jimp = _interopRequireDefault(require("jimp"));

var _logger = _interopRequireDefault(require("../logger"));

const swipeStepsPerSec = 28;
let commands = {},
    extensions = {};
exports.commands = commands;

commands.flick = async function (element, xSpeed, ySpeed, xOffset, yOffset, speed) {
  if (element) {
    return await this.fakeFlickElement(element, xOffset, yOffset, speed);
  } else {
    return await this.fakeFlick(xSpeed, ySpeed);
  }
};

commands.fakeFlick = async function (xSpeed, ySpeed) {
  return await this.bootstrap.sendAction('element:flick', {
    xSpeed,
    ySpeed
  });
};

commands.fakeFlickElement = async function (elementId, xoffset, yoffset, speed) {
  let steps = 1250.0 / speed + 1;
  let xStart = 1;
  let yStart = 1;

  if (elementId === this.sessionId) {
    elementId = null;
  }

  if (elementId) {
    let location = await this.getLocationValueByElementId(elementId);
    xStart = location[0];
    yStart = location[1];
  }

  let xEnd = xStart + xoffset;
  let yEnd = yStart + yoffset;
  let params = [xStart, yStart, xEnd, yEnd, steps];
  return await this.doSwipe(params);
};

commands.swipe = async function (startX, startY, endX, endY, duration) {
  if (startX === 'null') {
    startX = 1;
  }

  if (startY === 'null') {
    startY = 1;
  }

  let swipeOpts = [startX, startY, endX, endY, Math.round(duration * swipeStepsPerSec)];
  return await this.doSwipe(swipeOpts);
};

commands.doSwipe = async function (swipeOpts) {
  return await this.bootstrap.sendAction("element:drag", swipeOpts);
};

commands.pullFile = async function (remotePath) {
  const rootDir = _path.default.resolve(__dirname, '..', '..');

  const filePath = _path.default.resolve(rootDir, 'file');

  let localFile = filePath + '/appiumfile.tmp';
  await this.sdb.pull(remotePath, localFile);
  let data = await _appiumSupport.fs.readFile(localFile);
  let b64data = new Buffer(data).toString('base64');

  if (await _appiumSupport.fs.exists(localFile)) {
    await _appiumSupport.fs.unlink(localFile);
  }

  return b64data;
};

commands.pushFile = async function (file, base64Data) {
  const rootDir = _path.default.resolve(__dirname, '..', '..', '..');

  const fileDir = _path.default.resolve(rootDir, 'app');

  const localFile = _path.default.resolve(fileDir, file);

  if (file.indexOf('/') > -1) {
    _logger.default.errorAndThrow(`It is expected that file point to a file and not to a folder. ` + `'${file}' is given instead`);
  }

  if (_lodash.default.isArray(base64Data)) {
    base64Data = Buffer.from(base64Data).toString('utf8');
  }

  const content = Buffer.from(base64Data, 'base64');
  let isFileDir = await _appiumSupport.fs.exists(fileDir);

  if (!isFileDir) {
    await _appiumSupport.fs.mkdir(fileDir);
  }

  await _appiumSupport.fs.writeFile(localFile, content.toString('binary'), 'binary');
  return true;
};

async function takeScreenShot(sdb) {
  return await sdb.takeScreenShot();
}

async function getScreenshotData(sdb) {
  const rootDir = _path.default.resolve(__dirname, '..', '..');

  const filePath = _path.default.resolve(rootDir, 'file');

  let localFile = filePath + '/screenShot.tmp';

  if (await _appiumSupport.fs.exists(localFile)) {
    await _appiumSupport.fs.unlink(localFile);
  }

  try {
    const pngDir = '/tmp/';

    const png = _path.default.posix.resolve(pngDir, 'dump_screen.png');

    await sdb.pull(png, localFile);
    return await _jimp.default.read(localFile);
  } finally {
    if (await _appiumSupport.fs.exists(localFile)) {
      await _appiumSupport.fs.unlink(localFile);
    }
  }
}

commands.getScreenshot = async function () {
  let result = await takeScreenShot(this.sdb);

  if (result) {
    let image = await getScreenshotData(this.sdb);

    const getBuffer = _bluebird.default.promisify(image.getBuffer, {
      context: image
    });

    const imgBuffer = await getBuffer(_jimp.default.MIME_PNG);
    return imgBuffer.toString('base64');
  } else {
    return null;
  }
};

Object.assign(extensions, commands);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
