"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

var _appiumSdb = _interopRequireDefault(require("appium-sdb"));

let helpers = {};
exports.helpers = helpers;

helpers.getDeviceInfoFromCaps = async function (opts = {}) {
  let sdb = await _appiumSdb.default.createSDB({
    sdbPort: opts.sdbPort
  });
  let udid;

  if (opts.udid) {
    udid = opts.udid;
  } else {
    udid = opts.deviceName;
  }

  let emPort = null;
  let status = false;

  if (udid.includes("192.168.250.250") || udid.includes("192.168.1.11")) {
    let result = await sdb.ConnectDevice(udid);

    if (result) {
      udid = udid + ":26101";
    }
  }

  _logger.default.info("Retrieving device list");

  let devices = await sdb.getDevicesWithRetry();

  if (devices.length > 1) {
    for (let i = 0; i < devices.length; i++) {
      if (udid === devices[i].udid) {
        status = true;
      }
    }
  }

  if (!status) {
    udid = devices[0].udid;
  }

  emPort = sdb.getPortFromEmulatorString(udid);

  _logger.default.info(`Using device: ${udid}`);

  return {
    udid,
    emPort
  };
};

helpers.createSDB = async function (udid, emPort, sdbPort, suppressKillServer) {
  let sdb = await _appiumSdb.default.createSDB({
    sdbPort,
    suppressKillServer
  });
  sdb.setDeviceId(udid);

  if (emPort) {
    sdb.setEmulatorPort(emPort);
  }

  return sdb;
};

helpers.truncateDecimals = function (number, digits) {
  let multiplier = Math.pow(10, digits);
  let adjustedNum = number * multiplier;
  let truncatedNum = Math[adjustedNum < 0 ? 'ceil' : 'floor'](adjustedNum);
  return truncatedNum / multiplier;
};

helpers.removeNullProperties = function (obj) {
  for (let key of _lodash.default.keys(obj)) {
    if (_lodash.default.isNull(obj[key]) || _lodash.default.isUndefined(obj[key])) {
      delete obj[key];
    }
  }
};

var _default = helpers;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi90aXplbi1oZWxwZXJzLmpzIl0sIm5hbWVzIjpbImhlbHBlcnMiLCJnZXREZXZpY2VJbmZvRnJvbUNhcHMiLCJvcHRzIiwic2RiIiwiU0RCIiwiY3JlYXRlU0RCIiwic2RiUG9ydCIsInVkaWQiLCJkZXZpY2VOYW1lIiwiZW1Qb3J0Iiwic3RhdHVzIiwiaW5jbHVkZXMiLCJyZXN1bHQiLCJDb25uZWN0RGV2aWNlIiwibG9nZ2VyIiwiaW5mbyIsImRldmljZXMiLCJnZXREZXZpY2VzV2l0aFJldHJ5IiwibGVuZ3RoIiwiaSIsImdldFBvcnRGcm9tRW11bGF0b3JTdHJpbmciLCJzdXBwcmVzc0tpbGxTZXJ2ZXIiLCJzZXREZXZpY2VJZCIsInNldEVtdWxhdG9yUG9ydCIsInRydW5jYXRlRGVjaW1hbHMiLCJudW1iZXIiLCJkaWdpdHMiLCJtdWx0aXBsaWVyIiwiTWF0aCIsInBvdyIsImFkanVzdGVkTnVtIiwidHJ1bmNhdGVkTnVtIiwicmVtb3ZlTnVsbFByb3BlcnRpZXMiLCJvYmoiLCJrZXkiLCJfIiwia2V5cyIsImlzTnVsbCIsImlzVW5kZWZpbmVkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUVBLElBQUlBLE9BQU8sR0FBRyxFQUFkOzs7QUFFQUEsT0FBTyxDQUFDQyxxQkFBUixHQUFnQyxnQkFBZ0JDLElBQUksR0FBRyxFQUF2QixFQUEyQjtBQUN6RCxNQUFJQyxHQUFHLEdBQUcsTUFBTUMsbUJBQUlDLFNBQUosQ0FBYztBQUM1QkMsSUFBQUEsT0FBTyxFQUFFSixJQUFJLENBQUNJO0FBRGMsR0FBZCxDQUFoQjtBQUdBLE1BQUlDLElBQUo7O0FBQ0EsTUFBSUwsSUFBSSxDQUFDSyxJQUFULEVBQWU7QUFDYkEsSUFBQUEsSUFBSSxHQUFHTCxJQUFJLENBQUNLLElBQVo7QUFDRCxHQUZELE1BRU87QUFDTEEsSUFBQUEsSUFBSSxHQUFHTCxJQUFJLENBQUNNLFVBQVo7QUFDRDs7QUFFRCxNQUFJQyxNQUFNLEdB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Z2VyJztcbmltcG9ydCBTREIgZnJvbSAnYXBwaXVtLXNkYic7XG5cbmxldCBoZWxwZXJzID0ge307XG5cbmhlbHBlcnMuZ2V0RGV2aWNlSW5mb0Zyb21DYXBzID0gYXN5bmMgZnVuY3Rpb24gKG9wdHMgPSB7fSkge1xuICBsZXQgc2RiID0gYXdhaXQgU0RCLmNyZWF0ZVNEQih7XG4gICAgc2RiUG9ydDogb3B0cy5zZGJQb3J0XG4gIH0pO1xuICBsZXQgdWRpZDtcbiAgaWYgKG9wdHMudWRpZCkge1xuICAgIHVkaWQgPSBvcHRzLnVkaWQ7XG4gIH0gZWxzZSB7XG4gICAgdWRpZCA9IG9wdHMuZGV2aWNlTmFtZTtcbiAgfVxuXG4gIGxldCBlbVBvcnQgPSBudWxsO1xuICBsZXQgc3RhdHVzID0gZmFsc2U7XG5cbiAgaWYgKHVkaWQuaW5jbHVkZXMoXCIxOTIuMTY4LjI1MC4yNTBcIikgfHwgdWRpZC5pbmNsdWRlcyhcIjE5Mi4xNjguMS4xMVwiKSkge1xuICAgIGxldCByZXN1bHQgPSBhd2FpdCBzZGIuQ29ubmVjdERldmljZSh1ZGlkKTtcbiAgICBpZiAocmVzdWx0KSB7XG4gICAgICB1ZGlkID0gdWRpZCArIFwiOjI2MTAxXCI7XG4gICAgfVxuICB9XG5cbiAgbG9nZ2VyLmluZm8oXCJSZXRyaWV2aW5nIGRldmljZSBsaXN0XCIpO1xuXG4gIGxldCBkZXZpY2VzID0gYXdhaXQgc2RiLmdldERldmljZXNXaXRoUmV0cnkoKTtcbiAgaWYgKGRldmljZXMubGVuZ3RoID4gMSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGV2aWNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHVkaWQgPT09IGRldmljZXNbaV0udWRpZCkge1xuICAgICAgICBzdGF0dXMgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoIXN0YXR1cykge1xuICAgIHVkaWQgPSBkZXZpY2VzWzBdLnVkaWQ7XG4gIH1cbiAgZW1Qb3J0ID0gc2RiLmdldFBvcnRGcm9tRW11bGF0b3JTdHJpbmcodWRpZCk7XG5cbiAgbG9nZ2VyLmluZm8oYFVzaW5nIGRldmljZTogJHt1ZGlkfWApO1xuICByZXR1cm4geyB1ZGlkLCBlbVBvcnQgfTtcbn07XG5cbmhlbHBlcnMuY3JlYXRlU0RCID0gYXN5bmMgZnVuY3Rpb24gKHVkaWQsIGVtUG9ydCwgc2RiUG9ydCwgc3VwcHJlc3NLaWxsU2VydmVyKSB7XG4gIGxldCBzZGIgPSBhd2FpdCBTREIuY3JlYXRlU0RCKHtzZGJQb3J0LCBzdXBwcmVzc0tpbGxTZXJ2ZXJ9KTtcblxuICBzZGIuc2V0RGV2aWNlSWQodWRpZCk7XG4gIGlmIChlbVBvcnQpIHtcbiAgICBzZGIuc2V0RW11bGF0b3JQb3J0KGVtUG9ydCk7XG4gIH1cblxuICByZXR1cm4gc2RiO1xufTtcblxuaGVscGVycy50cnVuY2F0ZURlY2ltYWxzID0gZnVuY3Rpb24gKG51bWJlciwgZGlnaXRzKSB7XG4gIGxldCBtdWx0aXBsaWVyID0gTWF0aC5wb3coMTAsIGRpZ2l0cyk7XG4gIGxldCBhZGp1c3RlZE51bSA9IG51bWJlciAqIG11bHRpcGxpZXI7XG4gIGxldCB0cnVuY2F0ZWROdW0gPSBNYXRoW2FkanVzdGVkTnVtIDwgMCA/ICdjZWlsJyA6ICdmbG9vciddKGFkanVzdGVkTnVtKTtcblxuICByZXR1cm4gdHJ1bmNhdGVkTnVtIC8gbXVsdGlwbGllcjtcbn07XG5cbmhlbHBlcnMucmVtb3ZlTnVsbFByb3BlcnRpZXMgPSBmdW5jdGlvbiAob2JqKSB7XG4gIGZvciAobGV0IGtleSBvZiBfLmtleXMob2JqKSkge1xuICAgIGlmIChfLmlzTnVsbChvYmpba2V5XSkgfHwgXy5pc1VuZGVmaW5lZChvYmpba2V5XSkpIHtcbiAgICAgIGRlbGV0ZSBvYmpba2V5XTtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCB7IGhlbHBlcnMgfTtcbmV4cG9ydCBkZWZhdWx0IGhlbHBlcnM7XG4iXSwiZmlsZSI6ImxpYi90aXplbi1oZWxwZXJzLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIn0=
