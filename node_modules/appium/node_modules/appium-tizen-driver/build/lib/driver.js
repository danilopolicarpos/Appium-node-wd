"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.TizenDriver = void 0;

require("source-map-support/register");

var _appiumBaseDriver = require("appium-base-driver");

var _desiredCaps = _interopRequireDefault(require("./desired-caps"));

var _index = _interopRequireDefault(require("./commands/index"));

var _tizenHelpers = _interopRequireDefault(require("./tizen-helpers"));

var _tizenBootstrap = _interopRequireDefault(require("./tizen-bootstrap.js"));

var _logger = _interopRequireDefault(require("./logger"));

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSdb = require("appium-sdb");

var _appiumSupport = require("appium-support");

const BOOTSTRAP_PORT = 8888;
const NO_PROXY = [['POST', new RegExp('^/session/[^/]+/appium')], ['GET', new RegExp('^/session/[^/]+/appium')]];

class TizenDriver extends _appiumBaseDriver.BaseDriver {
  constructor(opts = {}, shouldValidateCaps = true) {
    super(opts, shouldValidateCaps);
    this.locatorStrategies = ['id', 'accessibility id', 'class name', 'name'];
    this.desiredCapConstraints = _desiredCaps.default;
    this.jwpProxyActive = false;
    this.jwpProxyAvoid = _lodash.default.clone(NO_PROXY);
    this.settings = new _appiumBaseDriver.DeviceSettings({
      ignoreUnimportantViews: false
    });
    this.bootstrapPort = BOOTSTRAP_PORT;

    for (let [cmd, fn] of _lodash.default.toPairs(_index.default)) {
      TizenDriver.prototype[cmd] = fn;
    }
  }

  async createSession(caps) {
    try {
      let sessionId;
      [sessionId] = await super.createSession(caps);
      let serverDetails = {
        platform: 'LINUX',
        webStorageEnabled: false,
        takesScreenshot: false,
        javascriptEnabled: true,
        databaseEnabled: false,
        networkConnectionEnabled: false,
        locationContextEnabled: false,
        warnings: {},
        desired: this.caps
      };
      this.caps = Object.assign(serverDetails, this.caps);
      let defaultOpts = {
        tmpDir: await _appiumSupport.tempDir.staticDir(),
        fullReset: false,
        sdbPort: _appiumSdb.DEFAULT_SDB_PORT,
        tizenInstallTimeout: 50000
      };

      _lodash.default.defaults(this.opts, defaultOpts);

      if (this.opts.noReset === true) {
        this.opts.fullReset = false;
      }

      if (this.opts.fullReset === true) {
        this.opts.noReset = false;
      }

      this.opts.fastReset = !this.opts.fullReset && !this.opts.noReset;
      this.opts.skipUninstall = this.opts.fastReset || this.opts.noReset;
      let {
        udid,
        emPort
      } = await _tizenHelpers.default.getDeviceInfoFromCaps(this.opts);
      this.opts.udid = udid;
      this.opts.emPort = emPort;
      this.sdb = await _tizenHelpers.default.createSDB(this.opts.udid, this.opts.emPort, this.opts.sdbPort, this.opts.suppressKillServer);
      await this.startTizenSession(this.opts);
      return [sessionId, this.caps];
    } catch (e) {
      try {
        await this.deleteSession();
      } catch (ign) {}

      throw e;
    }
  }

  get appOnDevice() {
    return this.helpers.isPackageOrBundle(this.opts.appPackage);
  }

  async startTizenSession() {
    if (this.opts.app) {
      await this.installApp(this.opts.app);
    }

    let isAppInstalled = await this.isAppInstalled(this.opts.appPackage);

    if (!isAppInstalled) {
      _logger.default.errorAndThrow('Could not find to App in device.');
    }

    if (this.opts.appPackage) {
      let isStartedApp = await this.isStartedApp();

      if (isStartedApp) {
        await this.closeApp();
      }

      await this.startApp({
        timeout: 20000
      });
    }

    this.bootstrap = new _tizenBootstrap.default(this.sdb, this.bootstrapPort, this.opts);
    await this.bootstrap.start(this.opts.appPackage);

    if (this.opts.ignoreUnimportantViews) {
      await this.settings.update({
        ignoreUnimportantViews: this.opts.ignoreUnimportantViews
      });
    }
  }

  async checkPackagePresent() {
    _logger.default.debug("Checking whether package is present on the device");

    if (!(await this.sdb.shell([`app_launcher --list | grep ${this.opts.appPackage}`]))) {
      _logger.default.errorAndThrow(`Could not find package ${this.opts.appPackage} on the device`);
    }
  }

  async deleteSession() {
    _logger.default.debug("Shutting down Tizen driver");

    await super.deleteSession();

    if (this.bootstrap) {
      await this.sdb.forceStop(this.opts.appPackage);

      if (this.opts.fullReset && !this.opts.skipUninstall && !this.appOnDevice) {
        await this.sdb.uninstall(this.opts.appPackage);
      }

      await this.bootstrap.shutdown();
      this.bootstrap = null;
    } else {
      _logger.default.debug("Called deleteSession but bootstrap wasn't active");
    }
  }

  validateDesiredCaps(caps) {
    let res = super.validateDesiredCaps(caps);

    if (!res) {
      return res;
    }

    if (!caps.appPackage) {
      let msg = 'The desired capabilities must include an appPackage';

      _logger.default.errorAndThrow(msg);
    }
  }

  proxyActive(sessionId) {
    super.proxyActive(sessionId);
    return this.jwpProxyActive;
  }

  getProxyAvoidList(sessionId) {
    super.getProxyAvoidList(sessionId);
    return this.jwpProxyAvoid;
  }

  canProxy(sessionId) {
    super.canProxy(sessionId);
    return false;
  }

}

exports.TizenDriver = TizenDriver;
var _default = TizenDriver;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
