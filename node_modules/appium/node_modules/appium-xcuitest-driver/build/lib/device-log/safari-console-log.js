"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SafariConsoleLog = void 0;

require("source-map-support/register");

var _rotatingLog = require("./rotating-log");

class SafariConsoleLog extends _rotatingLog.RotatingLog {
  constructor(showLogs) {
    super(showLogs, 'SafariConsole');
    this.log.warning = this.log.warn;
  }

  addLogLine(out) {
    if (this.isCapturing) {
      this.logs = this.logs || [];

      while (this.logs.length >= _rotatingLog.MAX_LOG_ENTRIES_COUNT) {
        this.logs.shift();

        if (this.logIdxSinceLastRequest > 0) {
          this.logIdxSinceLastRequest--;
        }
      }

      const entry = {
        level: {
          error: 'SEVERE',
          warning: 'WARNING',
          log: 'FINE'
        }[out.level] || 'INFO',
        timestamp: Date.now(),
        message: JSON.stringify(out)
      };
      this.logs.push(entry);
    }

    if (this.showLogs) {
      let level = 'debug';

      if (out.level === 'warning' || out.level === 'error') {
        level = out.level;
      }

      for (const line of out.text.split('\n')) {
        const url = out.url ? `${out.url} ` : '';
        this.log[level](`[${level.toUpperCase()}][${url}${out.line}:${out.column}] ${line}`);
      }
    }
  }

}

exports.SafariConsoleLog = SafariConsoleLog;
var _default = SafariConsoleLog;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9kZXZpY2UtbG9nL3NhZmFyaS1jb25zb2xlLWxvZy5qcyJdLCJuYW1lcyI6WyJTYWZhcmlDb25zb2xlTG9nIiwiUm90YXRpbmdMb2ciLCJjb25zdHJ1Y3RvciIsInNob3dMb2dzIiwibG9nIiwid2FybmluZyIsIndhcm4iLCJhZGRMb2dMaW5lIiwib3V0IiwiaXNDYXB0dXJpbmciLCJsb2dzIiwibGVuZ3RoIiwiTUFYX0xPR19FTlRSSUVTX0NPVU5UIiwic2hpZnQiLCJsb2dJZHhTaW5jZUxhc3RSZXF1ZXN0IiwiZW50cnkiLCJsZXZlbCIsImVycm9yIiwidGltZXN0YW1wIiwiRGF0ZSIsIm5vdyIsIm1lc3NhZ2UiLCJKU09OIiwic3RyaW5naWZ5IiwicHVzaCIsImxpbmUiLCJ0ZXh0Iiwic3BsaXQiLCJ1cmwiLCJ0b1VwcGVyQ2FzZSIsImNvbHVtbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBR0EsTUFBTUEsZ0JBQU4sU0FBK0JDLHdCQUEvQixDQUEyQztBQUN6Q0MsRUFBQUEsV0FBVyxDQUFFQyxRQUFGLEVBQVk7QUFDckIsVUFBTUEsUUFBTixFQUFnQixlQUFoQjtBQUdBLFNBQUtDLEdBQUwsQ0FBU0MsT0FBVCxHQUFtQixLQUFLRCxHQUFMLENBQVNFLElBQTVCO0FBQ0Q7O0FBRURDLEVBQUFBLFVBQVUsQ0FBRUMsR0FBRixFQUFPO0FBQ2YsUUFBSSxLQUFLQyxXQUFULEVBQXNCO0FBQ3BCLFdBQUtDLElBQUwsR0FBWSxLQUFLQSxJQUFMLElBQWEsRUFBekI7O0FBQ0EsYUFBTyxLQUFLQSxJQUFMLENBQVVDLE1BQVYsSUFBb0JDLGtDQUEzQixFQUFrRDtBQUNoRCxhQUFLRixJQUFMLENBQVVHLEtBQVY7O0FBQ0EsWUFBSSxLQUFLQyxzQkFBTCxHQUE4QixDQUFsQyxFQUFxQztBQUNuQyxlQUFLQSxzQkFBTDtBQUNEO0FBQ0Y7O0FBNEJELFlBQU1DLEtBQUssR0FBRztBQUNaQyxRQUFBQSxLQUFLLEVBQUU7QUFDTEMsVUFBQUEsS0FBSyxFQUFFLFFBREY7QUFFTFosVUFBQUEsT0FBTyxFQUFFLFNBRko7QUFHTEQsVUFBQUEsR0FBRyxFQUFFO0FBSEEsVUFJTEksR0FBRyxDQUFDUSxLQUpDLEtBSVMsTUFMSjtBQU1aRSxRQUFBQSxTQUFTLEVBQUVDLElBQUksQ0FBQ0MsR0FBTCxFQU5DO0FBT1pDLFFBQUFBLE9BQU8sRUFBRUMsSUFBSSxDQUFDQyxTQUFMLENBQWVmLEdBQWY7QUFQRyxPQUFkO0FBU0EsV0FBS0UsSUFBTCxDQUFVYyxJQUFWLENBQWVULEtBQWY7QUFDRDs7QUFJRCxRQUFJLEtBQUtaLFFBQVQsRUFBbUI7QUFDakIsVUFBSWEsS0FBSyxHQUFHLE9BQVo7O0FBQ0EsVUFBSVIsR0FBRyxDQUFDUSxLQUFKLEtBQWMsU0FBZCxJQUEyQlIsR0FBRyxDQUFDUSxLQUFKLEtBQWMsT0FBN0MsRUFBc0Q7QUFDcERBLFFBQUFBLEtBQUssR0FBR1IsR0FBRyxDQUFDUSxLQUFaO0FBQ0Q7O0FBQ0QsV0FBSyxNQUFNUyxJQUFYLElBQW1CakIsR0FBRyxDQUFDa0IsSUFBSixDQUFTQyxLQUFULENBQWUsSUFBZixDQUFuQixFQUF5QztBQUV2QyxjQUFNQyxHQUFHLEdBQUdwQixHQUFHLENBQUNvQixHQUFKLEdBQVcsR0FBRXBCLEdBQUcsQ0FBQ29CLEdBQUksR0FBckIsR0FBMEIsRUFBdEM7QUFDQSxhQUFLeEIsR0FBTCxDQUFTWSxLQUFULEVBQWlCLElBQUdBLEtBQUssQ0FBQ2EsV0FBTixFQUFvQixLQUFJRCxHQUFJLEdBQUVwQixHQUFHLENBQUNpQixJQUFLLElBQUdqQixHQUFHLENBQUNzQixNQUFPLEtBQUlMLElBQUssRUFBbEY7QUFDRDtBQUNGO0FBQ0Y7O0FBckV3Qzs7O2VBeUU1QnpCLGdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUm90YXRpbmdMb2csIE1BWF9MT0dfRU5UUklFU19DT1VOVCB9IGZyb20gJy4vcm90YXRpbmctbG9nJztcblxuXG5jbGFzcyBTYWZhcmlDb25zb2xlTG9nIGV4dGVuZHMgUm90YXRpbmdMb2cge1xuICBjb25zdHJ1Y3RvciAoc2hvd0xvZ3MpIHtcbiAgICBzdXBlcihzaG93TG9ncywgJ1NhZmFyaUNvbnNvbGUnKTtcblxuICAgIC8vIGpzIGNvbnNvbGUgaGFzIGB3YXJuaW5nYCBsZXZlbCwgc28gbWFwIHRvIGB3YXJuYFxuICAgIHRoaXMubG9nLndhcm5pbmcgPSB0aGlzLmxvZy53YXJuO1xuICB9XG5cbiAgYWRkTG9nTGluZSAob3V0KSB7XG4gICAgaWYgKHRoaXMuaXNDYXB0dXJpbmcpIHtcbiAgICAgIHRoaXMubG9ncyA9IHRoaXMubG9ncyB8fCBbXTtcbiAgICAgIHdoaWxlICh0aGlzLmxvZ3MubGVuZ3RoID49IE1BWF9MT0dfRU5UUklFU19DT1VOVCkge1xuICAgICAgICB0aGlzLmxvZ3Muc2hpZnQoKTtcbiAgICAgICAgaWYgKHRoaXMubG9nSWR4U2luY2VMYXN0UmVxdWVzdCA+IDApIHtcbiAgICAgICAgICB0aGlzLmxvZ0lkeFNpbmNlTGFzdFJlcXVlc3QtLTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKlxuICAgICAgICogVGhlIG91dHB1dCB3aWxsIGJlIGxpa2U6XG4gICAgICAgKiAgIHtcbiAgICAgICAqICAgICBcInNvdXJjZVwiOiBcImphdmFzY3JpcHRcIixcbiAgICAgICAqICAgICBcImxldmVsXCI6XCJlcnJvclwiLFxuICAgICAgICogICAgIFwidGV4dFwiOlwiUmVmZXJlbmNlRXJyb3I6IENhbid0IGZpbmQgdmFyaWFibGU6IHNfYWNjb3VudFwiLFxuICAgICAgICogICAgIFwidHlwZVwiOlwibG9nXCIsXG4gICAgICAgKiAgICAgXCJsaW5lXCI6MixcbiAgICAgICAqICAgICBcImNvbHVtblwiOjIxLFxuICAgICAgICogICAgIFwidXJsXCI6XCJodHRwczovL2Fzc2V0cy5hZG9iZWR0bS5jb20vYjQ2ZTMxOGQ4NDUyNTA4MzRlZGExMGM1YTIwODI3YzA0NWE0ZDc2Zi9zY3JpcHRzL3NhdGVsbGl0ZS01Nzg2NmY4YjY0NzQ2ZDUzYTgwMDAxMDQtc3RhZ2luZy5qc1wiLFxuICAgICAgICogICAgIFwicmVwZWF0Q291bnRcIjoxLFxuICAgICAgICogICAgIFwic3RhY2tUcmFjZVwiOlt7XG4gICAgICAgKiAgICAgICBcImZ1bmN0aW9uTmFtZVwiOlwiZ2xvYmFsIGNvZGVcIixcbiAgICAgICAqICAgICAgIFwidXJsXCI6XCJodHRwczovL2Fzc2V0cy5hZG9iZWR0bS5jb20vYjQ2ZTMxOGQ4NDUyNTA4MzRlZGExMGM1YTIwODI3YzA0NWE0ZDc2Zi9zY3JpcHRzL3NhdGVsbGl0ZS01Nzg2NmY4YjY0NzQ2ZDUzYTgwMDAxMDQtc3RhZ2luZy5qc1wiLFxuICAgICAgICogICAgICAgXCJzY3JpcHRJZFwiOlwiNlwiLFxuICAgICAgICogICAgICAgXCJsaW5lTnVtYmVyXCI6MixcbiAgICAgICAqICAgICAgIFwiY29sdW1uTnVtYmVyXCI6MjFcbiAgICAgICAqICAgICB9XVxuICAgICAgICogIH1cbiAgICAgICAqXG4gICAgICAgKiB3ZSBuZWVkLCBhdCBsZWFzdCwgYGxldmVsYCAoaW4gYWNjb3JkYW5jZSB3aXRoIEphdmEgbGV2ZWxzXG4gICAgICAgKiAoaHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlLzcvZG9jcy9hcGkvamF2YS91dGlsL2xvZ2dpbmcvTGV2ZWwuaHRtbCkpLFxuICAgICAgICogYHRpbWVzdGFtcGAsIGFuZCBgbWVzc2FnZWAgdG8gc2F0aXNmeSB0aGUgamF2YSBjbGllbnQuIEluIG9yZGVyIHRvXG4gICAgICAgKiBwcm92aWRlIGFsbCB0aGUgaW5mb3JtYXRpb24gdG8gdGhlIGNsaWVudCwgYG1lc3NhZ2VgIGlzIHRoZSBmdWxsXG4gICAgICAgKiBvYmplY3QsIHN0cmluZ2lmaWVkLlxuICAgICAgICovXG4gICAgICBjb25zdCBlbnRyeSA9IHtcbiAgICAgICAgbGV2ZWw6IHtcbiAgICAgICAgICBlcnJvcjogJ1NFVkVSRScsXG4gICAgICAgICAgd2FybmluZzogJ1dBUk5JTkcnLFxuICAgICAgICAgIGxvZzogJ0ZJTkUnLFxuICAgICAgICB9W291dC5sZXZlbF0gfHwgJ0lORk8nLFxuICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICAgIG1lc3NhZ2U6IEpTT04uc3RyaW5naWZ5KG91dCksXG4gICAgICB9O1xuICAgICAgdGhpcy5sb2dzLnB1c2goZW50cnkpO1xuICAgIH1cblxuICAgIC8vIGZvcm1hdCBvdXRwdXQgbGlrZVxuICAgIC8vICAgICBTYWZhcmlDb25zb2xlIFtXQVJOSU5HXVtodHRwOi8vYXBwaXVtLmlvIDI6MTNdIExvZyBzb21ldGhpbmcgdG8gd2FyblxuICAgIGlmICh0aGlzLnNob3dMb2dzKSB7XG4gICAgICBsZXQgbGV2ZWwgPSAnZGVidWcnO1xuICAgICAgaWYgKG91dC5sZXZlbCA9PT0gJ3dhcm5pbmcnIHx8IG91dC5sZXZlbCA9PT0gJ2Vycm9yJykge1xuICAgICAgICBsZXZlbCA9IG91dC5sZXZlbDtcbiAgICAgIH1cbiAgICAgIGZvciAoY29uc3QgbGluZSBvZiBvdXQudGV4dC5zcGxpdCgnXFxuJykpIHtcbiAgICAgICAgLy8gdXJsIGlzIG9wdGlvbmFsLCBzbyBnZXQgZm9ybWF0dGluZyBoZXJlXG4gICAgICAgIGNvbnN0IHVybCA9IG91dC51cmwgPyBgJHtvdXQudXJsfSBgIDogJyc7XG4gICAgICAgIHRoaXMubG9nW2xldmVsXShgWyR7bGV2ZWwudG9VcHBlckNhc2UoKX1dWyR7dXJsfSR7b3V0LmxpbmV9OiR7b3V0LmNvbHVtbn1dICR7bGluZX1gKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IHsgU2FmYXJpQ29uc29sZUxvZyB9O1xuZXhwb3J0IGRlZmF1bHQgU2FmYXJpQ29uc29sZUxvZztcbiJdLCJmaWxlIjoibGliL2RldmljZS1sb2cvc2FmYXJpLWNvbnNvbGUtbG9nLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
