"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumBaseDriver = require("appium-base-driver");

var _appiumIosDriver = require("appium-ios-driver");

var _iosCrashLog = require("../device-log/ios-crash-log");

var _iosLog = require("../device-log/ios-log");

var _logger = _interopRequireDefault(require("../logger"));

var _ws = _interopRequireDefault(require("ws"));

var _safariConsoleLog = _interopRequireDefault(require("../device-log/safari-console-log"));

var _safariNetworkLog = _interopRequireDefault(require("../device-log/safari-network-log"));

let extensions = {};

const WEBSOCKET_ENDPOINT = sessionId => `${_appiumBaseDriver.DEFAULT_WS_PATHNAME_PREFIX}/session/${sessionId}/appium/device/syslog`;

Object.assign(extensions, _appiumIosDriver.iosCommands.logging);
extensions.supportedLogTypes.safariConsole = {
  description: 'Safari Console Logs - data written to the JS console in Safari',
  getter: async self => await self.extractLogs('safariConsole', self.logs)
};
extensions.supportedLogTypes.safariNetwork = {
  description: 'Safari Network Logs - information about network operations undertaken by Safari',
  getter: async self => await self.extractLogs('safariNetwork', self.logs)
};

extensions.startLogCapture = async function startLogCapture() {
  this.logs = this.logs || {};

  if (!_lodash.default.isUndefined(this.logs.syslog) && this.logs.syslog.isCapturing) {
    _logger.default.warn('Trying to start iOS log capture but it has already started!');

    return true;
  }

  if (_lodash.default.isUndefined(this.logs.syslog)) {
    this.logs.crashlog = new _iosCrashLog.IOSCrashLog({
      sim: this.opts.device,
      udid: this.isRealDevice() ? this.opts.udid : undefined
    });
    this.logs.syslog = new _iosLog.IOSLog({
      sim: this.opts.device,
      udid: this.isRealDevice() ? this.opts.udid : undefined,
      showLogs: this.opts.showIOSLog,
      realDeviceLogger: this.opts.realDeviceLogger,
      xcodeVersion: this.xcodeVersion
    });
    this.logs.safariConsole = new _safariConsoleLog.default(!!this.opts.showSafariConsoleLog);
    this.logs.safariNetwork = new _safariNetworkLog.default(!!this.opts.showSafariNetworkLog);
  }

  try {
    await this.logs.syslog.startCapture();
  } catch (err) {
    _logger.default.warn(`Continuing without capturing device logs: ${err.message}`);

    return false;
  }

  await this.logs.crashlog.startCapture();
  await this.logs.safariConsole.startCapture();
  await this.logs.safariNetwork.startCapture();
  return true;
};

extensions.mobileStartLogsBroadcast = async function mobileStartLogsBroadcast() {
  const pathname = WEBSOCKET_ENDPOINT(this.sessionId);

  if (!_lodash.default.isEmpty((await this.server.getWebSocketHandlers(pathname)))) {
    _logger.default.debug(`The system logs broadcasting web socket server is already listening at ${pathname}`);

    return;
  }

  _logger.default.info(`Assigning system logs broadcasting web socket server to ${pathname}`);

  const wss = new _ws.default.Server({
    noServer: true
  });
  wss.on('connection', (ws, req) => {
    if (req) {
      const remoteIp = _lodash.default.isEmpty(req.headers['x-forwarded-for']) ? req.connection.remoteAddress : req.headers['x-forwarded-for'];

      _logger.default.debug(`Established a new system logs listener web socket connection from ${remoteIp}`);
    } else {
      _logger.default.debug('Established a new system logs listener web socket connection');
    }

    if (_lodash.default.isEmpty(this._syslogWebsocketListener)) {
      this._syslogWebsocketListener = logRecord => {
        if (ws && ws.readyState === _ws.default.OPEN) {
          ws.send(logRecord.message);
        }
      };
    }

    this.logs.syslog.on('output', this._syslogWebsocketListener);
    ws.on('close', (code, reason) => {
      if (!_lodash.default.isEmpty(this._syslogWebsocketListener)) {
        this.logs.syslog.removeListener('output', this._syslogWebsocketListener);
        this._syslogWebsocketListener = null;
      }

      let closeMsg = 'System logs listener web socket is closed.';

      if (!_lodash.default.isEmpty(code)) {
        closeMsg += ` Code: ${code}.`;
      }

      if (!_lodash.default.isEmpty(reason)) {
        closeMsg += ` Reason: ${reason}.`;
      }

      _logger.default.debug(closeMsg);
    });
  });
  await this.server.addWebSocketHandler(pathname, wss);
};

extensions.mobileStopLogsBroadcast = async function mobileStopLogsBroadcast() {
  const pathname = WEBSOCKET_ENDPOINT(this.sessionId);

  if (_lodash.default.isEmpty((await this.server.getWebSocketHandlers(pathname)))) {
    return;
  }

  _logger.default.debug('Stopping the system logs broadcasting web socket server');

  await this.server.removeWebSocketHandler(pathname);
};

var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
