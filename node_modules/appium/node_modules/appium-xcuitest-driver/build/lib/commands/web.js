"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _appiumIosDriver = require("appium-ios-driver");

var _asyncbox = require("asyncbox");

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("../logger"));

var _lodash = _interopRequireDefault(require("lodash"));

var _bluebird = _interopRequireDefault(require("bluebird"));

const IPHONE_TOP_BAR_HEIGHT = 71;
const IPHONE_SCROLLED_TOP_BAR_HEIGHT = 41;
const IPHONE_X_NOTCH_OFFSET = 24;
const IPHONE_LANDSCAPE_TOP_BAR_HEIGHT = 51;
const IPHONE_BOTTOM_BAR_OFFSET = 49;
const TAB_BAR_OFFSET = 33;
const IPHONE_WEB_COORD_SMART_APP_BANNER_OFFSET = 84;
const IPAD_WEB_COORD_SMART_APP_BANNER_OFFSET = 95;
const IPHONE_X_WIDTH = 375;
const IPHONE_X_HEIGHT = 812;
const IPHONE_XR_WIDTH = 414;
const IPHONE_XR_HEIGHT = 896;
const ATOM_WAIT_TIMEOUT = 5 * 60000;
let extensions = {};
Object.assign(extensions, _appiumIosDriver.iosCommands.web);
extensions.getSafariIsIphone = _lodash.default.memoize(async function getSafariIsIphone() {
  try {
    const userAgent = await this.execute('return navigator.userAgent');
    return userAgent.toLowerCase().includes('iphone');
  } catch (err) {
    _logger.default.warn(`Unable to find device type from useragent. Assuming iPhone`);

    _logger.default.debug(`Error: ${err.message}`);
  }

  return true;
});
extensions.getSafariIsIphoneX = _lodash.default.memoize(async function getSafariIsIphone() {
  try {
    const script = 'return {height: window.screen.availHeight, width: window.screen.availWidth};';
    const {
      height,
      width
    } = await this.execute(script);
    const [portraitHeight, portraitWidth] = height > width ? [height, width] : [width, height];
    return portraitHeight === IPHONE_X_HEIGHT && portraitWidth === IPHONE_X_WIDTH || portraitHeight === IPHONE_XR_HEIGHT && portraitWidth === IPHONE_XR_WIDTH;
  } catch (err) {
    _logger.default.warn(`Unable to find device type from dimensions. Assuming not iPhone X`);

    _logger.default.debug(`Error: ${err.message}`);
  }

  return false;
});

extensions.getExtraTranslateWebCoordsOffset = async function getExtraTranslateWebCoordsOffset(wvPos, realDims) {
  let topOffset = 0;
  let bottomOffset = 0;
  const implicitWaitMs = this.implicitWaitMs;
  const isIphone = await this.getSafariIsIphone();
  const isIphoneX = isIphone && (await this.getSafariIsIphoneX());
  const orientation = realDims.h > realDims.w ? 'PORTRAIT' : 'LANDSCAPE';

  try {
    this.setImplicitWait(0);
    await this.findNativeElementOrElements('accessibility id', 'ReloadButton', false);
    topOffset = IPHONE_TOP_BAR_HEIGHT + (isIphoneX ? IPHONE_X_NOTCH_OFFSET : 0);

    if (isIphone) {
      if (orientation === 'PORTRAIT') {
        bottomOffset = IPHONE_BOTTOM_BAR_OFFSET;
      } else {
        topOffset = IPHONE_LANDSCAPE_TOP_BAR_HEIGHT;
      }
    }

    if (orientation === 'LANDSCAPE' || !isIphone) {
      try {
        await this.findNativeElementOrElements('-ios predicate string', `name LIKE '*, Tab' AND visible = 1`, false);
        topOffset += TAB_BAR_OFFSET;
      } catch (ign) {}
    }
  } catch (err) {
    topOffset = IPHONE_SCROLLED_TOP_BAR_HEIGHT + (isIphoneX ? IPHONE_X_NOTCH_OFFSET : 0);

    if (orientation === 'LANDSCAPE' && isIphone) {
      topOffset = 0;
    }
  } finally {
    this.setImplicitWait(implicitWaitMs);
  }

  topOffset += await this.getExtraNativeWebTapOffset();
  wvPos.y += topOffset;
  realDims.h -= topOffset + bottomOffset;
};

extensions.getExtraNativeWebTapOffset = async function getExtraNativeWebTapOffset() {
  let offset = 0;
  const implicitWaitMs = this.implicitWaitMs;

  try {
    this.setImplicitWait(0);

    try {
      await this.findNativeElementOrElements('accessibility id', 'Close app download offer', false);
      offset += (await this.getSafariIsIphone()) ? IPHONE_WEB_COORD_SMART_APP_BANNER_OFFSET : IPAD_WEB_COORD_SMART_APP_BANNER_OFFSET;
    } catch (ign) {}
  } finally {
    this.setImplicitWait(implicitWaitMs);
  }

  _logger.default.debug(`Additional native web tap offset computed: ${offset}`);

  return offset;
};

async function tapWebElementNatively(driver, atomsElement) {
  try {
    let text = await driver.executeAtom('get_text', [atomsElement]);

    if (!text) {
      text = await driver.executeAtom('get_attribute_value', [atomsElement, 'value']);
    }

    if (text) {
      const els = await driver.findNativeElementOrElements('accessibility id', text, true);

      if (els.length === 1 || els.length === 2) {
        const el = els[0];
        const rect = await driver.proxyCommand(`/element/${el.ELEMENT}/rect`, 'GET');

        if (els.length === 2) {
          const el2 = els[1];
          const rect2 = await driver.proxyCommand(`/element/${el2.ELEMENT}/rect`, 'GET');

          if (rect.x !== rect2.x || rect.y !== rect2.y || rect.width !== rect2.width || rect.height !== rect2.height) {
            return false;
          }
        }

        const coords = {
          x: Math.round(rect.x + rect.width / 2),
          y: Math.round(rect.y + rect.height / 2)
        };
        await driver.clickCoords(coords);
        return true;
      }
    }
  } catch (err) {
    _logger.default.warn(`Error attempting to click: ${err.message}`);
  }

  return false;
}

extensions.nativeWebTap = async function nativeWebTap(el) {
  const atomsElement = this.useAtomsElement(el);

  if (await tapWebElementNatively(this, atomsElement)) {
    return;
  }

  _logger.default.warn('Unable to do simple native web tap. Attempting to convert coordinates');

  await this.executeAtom('get_size', [atomsElement]);
  await this.executeAtom('get_top_left_coordinates', [atomsElement]);
  const {
    width,
    height
  } = await this.executeAtom('get_size', [atomsElement]);
  let {
    x,
    y
  } = await this.executeAtom('get_top_left_coordinates', [atomsElement]);
  x += width / 2;
  y += height / 2;
  this.curWebCoords = {
    x,
    y
  };
  await this.clickWebCoords();
};

extensions.clickCoords = async function clickCoords(coords) {
  await this.performTouch([{
    action: 'tap',
    options: coords
  }]);
};

extensions.translateWebCoords = async function translateWebCoords(coords) {
  _logger.default.debug(`Translating coordinates (${JSON.stringify(coords)}) to web coordinates`);

  const implicitWaitMs = this.implicitWaitMs;
  let webview;

  try {
    this.setImplicitWait(0);
    webview = await (0, _asyncbox.retryInterval)(5, 100, async () => {
      return await this.findNativeElementOrElements('-ios predicate string', `type = 'XCUIElementTypeWebView' AND visible = 1`, false);
    });
  } finally {
    this.setImplicitWait(implicitWaitMs);
  }

  webview = _appiumSupport.util.unwrapElement(webview);
  const rect = await this.proxyCommand(`/element/${webview}/rect`, 'GET');
  const wvPos = {
    x: rect.x,
    y: rect.y
  };
  const realDims = {
    w: rect.width,
    h: rect.height
  };
  const cmd = '(function () { return {w: window.innerWidth, h: window.innerHeight}; })()';
  const wvDims = await this.remote.execute(cmd);
  await this.getExtraTranslateWebCoordsOffset(wvPos, realDims);

  if (wvDims && realDims && wvPos) {
    let xRatio = realDims.w / wvDims.w;
    let yRatio = realDims.h / wvDims.h;
    let newCoords = {
      x: wvPos.x + Math.round(xRatio * coords.x),
      y: wvPos.y + Math.round(yRatio * coords.y)
    };

    _logger.default.debug(`Converted coordinates: ${JSON.stringify(newCoords)}`);

    _logger.default.debug(`    rect: ${JSON.stringify(rect)}`);

    _logger.default.debug(`    wvPos: ${JSON.stringify(wvPos)}`);

    _logger.default.debug(`    realDims: ${JSON.stringify(realDims)}`);

    _logger.default.debug(`    wvDims: ${JSON.stringify(wvDims)}`);

    _logger.default.debug(`    xRatio: ${JSON.stringify(xRatio)}`);

    _logger.default.debug(`    yRatio: ${JSON.stringify(yRatio)}`);

    _logger.default.debug(`Converted web coords ${JSON.stringify(coords)} ` + `into real coords ${JSON.stringify(newCoords)}`);

    return newCoords;
  }
};

extensions.checkForAlert = async function checkForAlert() {
  return false;
};

extensions.waitForAtom = async function waitForAtom(promise) {
  const started = process.hrtime();

  try {
    return this.parseExecuteResponse((await _bluebird.default.resolve(promise).timeout(ATOM_WAIT_TIMEOUT)));
  } catch (err) {
    if (err instanceof _bluebird.default.TimeoutError) {
      throw new Error(`Did not get any response after ${process.hrtime(started)[0]}s`);
    }

    throw err;
  }
};

var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
