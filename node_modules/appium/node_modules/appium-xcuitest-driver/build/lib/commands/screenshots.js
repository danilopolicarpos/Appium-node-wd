"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _asyncbox = require("asyncbox");

var _lodash = _interopRequireDefault(require("lodash"));

var _nodeSimctl = require("node-simctl");

var _teen_process = require("teen_process");

var _logger = _interopRequireDefault(require("../logger"));

var _appiumSupport = require("appium-support");

let commands = {};

async function getScreenshotWithIdevicelib(udid, isLandscape) {
  const pathToScreenshotTiff = await _appiumSupport.tempDir.path({
    prefix: `screenshot-${udid}`,
    suffix: '.tiff'
  });
  await _appiumSupport.fs.rimraf(pathToScreenshotTiff);
  const pathToResultPng = await _appiumSupport.tempDir.path({
    prefix: `screenshot-${udid}`,
    suffix: '.png'
  });
  await _appiumSupport.fs.rimraf(pathToResultPng);

  try {
    try {
      await (0, _teen_process.exec)('idevicescreenshot', ['-u', udid, pathToScreenshotTiff]);
    } catch (e) {
      throw new Error(`Cannot take a screenshot from the device '${udid}' using ` + `idevicescreenshot. Original error: ${e.message}`);
    }

    let sipsArgs = ['-s', 'format', 'png', pathToScreenshotTiff, '--out', pathToResultPng];

    if (isLandscape) {
      sipsArgs = ['-r', '-90', ...sipsArgs];
    }

    try {
      await (0, _teen_process.exec)('sips', sipsArgs);
    } catch (e) {
      throw new Error(`Cannot convert a screenshot from TIFF to PNG using sips tool. ` + `Original error: ${e.message}`);
    }

    if (!(await _appiumSupport.fs.exists(pathToResultPng))) {
      throw new Error(`Cannot convert a screenshot from TIFF to PNG. The conversion ` + `result does not exist at '${pathToResultPng}'`);
    }

    return (await _appiumSupport.fs.readFile(pathToResultPng)).toString('base64');
  } finally {
    await _appiumSupport.fs.rimraf(pathToScreenshotTiff);
    await _appiumSupport.fs.rimraf(pathToResultPng);
  }
}

async function verifyIdeviceScreenshotAvailable() {
  try {
    await _appiumSupport.fs.which('idevicescreenshot');
  } catch (err) {
    throw new Error(`No 'idevicescreenshot' program found. To use, install ` + `using 'brew install --HEAD libimobiledevice'`);
  }
}

commands.getScreenshot = async function getScreenshot() {
  const getScreenshotFromIDS = async () => {
    _logger.default.debug(`Taking screenshot with 'idevicescreenshot'`);

    await verifyIdeviceScreenshotAvailable();
    const orientation = await this.proxyCommand('/orientation', 'GET');
    return await getScreenshotWithIdevicelib(this.opts.udid, orientation === 'LANDSCAPE');
  };

  const getScreenshotFromWDA = async () => {
    _logger.default.debug(`Taking screenshot with WDA`);

    const data = await this.proxyCommand('/screenshot', 'GET');

    if (!_lodash.default.isString(data)) {
      throw new Error(`Unable to take screenshot. WDA returned '${JSON.stringify(data)}'`);
    }

    return data;
  };

  if (this.opts.realDeviceScreenshotter && this.mjpegStream) {
    _logger.default.warn("You've specified screenshot retrieval via both MJpeg server " + 'and a real device screenshot utility. Please use one or the ' + 'other! Choosing MJPEG server');
  }

  if (this.mjpegStrem) {
    const data = await this.mjpegStream.lastChunkPNGBase64();

    if (data) {
      return data;
    }

    _logger.default.warn('Tried to get screenshot from active MJPEG stream, but there ' + 'was no data yet. Falling back to regular screenshot methods.');
  }

  const useIdeviceScreenshot = _lodash.default.lowerCase(this.opts.realDeviceScreenshotter) === 'idevicescreenshot';

  if (useIdeviceScreenshot) {
    return await getScreenshotFromIDS();
  }

  try {
    return await getScreenshotFromWDA();
  } catch (err) {
    _logger.default.warn(`Error getting screenshot: ${err.message}`);
  }

  if (this.isSimulator()) {
    if (this.xcodeVersion.versionFloat < 8.1) {
      _logger.default.errorAndThrow(`No command line screenshot ability with Xcode ` + `${this.xcodeVersion.versionFloat}. Please upgrade to ` + `at least Xcode 8.1`);
    }

    _logger.default.info(`Falling back to 'simctl io screenshot' API`);

    return await (0, _nodeSimctl.getScreenshot)(this.opts.udid);
  }

  try {
    return await getScreenshotFromIDS();
  } catch (err) {
    _logger.default.warn(`Error getting screenshot through 'idevicescreenshot': ${err.message}`);
  }

  return await (0, _asyncbox.retryInterval)(2, 1000, getScreenshotFromWDA);
};

commands.getElementScreenshot = async function getElementScreenshot(el) {
  el = _appiumSupport.util.unwrapElement(el);

  if (this.isWebContext()) {
    const atomsElement = this.useAtomsElement(el);
    return await this.executeAtom('getElementScreenshot', [atomsElement]);
  }

  if (this.xcodeVersion.major < 9) {
    _logger.default.errorAndThrow(`Element screenshots are only available since Xcode 9. ` + `The current Xcode version is ${this.xcodeVersion.major}.${this.xcodeVersion.minor}`);
  }

  const data = await this.proxyCommand(`/element/${el}/screenshot`, 'GET');

  if (!_lodash.default.isString(data)) {
    _logger.default.errorAndThrow(`Unable to take a screenshot of the element ${el}. WDA returned '${JSON.stringify(data)}'`);
  }

  return data;
};

commands.getViewportScreenshot = async function getViewportScreenshot() {
  let statusBarHeight = await this.getStatusBarHeight();
  const screenshot = await this.getScreenshot();

  if (statusBarHeight === 0) {
    return screenshot;
  }

  const scale = await this.getDevicePixelRatio();
  statusBarHeight = Math.round(statusBarHeight * scale);
  const windowSize = await this.getWindowSize();
  let rect = {
    left: 0,
    top: statusBarHeight,
    width: windowSize.width * scale,
    height: windowSize.height * scale - statusBarHeight
  };
  let newScreenshot = await _appiumSupport.imageUtil.cropBase64Image(screenshot, rect);
  return newScreenshot;
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
