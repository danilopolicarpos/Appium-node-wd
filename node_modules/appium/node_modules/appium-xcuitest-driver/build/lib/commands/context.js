"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _appiumIosDriver = require("appium-ios-driver");

var _appiumRemoteDebugger = require("appium-remote-debugger");

var _appiumSupport = require("appium-support");

let extensions = {};
Object.assign(extensions, _appiumIosDriver.iosCommands.context);

extensions.closeAlertBeforeTest = async function closeAlertBeforeTest() {
  return true;
};

extensions._setContext = extensions.setContext;

extensions.setContext = async function setContext(name, callback, skipReadyCheck) {
  await this._setContext(name, callback, skipReadyCheck);

  if (name && name !== _appiumIosDriver.NATIVE_WIN && this.logs) {
    if (this.logs.safariConsole) {
      await this.remote.startConsole(this.logs.safariConsole.addLogLine.bind(this.logs.safariConsole));
    }

    if (this.logs.safariNetwork) {
      await this.remote.startNetwork(this.logs.safariNetwork.addLogLine.bind(this.logs.safariNetwork));
    }
  }
};

extensions._getLatestWebviewContextForTitle = extensions.getLatestWebviewContextForTitle;

extensions.getLatestWebviewContextForTitle = async function getLatestWebviewContextForTitle(regExp) {
  let currentUrl = this.getCurrentUrl();

  if (!currentUrl) {
    return await this._getLatestWebviewContextForTitle(regExp);
  }

  let contexts = await this.getContextsAndViews();
  let matchingCtx;

  for (let ctx of contexts) {
    if (ctx.view) {
      let url = ctx.view.url || '';

      if (url === this.getCurrentUrl()) {
        matchingCtx = ctx;
        break;
      }
    }
  }

  if (matchingCtx) {
    return matchingCtx.id;
  }

  return await this._getLatestWebviewContextForTitle(regExp);
};

extensions.isWebContext = function isWebContext() {
  return !!this.curContext && this.curContext !== _appiumIosDriver.iosCommands.context.NATIVE_WIN;
};

extensions.isWebview = function isWebview() {
  return this.isWebContext();
};

extensions.getNewRemoteDebugger = async function getNewRemoteDebugger() {
  const socketPath = await this.opts.device.getWebInspectorSocket();
  return new _appiumRemoteDebugger.RemoteDebugger({
    bundleId: this.opts.bundleId,
    isSafari: this.isSafari(),
    useNewSafari: this.useNewSafari(),
    pageLoadMs: this.pageLoadMs,
    platformVersion: this.opts.platformVersion,
    socketPath,
    remoteDebugProxy: this.opts.remoteDebugProxy,
    garbageCollectOnExecute: _appiumSupport.util.hasValue(this.opts.safariGarbageCollect) ? !!this.opts.safariGarbageCollect : false
  });
};

extensions.mobileGetContexts = async function mobileGetContexts() {
  const curOpt = this.opts.fullContextList;

  try {
    this.opts.fullContextList = true;
    return await this.getContexts();
  } finally {
    this.opts.fullContextList = curOpt;
  }
};

extensions.getLatestWebviewContextForTitle = async function getLatestWebviewContextForTitle(regExp) {
  const contexts = await this.getContextsAndViews();
  let matchingCtx;

  for (const ctx of contexts) {
    if (ctx.view && (ctx.view.title && ctx.view.title.match(regExp) || ctx.view.url && ctx.view.url.match(regExp))) {
      matchingCtx = ctx;
      break;
    }
  }

  return matchingCtx ? matchingCtx.id : undefined;
};

var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
