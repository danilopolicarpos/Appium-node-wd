"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gesturesChainToString = gesturesChainToString;
exports.default = exports.commands = exports.helpers = exports.extensions = void 0;

require("source-map-support/register");

var _appiumBaseDriver = require("appium-base-driver");

var _appiumSupport = require("appium-support");

var _appiumIosDriver = require("appium-ios-driver");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("../logger"));

let helpers = {},
    extensions = {},
    commands = {};
exports.commands = commands;
exports.extensions = extensions;
exports.helpers = helpers;
commands.moveTo = _appiumIosDriver.iosCommands.gesture.moveTo;

commands.mobileShake = async function mobileShake() {
  if (!this.isSimulator()) {
    throw new _appiumBaseDriver.errors.UnknownError('Shake is not supported on real devices');
  }

  await this.opts.device.shake();
};

commands.click = async function click(el) {
  if (!this.isWebContext()) {
    return await this.nativeClick(el);
  }

  el = _appiumSupport.util.unwrapElement(el);

  if ((await this.settings.getSettings()).nativeWebTap) {
    _logger.default.debug('Using native web tap');

    await this.nativeWebTap(el);
  } else {
    let atomsElement = this.useAtomsElement(el);
    return await this.executeAtom('click', [atomsElement]);
  }
};

function gesturesChainToString(gestures, keysToInclude = ['options']) {
  return gestures.map(item => {
    let otherKeys = _lodash.default.difference(_lodash.default.keys(item), ['action']);

    otherKeys = _lodash.default.isArray(keysToInclude) ? _lodash.default.intersection(otherKeys, keysToInclude) : otherKeys;

    if (otherKeys.length) {
      return `${item.action}` + `(${_lodash.default.map(otherKeys, x => x + '=' + (_lodash.default.isPlainObject(item[x]) ? JSON.stringify(item[x]) : item[x])).join(', ')})`;
    }

    return item.action;
  }).join('-');
}

commands.performActions = async function performActions(actions) {
  _logger.default.debug(`Received the following W3C actions: ${JSON.stringify(actions, null, '  ')}`);

  const preprocessedActions = actions.map(action => Object.assign({}, action, action.type === 'pointer' ? {
    parameters: {
      pointerType: 'touch'
    }
  } : {})).map(action => {
    const modifiedAction = _lodash.default.clone(action) || {};
    modifiedAction.actions = (action.actions || []).filter(innerAction => !(innerAction.type === 'pause' && innerAction.duration === 0));
    return modifiedAction;
  });

  _logger.default.debug(`Preprocessed actions: ${JSON.stringify(preprocessedActions, null, '  ')}`);

  return await this.proxyCommand('/actions', 'POST', {
    actions: preprocessedActions
  });
};

commands.performTouch = async function performTouch(gestures) {
  _logger.default.debug(`Received the following touch action: ${gesturesChainToString(gestures)}`);

  try {
    return await this.proxyCommand('/wda/touch/perform', 'POST', {
      actions: gestures
    });
  } catch (e) {
    if (!this.isWebContext()) {
      throw e;
    }

    _logger.default.errorAndThrow('The Touch API is aimed for usage in NATIVE context. ' + 'Consider using "execute" API with custom events trigger script ' + `to emulate touch events being in WEBVIEW context. Original error: ${e.message}`);
  }
};

commands.performMultiAction = async function performMultiAction(actions) {
  _logger.default.debug(`Received the following multi touch action:`);

  for (let i in actions) {
    _logger.default.debug(`    ${parseInt(i, 10) + 1}: ${_lodash.default.map(actions[i], 'action').join('-')}`);
  }

  try {
    return await this.proxyCommand('/wda/touch/multi/perform', 'POST', {
      actions
    });
  } catch (e) {
    if (!this.isWebContext()) {
      throw e;
    }

    _logger.default.errorAndThrow('The MultiTouch API is aimed for usage in NATIVE context. ' + 'Consider using "execute" API with custom events trigger script ' + `to emulate multitouch events being in WEBVIEW context. Original error: ${e.message}`);
  }
};

commands.nativeClick = async function nativeClick(el) {
  el = _appiumSupport.util.unwrapElement(el);
  let endpoint = `/element/${el}/click`;
  return await this.proxyCommand(endpoint, 'POST', {});
};

helpers.mobileScroll = async function mobileScroll(opts = {}, swipe = false) {
  if (!opts.element) {
    opts.element = await this.findNativeElementOrElements(`class name`, `XCUIElementTypeApplication`, false);
  }

  let params = {};

  if (opts.name && !swipe) {
    params.name = opts.name;
  } else if (opts.direction) {
    if (!['up', 'down', 'left', 'right'].includes(opts.direction.toLowerCase())) {
      let msg = 'Direction must be up, down, left or right';

      _logger.default.errorAndThrow(msg);
    }

    params.direction = opts.direction;
  } else if (opts.predicateString && !swipe) {
    params.predicateString = opts.predicateString;
  } else if (opts.toVisible && !swipe) {
    params.toVisible = opts.toVisible;
  } else {
    let msg = swipe ? 'Mobile swipe requires direction' : 'Mobile scroll supports the following strategies: name, direction, predicateString, and toVisible. Specify one of these';

    _logger.default.errorAndThrow(msg);
  }

  if (!swipe && opts.distance) {
    params.distance = opts.distance;
  }

  let element = opts.element.ELEMENT || opts.element;
  let endpoint = `/wda/element/${element}/${swipe ? 'swipe' : 'scroll'}`;
  return await this.proxyCommand(endpoint, 'POST', params);
};

helpers.mobileSwipe = async function mobileSwipe(opts = {}) {
  return await this.mobileScroll(opts, true);
};

function parseFloatParameter(paramName, paramValue, methodName) {
  if (_lodash.default.isUndefined(paramValue)) {
    _logger.default.errorAndThrow(`"${paramName}" parameter is mandatory for "${methodName}" call`);
  }

  const result = parseFloat(paramValue);

  if (isNaN(result)) {
    _logger.default.errorAndThrow(`"${paramName}" parameter should be a valid number. "${paramValue}" is given instead`);
  }

  return result;
}

helpers.mobilePinch = async function mobilePinch(opts = {}) {
  if (!opts.element) {
    opts.element = await this.findNativeElementOrElements(`class name`, `XCUIElementTypeApplication`, false);
  }

  const params = {
    scale: parseFloatParameter('scale', opts.scale, 'pinch'),
    velocity: parseFloatParameter('velocity', opts.velocity, 'pinch')
  };
  const el = opts.element.ELEMENT || opts.element;
  return await this.proxyCommand(`/wda/element/${el}/pinch`, 'POST', params);
};

helpers.mobileDoubleTap = async function mobileDoubleTap(opts = {}) {
  if (opts.element) {
    const el = opts.element.ELEMENT || opts.element;
    return await this.proxyCommand(`/wda/element/${el}/doubleTap`, 'POST');
  }

  const params = {
    x: parseFloatParameter('x', opts.x, 'doubleTap'),
    y: parseFloatParameter('y', opts.y, 'doubleTap')
  };
  return await this.proxyCommand('/wda/doubleTap', 'POST', params);
};

helpers.mobileTwoFingerTap = async function mobileTwoFingerTap(opts = {}) {
  if (!opts.element) {
    opts.element = await this.findNativeElementOrElements(`class name`, `XCUIElementTypeApplication`, false);
  }

  const el = opts.element.ELEMENT || opts.element;
  return await this.proxyCommand(`/wda/element/${el}/twoFingerTap`, 'POST');
};

helpers.mobileTouchAndHold = async function mobileTouchAndHold(opts = {}) {
  let params = {
    duration: parseFloatParameter('duration', opts.duration, 'touchAndHold')
  };

  if (opts.element) {
    const el = opts.element.ELEMENT || opts.element;
    return await this.proxyCommand(`/wda/element/${el}/touchAndHold`, 'POST', params);
  }

  params.x = parseFloatParameter('x', opts.x, 'touchAndHold');
  params.y = parseFloatParameter('y', opts.y, 'touchAndHold');
  return await this.proxyCommand('/wda/touchAndHold', 'POST', params);
};

helpers.mobileTap = async function mobileTap(opts = {}) {
  const params = {
    x: parseFloatParameter('x', opts.x, 'tap'),
    y: parseFloatParameter('y', opts.y, 'tap')
  };
  const el = opts.element ? opts.element.ELEMENT || opts.element : '0';
  return await this.proxyCommand(`/wda/tap/${el}`, 'POST', params);
};

helpers.mobileDragFromToForDuration = async function mobileDragFromToForDuration(opts = {}) {
  const params = {
    duration: parseFloatParameter('duration', opts.duration, 'dragFromToForDuration'),
    fromX: parseFloatParameter('fromX', opts.fromX, 'dragFromToForDuration'),
    fromY: parseFloatParameter('fromY', opts.fromY, 'dragFromToForDuration'),
    toX: parseFloatParameter('toX', opts.toX, 'dragFromToForDuration'),
    toY: parseFloatParameter('toY', opts.toY, 'dragFromToForDuration')
  };

  if (opts.element) {
    const el = opts.element.ELEMENT || opts.element;
    return await this.proxyCommand(`/wda/element/${el}/dragfromtoforduration`, 'POST', params);
  }

  return await this.proxyCommand('/wda/dragfromtoforduration', 'POST', params);
};

helpers.mobileSelectPickerWheelValue = async function mobileSelectPickerWheelValue(opts = {}) {
  if (!opts.element) {
    _logger.default.errorAndThrow('Element id is expected to be set for selectPickerWheelValue method');
  }

  if (!_lodash.default.isString(opts.order) || !['next', 'previous'].includes(opts.order.toLowerCase())) {
    _logger.default.errorAndThrow(`The mandatory 'order' parameter is expected to be equal either to 'next' or 'previous'. ` + `'${opts.order}' is given instead`);
  }

  const el = opts.element.ELEMENT || opts.element;
  const params = {
    order: opts.order
  };

  if (opts.offset) {
    params.offset = parseFloatParameter('offset', opts.offset, 'selectPickerWheelValue');
  }

  return await this.proxyCommand(`/wda/pickerwheel/${el}/select`, 'POST', params);
};

helpers.getCoordinates = async function getCoordinates(gesture) {
  let el = gesture.options.element;
  let coordinates = {
    x: 0,
    y: 0,
    areOffsets: false
  };
  let optionX = null;

  if (gesture.options.x) {
    optionX = parseFloatParameter('x', gesture.options.x, 'getCoordinates');
  }

  let optionY = null;

  if (gesture.options.y) {
    optionY = parseFloatParameter('y', gesture.options.y, 'getCoordinates');
  }

  if (el) {
    let rect = await this.getElementRect(el);
    let pos = {
      x: rect.x,
      y: rect.y
    };
    let size = {
      w: rect.width,
      h: rect.height
    };
    let offsetX = 0;
    let offsetY = 0;

    if (optionX || optionY) {
      offsetX = optionX || 0;
      offsetY = optionY || 0;
    } else {
      offsetX = size.w / 2;
      offsetY = size.h / 2;
    }

    coordinates.x = pos.x + offsetX;
    coordinates.y = pos.y + offsetY;
  } else {
    coordinates.areOffsets = gesture.action === 'moveTo';
    coordinates.x = optionX || 0;
    coordinates.y = optionY || 0;
  }

  return coordinates;
};

helpers.applyMoveToOffset = function applyMoveToOffset(firstCoordinates, secondCoordinates) {
  if (secondCoordinates.areOffsets) {
    return {
      x: firstCoordinates.x + secondCoordinates.x,
      y: firstCoordinates.y + secondCoordinates.y
    };
  } else {
    return secondCoordinates;
  }
};

Object.assign(extensions, helpers, commands);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9nZXN0dXJlLmpzIl0sIm5hbWVzIjpbImhlbHBlcnMiLCJleHRlbnNpb25zIiwiY29tbWFuZHMiLCJtb3ZlVG8iLCJpb3NDb21tYW5kcyIsImdlc3R1cmUiLCJtb2JpbGVTaGFrZSIsImlzU2ltdWxhdG9yIiwiZXJyb3JzIiwiVW5rbm93bkVycm9yIiwib3B0cyIsImRldmljZSIsInNoYWtlIiwiY2xpY2siLCJlbCIsImlzV2ViQ29udGV4dCIsIm5hdGl2ZUNsaWNrIiwidXRpbCIsInVud3JhcEVsZW1lbnQiLCJzZXR0aW5ncyIsImdldFNldHRpbmdzIiwibmF0aXZlV2ViVGFwIiwibG9nIiwiZGVidWciLCJhdG9tc0VsZW1lbnQiLCJ1c2VBdG9tc0VsZW1lbnQiLCJleGVjdXRlQXRvbSIsImdlc3R1cmVzQ2hhaW5Ub1N0cmluZyIsImdlc3R1cmVzIiwia2V5c1RvSW5jbHVkZSIsIm1hcCIsIml0ZW0iLCJvdGhlcktleXMiLCJfIiwiZGlmZmVyZW5jZSIsImtleXMiLCJpc0FycmF5IiwiaW50ZXJzZWN0aW9uIiwibGVuZ3RoIiwiYWN0aW9uIiwieCIsImlzUGxhaW5PYmplY3QiLCJKU09OIiwic3RyaW5naWZ5Iiwiam9pbiIsInBlcmZvcm1BY3Rpb25zIiwiYWN0aW9ucyIsInByZXByb2Nlc3NlZEFjdGlvbnMiLCJPYmplY3QiLCJhc3NpZ24iLCJ0eXBlIiwicGFyYW1ldGVycyIsInBvaW50ZXJUeXBlIiwibW9kaWZpZWRBY3Rpb24iLCJjbG9uZSIsImZpbHRlciIsImlubmVyQWN0aW9uIiwiZHVyYXRpb24iLCJwcm94eUNvbW1hbmQiLCJwZXJmb3JtVG91Y2giLCJlIiwiZXJyb3JBbmRUaHJvdyIsIm1lc3NhZ2UiLCJwZXJmb3JtTXVsdGlBY3Rpb24iLCJpIiwicGFyc2VJbnQiLCJlbmRwb2ludCIsIm1vYmlsZVNjcm9sbCIsInN3aXBlIiwiZWxlbWVudCIsImZpbmROYXRpdmVFbGVtZW50T3JFbGVtZW50cyIsInBhcmFtcyIsIm5hbWUiLCJkaXJlY3Rpb24iLCJpbmNsdWRlcyIsInRvTG93ZXJDYXNlIiwibXNnIiwicHJlZGljYXRlU3RyaW5nIiwidG9WaXNpYmxlIiwiZGlzdGFuY2UiLCJFTEVNRU5UIiwibW9iaWxlU3dpcGUiLCJwYXJzZUZsb2F0UGFyYW1ldGVyIiwicGFyYW1OYW1lIiwicGFyYW1WYWx1ZSIsIm1ldGhvZE5hbWUiLCJpc1VuZGVmaW5lZCIsInJlc3VsdCIsInBhcnNlRmxvYXQiLCJpc05hTiIsIm1vYmlsZVBpbmNoIiwic2NhbGUiLCJ2ZWxvY2l0eSIsIm1vYmlsZURvdWJsZVRhcCIsInkiLCJtb2JpbGVUd29GaW5nZXJUYXAiLCJtb2JpbGVUb3VjaEFuZEhvbGQiLCJtb2JpbGVUYXAiLCJtb2JpbGVEcmFnRnJvbVRvRm9yRHVyYXRpb24iLCJmcm9tWCIsImZyb21ZIiwidG9YIiwidG9ZIiwibW9iaWxlU2VsZWN0UGlja2VyV2hlZWxWYWx1ZSIsImlzU3RyaW5nIiwib3JkZXIiLCJvZmZzZXQiLCJnZXRDb29yZGluYXRlcyIsIm9wdGlvbnMiLCJjb29yZGluYXRlcyIsImFyZU9mZnNldHMiLCJvcHRpb25YIiwib3B0aW9uWSIsInJlY3QiLCJnZXRFbGVtZW50UmVjdCIsInBvcyIsInNpemUiLCJ3Iiwid2lkdGgiLCJoIiwiaGVpZ2h0Iiwib2Zmc2V0WCIsIm9mZnNldFkiLCJhcHBseU1vdmVUb09mZnNldCIsImZpcnN0Q29vcmRpbmF0ZXMiLCJzZWNvbmRDb29yZGluYXRlcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBR0EsSUFBSUEsT0FBTyxHQUFHLEVBQWQ7QUFBQSxJQUFrQkMsVUFBVSxHQUFHLEVBQS9CO0FBQUEsSUFBbUNDLFFBQVEsR0FBRyxFQUE5Qzs7OztBQUVBQSxRQUFRLENBQUNDLE1BQVQsR0FBa0JDLDZCQUFZQyxPQUFaLENBQW9CRixNQUF0Qzs7QUFFQUQsUUFBUSxDQUFDSSxXQUFULEdBQXVCLGVBQWVBLFdBQWYsR0FBOEI7QUFD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QUEsV0FBVyxDQUFDQyxVQUFaLEdBQTBCekcsT0FBTyxDQUFDa0MsTUFBUixLQUFtQixRQUE3QztBQUNBc0UsSUFBQUEsV0FBVyxDQUFDckUsQ0FBWixHQUFpQnVFLE9BQU8sSUFBSSxDQUE1QjtBQUNBRixJQUFBQSxXQUFXLENBQUNmLENBQVosR0FBaUJrQixPQUFPLElBQUksQ0FBNUI7QUFDRDs7QUFDRCxTQUFPSCxXQUFQO0FBQ0QsQ0E1Q0Q7O0FBOENBN0csT0FBTyxDQUFDMkgsaUJBQVIsR0FBNEIsU0FBU0EsaUJBQVQsQ0FBNEJDLGdCQUE1QixFQUE4Q0MsaUJBQTlDLEVBQWlFO0FBQzNGLE1BQUlBLGlCQUFpQixDQUFDZixVQUF0QixFQUFrQztBQUNoQyxXQUFPO0FBQ0x0RSxNQUFBQSxDQUFDLEVBQUVvRixnQkFBZ0IsQ0FBQ3BGLENBQWpCLEdBQXFCcUYsaUJBQWlCLENBQUNyRixDQURyQztBQUVMc0QsTUFBQUEsQ0FBQyxFQUFFOEIsZ0JBQWdCLENBQUM5QixDQUFqQixHQUFxQitCLGlCQUFpQixDQUFDL0I7QUFGckMsS0FBUDtBQUlELEdBTEQsTUFLTztBQUNMLFdBQU8rQixpQkFBUDtBQUNEO0FBQ0YsQ0FURDs7QUFXQTdFLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjaEQsVUFBZCxFQUEwQkQsT0FBMUIsRUFBbUNFLFFBQW5DO2VBRWVELFUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlcnJvcnMgfSBmcm9tICdhcHBpdW0tYmFzZS1kcml2ZXInO1xuaW1wb3J0IHsgdXRpbCB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCB7IGlvc0NvbW1hbmRzIH0gZnJvbSAnYXBwaXVtLWlvcy1kcml2ZXInO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyJztcblxuXG5sZXQgaGVscGVycyA9IHt9LCBleHRlbnNpb25zID0ge30sIGNvbW1hbmRzID0ge307XG5cbmNvbW1hbmRzLm1vdmVUbyA9IGlvc0NvbW1hbmRzLmdlc3R1cmUubW92ZVRvO1xuXG5jb21tYW5kcy5tb2JpbGVTaGFrZSA9IGFzeW5jIGZ1bmN0aW9uIG1vYmlsZVNoYWtlICgpIHtcbiAgaWYgKCF0aGlzLmlzU2ltdWxhdG9yKCkpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLlVua25vd25FcnJvcignU2hha2UgaXMgbm90IHN1cHBvcnRlZCBvbiByZWFsIGRldmljZXMnKTtcbiAgfVxuICBhd2FpdCB0aGlzLm9wdHMuZGV2aWNlLnNoYWtlKCk7XG59O1xuXG5jb21tYW5kcy5jbGljayA9IGFzeW5jIGZ1bmN0aW9uIGNsaWNrIChlbCkge1xuICBpZiAoIXRoaXMuaXNXZWJDb250ZXh0KCkpIHtcbiAgICAvLyB0aGVyZSBhcmUgbXVsdGlwbGUgY29tbWFuZHMgdGhhdCBtYXAgaGVyZSwgc28gbWFudWFsbHkgcHJveHlcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5uYXRpdmVDbGljayhlbCk7XG4gIH1cbiAgZWwgPSB1dGlsLnVud3JhcEVsZW1lbnQoZWwpO1xuICBpZiAoKGF3YWl0IHRoaXMuc2V0dGluZ3MuZ2V0U2V0dGluZ3MoKSkubmF0aXZlV2ViVGFwKSB7XG4gICAgLy8gYXRvbXMtYmFzZWQgY2xpY2tzIGRvbid0IGFsd2F5cyB3b3JrIGluIHNhZmFyaSA3XG4gICAgbG9nLmRlYnVnKCdVc2luZyBuYXRpdmUgd2ViIHRhcCcpO1xuICAgIGF3YWl0IHRoaXMubmF0aXZlV2ViVGFwKGVsKTtcbiAgfSBlbHNlIHtcbiAgICBsZXQgYXRvbXNFbGVtZW50ID0gdGhpcy51c2VBdG9tc0VsZW1lbnQoZWwpO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmV4ZWN1dGVBdG9tKCdjbGljaycsIFthdG9tc0VsZW1lbnRdKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZ2VzdHVyZXNDaGFpblRvU3RyaW5nIChnZXN0dXJlcywga2V5c1RvSW5jbHVkZSA9IFsnb3B0aW9ucyddKSB7XG4gIHJldHVybiBnZXN0dXJlcy5tYXAoKGl0ZW0pID0+IHtcbiAgICBsZXQgb3RoZXJLZXlzID0gXy5kaWZmZXJlbmNlKF8ua2V5cyhpdGVtKSwgWydhY3Rpb24nXSk7XG4gICAgb3RoZXJLZXlzID0gXy5pc0FycmF5KGtleXNUb0luY2x1ZGUpID8gXy5pbnRlcnNlY3Rpb24ob3RoZXJLZXlzLCBrZXlzVG9JbmNsdWRlKSA6IG90aGVyS2V5cztcbiAgICBpZiAob3RoZXJLZXlzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGAke2l0ZW0uYWN0aW9ufWAgK1xuICAgICAgICBgKCR7Xy5tYXAob3RoZXJLZXlzLCAoeCkgPT4geCArICc9JyArIChfLmlzUGxhaW5PYmplY3QoaXRlbVt4XSkgPyBKU09OLnN0cmluZ2lmeShpdGVtW3hdKSA6IGl0ZW1beF0pKS5qb2luKCcsICcpfSlgO1xuICAgIH1cbiAgICByZXR1cm4gaXRlbS5hY3Rpb247XG4gIH0pLmpvaW4oJy0nKTtcbn1cblxuY29tbWFuZHMucGVyZm9ybUFjdGlvbnMgPSBhc3luYyBmdW5jdGlvbiBwZXJmb3JtQWN0aW9ucyAoYWN0aW9ucykge1xuICBsb2cuZGVidWcoYFJlY2VpdmVkIHRoZSBmb2xsb3dpbmcgVzNDIGFjdGlvbnM6ICR7SlNPTi5zdHJpbmdpZnkoYWN0aW9ucywgbnVsbCwgJyAgJyl9YCk7XG4gIC8vIFRoaXMgaXMgbWFuZGF0b3J5LCBzaW5jZSBXREEgb25seSBzdXBwb3J0cyBUT1VDSCBwb2ludGVyIHR5cGVcbiAgLy8gYW5kIFNlbGVuaXVtIEFQSSB1c2VzIE1PVVNFIGFzIHRoZSBkZWZhdWx0IG9uZVxuICBjb25zdCBwcmVwcm9jZXNzZWRBY3Rpb25zID0gYWN0aW9uc1xuICAgIC5tYXAoKGFjdGlvbikgPT4gT2JqZWN0LmFzc2lnbih7fSwgYWN0aW9uLCBhY3Rpb24udHlwZSA9PT0gJ3BvaW50ZXInID8ge1xuICAgICAgcGFyYW1ldGVyczoge1xuICAgICAgICBwb2ludGVyVHlwZTogJ3RvdWNoJ1xuICAgICAgfVxuICAgIH0gOiB7fSkpXG4gICAgLm1hcCgoYWN0aW9uKSA9PiB7XG4gICAgICBjb25zdCBtb2RpZmllZEFjdGlvbiA9IF8uY2xvbmUoYWN0aW9uKSB8fCB7fTtcbiAgICAgIC8vIFNlbGVuaXVtIEFQSSB1bmV4cGVjdGVkbHkgaW5zZXJ0cyB6ZXJvIHBhdXNlcywgd2hpY2ggYXJlIG5vdCBzdXBwb3J0ZWQgYnkgV0RBXG4gICAgICBtb2RpZmllZEFjdGlvbi5hY3Rpb25zID0gKGFjdGlvbi5hY3Rpb25zIHx8IFtdKVxuICAgICAgICAuZmlsdGVyKChpbm5lckFjdGlvbikgPT4gIShpbm5lckFjdGlvbi50eXBlID09PSAncGF1c2UnICYmIGlubmVyQWN0aW9uLmR1cmF0aW9uID09PSAwKSk7XG4gICAgICByZXR1cm4gbW9kaWZpZWRBY3Rpb247XG4gICAgfSk7XG4gIGxvZy5kZWJ1ZyhgUHJlcHJvY2Vzc2VkIGFjdGlvbnM6ICR7SlNPTi5zdHJpbmdpZnkocHJlcHJvY2Vzc2VkQWN0aW9ucywgbnVsbCwgJyAgJyl9YCk7XG4gIHJldHVybiBhd2FpdCB0aGlzLnByb3h5Q29tbWFuZCgnL2FjdGlvbnMnLCAnUE9TVCcsIHthY3Rpb25zOiBwcmVwcm9jZXNzZWRBY3Rpb25zfSk7XG59O1xuXG5jb21tYW5kcy5wZXJmb3JtVG91Y2ggPSBhc3luYyBmdW5jdGlvbiBwZXJmb3JtVG91Y2ggKGdlc3R1cmVzKSB7XG4gIGxvZy5kZWJ1ZyhgUmVjZWl2ZWQgdGhlIGZvbGxvd2luZyB0b3VjaCBhY3Rpb246ICR7Z2VzdHVyZXNDaGFpblRvU3RyaW5nKGdlc3R1cmVzKX1gKTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5wcm94eUNvbW1hbmQoJy93ZGEvdG91Y2gvcGVyZm9ybScsICdQT1NUJywge2FjdGlvbnM6IGdlc3R1cmVzfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoIXRoaXMuaXNXZWJDb250ZXh0KCkpIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICAgIGxvZy5lcnJvckFuZFRocm93KCdUaGUgVG91Y2ggQVBJIGlzIGFpbWVkIGZvciB1c2FnZSBpbiBOQVRJVkUgY29udGV4dC4gJyArXG4gICAgICAnQ29uc2lkZXIgdXNpbmcgXCJleGVjdXRlXCIgQVBJIHdpdGggY3VzdG9tIGV2ZW50cyB0cmlnZ2VyIHNjcmlwdCAnICtcbiAgICAgIGB0byBlbXVsYXRlIHRvdWNoIGV2ZW50cyBiZWluZyBpbiBXRUJWSUVXIGNvbnRleHQuIE9yaWdpbmFsIGVycm9yOiAke2UubWVzc2FnZX1gKTtcbiAgfVxufTtcblxuY29tbWFuZHMucGVyZm9ybU11bHRpQWN0aW9uID0gYXN5bmMgZnVuY3Rpb24gcGVyZm9ybU11bHRpQWN0aW9uIChhY3Rpb25zKSB7XG4gIGxvZy5kZWJ1ZyhgUmVjZWl2ZWQgdGhlIGZvbGxvd2luZyBtdWx0aSB0b3VjaCBhY3Rpb246YCk7XG4gIGZvciAobGV0IGkgaW4gYWN0aW9ucykge1xuICAgIGxvZy5kZWJ1ZyhgICAgICR7cGFyc2VJbnQoaSwgMTApICsgMX06ICR7Xy5tYXAoYWN0aW9uc1tpXSwgJ2FjdGlvbicpLmpvaW4oJy0nKX1gKTtcbiAgfVxuICB0cnkge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnByb3h5Q29tbWFuZCgnL3dkYS90b3VjaC9tdWx0aS9wZXJmb3JtJywgJ1BPU1QnLCB7YWN0aW9uc30pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKCF0aGlzLmlzV2ViQ29udGV4dCgpKSB7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgICBsb2cuZXJyb3JBbmRUaHJvdygnVGhlIE11bHRpVG91Y2ggQVBJIGlzIGFpbWVkIGZvciB1c2FnZSBpbiBOQVRJVkUgY29udGV4dC4gJyArXG4gICAgICAnQ29uc2lkZXIgdXNpbmcgXCJleGVjdXRlXCIgQVBJIHdpdGggY3VzdG9tIGV2ZW50cyB0cmlnZ2VyIHNjcmlwdCAnICtcbiAgICAgIGB0byBlbXVsYXRlIG11bHRpdG91Y2ggZXZlbnRzIGJlaW5nIGluIFdFQlZJRVcgY29udGV4dC4gT3JpZ2luYWwgZXJyb3I6ICR7ZS5tZXNzYWdlfWApO1xuICB9XG59O1xuXG5jb21tYW5kcy5uYXRpdmVDbGljayA9IGFzeW5jIGZ1bmN0aW9uIG5hdGl2ZUNsaWNrIChlbCkge1xuICBlbCA9IHV0aWwudW53cmFwRWxlbWVudChlbCk7XG4gIGxldCBlbmRwb2ludCA9IGAvZWxlbWVudC8ke2VsfS9jbGlja2A7XG4gIHJldHVybiBhd2FpdCB0aGlzLnByb3h5Q29tbWFuZChlbmRwb2ludCwgJ1BPU1QnLCB7fSk7XG59O1xuXG4vKlxuICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9XZWJEcml2ZXJBZ2VudC9ibG9iL21hc3Rlci9XZWJEcml2ZXJBZ2VudExpYi9Db21tYW5kcy9GQkVsZW1lbnRDb21tYW5kcy5tXG4gKiB0byBnZXQgdGhlIGluZm8gYWJvdXQgYXZhaWxhYmxlIFdEQSBnZXN0dXJlcyBBUElcbiAqXG4gKiBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL3JlZmVyZW5jZS94Y3Rlc3QveGN1aWVsZW1lbnQgYW5kXG4gKiBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vcmVmZXJlbmNlL3hjdGVzdC94Y3VpY29vcmRpbmF0ZSB0byBnZXQgdGhlIGRldGFpbGVkIGRlc2NyaXB0aW9uIG9mXG4gKiBhbGwgWENUZXN0IGdlc3R1cmVzXG4qL1xuXG5oZWxwZXJzLm1vYmlsZVNjcm9sbCA9IGFzeW5jIGZ1bmN0aW9uIG1vYmlsZVNjcm9sbCAob3B0cyA9IHt9LCBzd2lwZSA9IGZhbHNlKSB7XG4gIGlmICghb3B0cy5lbGVtZW50KSB7XG4gICAgb3B0cy5lbGVtZW50ID0gYXdhaXQgdGhpcy5maW5kTmF0aXZlRWxlbWVudE9yRWxlbWVudHMoYGNsYXNzIG5hbWVgLCBgWENVSUVsZW1lbnRUeXBlQXBwbGljYXRpb25gLCBmYWxzZSk7XG4gIH1cbiAgLy8gV0RBIHN1cHBvcnRzIGZvdXIgc2Nyb2xsaW5nIHN0cmF0ZWdpZXM6IHByZWRpY2F0aW9uIGJhc2VkIG9uIG5hbWUsIGRpcmVjdGlvbixcbiAgLy8gcHJlZGljYXRlU3RyaW5nLCBhbmQgdG9WaXNpYmxlLCBpbiB0aGF0IG9yZGVyLiBTd2lwaW5nIHJlcXVpcmVzIGRpcmVjdGlvbi5cbiAgbGV0IHBhcmFtcyA9IHt9O1xuICBpZiAob3B0cy5uYW1lICYmICFzd2lwZSkge1xuICAgIHBhcmFtcy5uYW1lID0gb3B0cy5uYW1lO1xuICB9IGVsc2UgaWYgKG9wdHMuZGlyZWN0aW9uKSB7XG4gICAgaWYgKCFbJ3VwJywgJ2Rvd24nLCAnbGVmdCcsICdyaWdodCddLmluY2x1ZGVzKG9wdHMuZGlyZWN0aW9uLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICBsZXQgbXNnID0gJ0RpcmVjdGlvbiBtdXN0IGJlIHVwLCBkb3duLCBsZWZ0IG9yIHJpZ2h0JztcbiAgICAgIGxvZy5lcnJvckFuZFRocm93KG1zZyk7XG4gICAgfVxuICAgIHBhcmFtcy5kaXJlY3Rpb24gPSBvcHRzLmRpcmVjdGlvbjtcbiAgfSBlbHNlIGlmIChvcHRzLnByZWRpY2F0ZVN0cmluZyAmJiAhc3dpcGUpIHtcbiAgICBwYXJhbXMucHJlZGljYXRlU3RyaW5nID0gb3B0cy5wcmVkaWNhdGVTdHJpbmc7XG4gIH0gZWxzZSBpZiAob3B0cy50b1Zpc2libGUgJiYgIXN3aXBlKSB7XG4gICAgcGFyYW1zLnRvVmlzaWJsZSA9IG9wdHMudG9WaXNpYmxlO1xuICB9IGVsc2Uge1xuICAgIGxldCBtc2cgPSBzd2lwZVxuICAgICAgPyAnTW9iaWxlIHN3aXBlIHJlcXVpcmVzIGRpcmVjdGlvbidcbiAgICAgIDogJ01vYmlsZSBzY3JvbGwgc3VwcG9ydHMgdGhlIGZvbGxvd2luZyBzdHJhdGVnaWVzOiBuYW1lLCBkaXJlY3Rpb24sIHByZWRpY2F0ZVN0cmluZywgYW5kIHRvVmlzaWJsZS4gU3BlY2lmeSBvbmUgb2YgdGhlc2UnO1xuICAgIGxvZy5lcnJvckFuZFRocm93KG1zZyk7XG4gIH1cblxuICAvLyB3ZSBjYW4gYWxzbyBvcHRpb25hbGx5IHBhc3MgYSBkaXN0YW5jZSB3aGljaCBhcHBlYXJzIHRvIGJlIGEgcmF0aW8gb2ZcbiAgLy8gc2NyZWVuIGhlaWdodCwgc28gMS4wIG1lYW5zIGEgZnVsbCBzY3JlZW4ncyB3b3J0aCBvZiBzY3JvbGxpbmdcbiAgaWYgKCFzd2lwZSAmJiBvcHRzLmRpc3RhbmNlKSB7XG4gICAgcGFyYW1zLmRpc3RhbmNlID0gb3B0cy5kaXN0YW5jZTtcbiAgfVxuXG4gIGxldCBlbGVtZW50ID0gb3B0cy5lbGVtZW50LkVMRU1FTlQgfHwgb3B0cy5lbGVtZW50O1xuICBsZXQgZW5kcG9pbnQgPSBgL3dkYS9lbGVtZW50LyR7ZWxlbWVudH0vJHtzd2lwZSA/ICdzd2lwZScgOiAnc2Nyb2xsJ31gO1xuICByZXR1cm4gYXdhaXQgdGhpcy5wcm94eUNvbW1hbmQoZW5kcG9pbnQsICdQT1NUJywgcGFyYW1zKTtcbn07XG5cbmhlbHBlcnMubW9iaWxlU3dpcGUgPSBhc3luYyBmdW5jdGlvbiBtb2JpbGVTd2lwZSAob3B0cyA9IHt9KSB7XG4gIHJldHVybiBhd2FpdCB0aGlzLm1vYmlsZVNjcm9sbChvcHRzLCB0cnVlKTtcbn07XG5cbmZ1bmN0aW9uIHBhcnNlRmxvYXRQYXJhbWV0ZXIgKHBhcmFtTmFtZSwgcGFyYW1WYWx1ZSwgbWV0aG9kTmFtZSkge1xuICBpZiAoXy5pc1VuZGVmaW5lZChwYXJhbVZhbHVlKSkge1xuICAgIGxvZy5lcnJvckFuZFRocm93KGBcIiR7cGFyYW1OYW1lfVwiIHBhcmFtZXRlciBpcyBtYW5kYXRvcnkgZm9yIFwiJHttZXRob2ROYW1lfVwiIGNhbGxgKTtcbiAgfVxuICBjb25zdCByZXN1bHQgPSBwYXJzZUZsb2F0KHBhcmFtVmFsdWUpO1xuICBpZiAoaXNOYU4ocmVzdWx0KSkge1xuICAgIGxvZy5lcnJvckFuZFRocm93KGBcIiR7cGFyYW1OYW1lfVwiIHBhcmFtZXRlciBzaG91bGQgYmUgYSB2YWxpZCBudW1iZXIuIFwiJHtwYXJhbVZhbHVlfVwiIGlzIGdpdmVuIGluc3RlYWRgKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5oZWxwZXJzLm1vYmlsZVBpbmNoID0gYXN5bmMgZnVuY3Rpb24gbW9iaWxlUGluY2ggKG9wdHMgPSB7fSkge1xuICBpZiAoIW9wdHMuZWxlbWVudCkge1xuICAgIG9wdHMuZWxlbWVudCA9IGF3YWl0IHRoaXMuZmluZE5hdGl2ZUVsZW1lbnRPckVsZW1lbnRzKGBjbGFzcyBuYW1lYCwgYFhDVUlFbGVtZW50VHlwZUFwcGxpY2F0aW9uYCwgZmFsc2UpO1xuICB9XG4gIGNvbnN0IHBhcmFtcyA9IHtcbiAgICBzY2FsZTogcGFyc2VGbG9hdFBhcmFtZXRlcignc2NhbGUnLCBvcHRzLnNjYWxlLCAncGluY2gnKSxcbiAgICB2ZWxvY2l0eTogcGFyc2VGbG9hdFBhcmFtZXRlcigndmVsb2NpdHknLCBvcHRzLnZlbG9jaXR5LCAncGluY2gnKVxuICB9O1xuICBjb25zdCBlbCA9IG9wdHMuZWxlbWVudC5FTEVNRU5UIHx8IG9wdHMuZWxlbWVudDtcbiAgcmV0dXJuIGF3YWl0IHRoaXMucHJveHlDb21tYW5kKGAvd2RhL2VsZW1lbnQvJHtlbH0vcGluY2hgLCAnUE9TVCcsIHBhcmFtcyk7XG59O1xuXG5oZWxwZXJzLm1vYmlsZURvdWJsZVRhcCA9IGFzeW5jIGZ1bmN0aW9uIG1vYmlsZURvdWJsZVRhcCAob3B0cyA9IHt9KSB7XG4gIGlmIChvcHRzLmVsZW1lbnQpIHtcbiAgICAvLyBEb3VibGUgdGFwIGVsZW1lbnRcbiAgICBjb25zdCBlbCA9IG9wdHMuZWxlbWVudC5FTEVNRU5UIHx8IG9wdHMuZWxlbWVudDtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5wcm94eUNvbW1hbmQoYC93ZGEvZWxlbWVudC8ke2VsfS9kb3VibGVUYXBgLCAnUE9TVCcpO1xuICB9XG4gIC8vIERvdWJsZSB0YXAgY29vcmRpbmF0ZXNcbiAgY29uc3QgcGFyYW1zID0ge1xuICAgIHg6IHBhcnNlRmxvYXRQYXJhbWV0ZXIoJ3gnLCBvcHRzLngsICdkb3VibGVUYXAnKSxcbiAgICB5OiBwYXJzZUZsb2F0UGFyYW1ldGVyKCd5Jywgb3B0cy55LCAnZG91YmxlVGFwJylcbiAgfTtcbiAgcmV0dXJuIGF3YWl0IHRoaXMucHJveHlDb21tYW5kKCcvd2RhL2RvdWJsZVRhcCcsICdQT1NUJywgcGFyYW1zKTtcbn07XG5cbmhlbHBlcnMubW9iaWxlVHdvRmluZ2VyVGFwID0gYXN5bmMgZnVuY3Rpb24gbW9iaWxlVHdvRmluZ2VyVGFwIChvcHRzID0ge30pIHtcbiAgaWYgKCFvcHRzLmVsZW1lbnQpIHtcbiAgICBvcHRzLmVsZW1lbnQgPSBhd2FpdCB0aGlzLmZpbmROYXRpdmVFbGVtZW50T3JFbGVtZW50cyhgY2xhc3MgbmFtZWAsIGBYQ1VJRWxlbWVudFR5cGVBcHBsaWNhdGlvbmAsIGZhbHNlKTtcbiAgfVxuICBjb25zdCBlbCA9IG9wdHMuZWxlbWVudC5FTEVNRU5UIHx8IG9wdHMuZWxlbWVudDtcbiAgcmV0dXJuIGF3YWl0IHRoaXMucHJveHlDb21tYW5kKGAvd2RhL2VsZW1lbnQvJHtlbH0vdHdvRmluZ2VyVGFwYCwgJ1BPU1QnKTtcbn07XG5cbmhlbHBlcnMubW9iaWxlVG91Y2hBbmRIb2xkID0gYXN5bmMgZnVuY3Rpb24gbW9iaWxlVG91Y2hBbmRIb2xkIChvcHRzID0ge30pIHtcbiAgbGV0IHBhcmFtcyA9IHtcbiAgICBkdXJhdGlvbjogcGFyc2VGbG9hdFBhcmFtZXRlcignZHVyYXRpb24nLCBvcHRzLmR1cmF0aW9uLCAndG91Y2hBbmRIb2xkJylcbiAgfTtcbiAgaWYgKG9wdHMuZWxlbWVudCkge1xuICAgIC8vIExvbmcgdGFwIGVsZW1lbnRcbiAgICBjb25zdCBlbCA9IG9wdHMuZWxlbWVudC5FTEVNRU5UIHx8IG9wdHMuZWxlbWVudDtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5wcm94eUNvbW1hbmQoYC93ZGEvZWxlbWVudC8ke2VsfS90b3VjaEFuZEhvbGRgLCAnUE9TVCcsIHBhcmFtcyk7XG4gIH1cbiAgLy8gTG9uZyB0YXAgY29vcmRpbmF0ZXNcbiAgcGFyYW1zLnggPSBwYXJzZUZsb2F0UGFyYW1ldGVyKCd4Jywgb3B0cy54LCAndG91Y2hBbmRIb2xkJyk7XG4gIHBhcmFtcy55ID0gcGFyc2VGbG9hdFBhcmFtZXRlcigneScsIG9wdHMueSwgJ3RvdWNoQW5kSG9sZCcpO1xuICByZXR1cm4gYXdhaXQgdGhpcy5wcm94eUNvbW1hbmQoJy93ZGEvdG91Y2hBbmRIb2xkJywgJ1BPU1QnLCBwYXJhbXMpO1xufTtcblxuaGVscGVycy5tb2JpbGVUYXAgPSBhc3luYyBmdW5jdGlvbiBtb2JpbGVUYXAgKG9wdHMgPSB7fSkge1xuICBjb25zdCBwYXJhbXMgPSB7XG4gICAgeDogcGFyc2VGbG9hdFBhcmFtZXRlcigneCcsIG9wdHMueCwgJ3RhcCcpLFxuICAgIHk6IHBhcnNlRmxvYXRQYXJhbWV0ZXIoJ3knLCBvcHRzLnksICd0YXAnKVxuICB9O1xuICBjb25zdCBlbCA9IG9wdHMuZWxlbWVudCA/IChvcHRzLmVsZW1lbnQuRUxFTUVOVCB8fCBvcHRzLmVsZW1lbnQpIDogJzAnO1xuICByZXR1cm4gYXdhaXQgdGhpcy5wcm94eUNvbW1hbmQoYC93ZGEvdGFwLyR7ZWx9YCwgJ1BPU1QnLCBwYXJhbXMpO1xufTtcblxuaGVscGVycy5tb2JpbGVEcmFnRnJvbVRvRm9yRHVyYXRpb24gPSBhc3luYyBmdW5jdGlvbiBtb2JpbGVEcmFnRnJvbVRvRm9yRHVyYXRpb24gKG9wdHMgPSB7fSkge1xuICBjb25zdCBwYXJhbXMgPSB7XG4gICAgZHVyYXRpb246IHBhcnNlRmxvYXRQYXJhbWV0ZXIoJ2R1cmF0aW9uJywgb3B0cy5kdXJhdGlvbiwgJ2RyYWdGcm9tVG9Gb3JEdXJhdGlvbicpLFxuICAgIGZyb21YOiBwYXJzZUZsb2F0UGFyYW1ldGVyKCdmcm9tWCcsIG9wdHMuZnJvbVgsICdkcmFnRnJvbVRvRm9yRHVyYXRpb24nKSxcbiAgICBmcm9tWTogcGFyc2VGbG9hdFBhcmFtZXRlcignZnJvbVknLCBvcHRzLmZyb21ZLCAnZHJhZ0Zyb21Ub0ZvckR1cmF0aW9uJyksXG4gICAgdG9YOiBwYXJzZUZsb2F0UGFyYW1ldGVyKCd0b1gnLCBvcHRzLnRvWCwgJ2RyYWdGcm9tVG9Gb3JEdXJhdGlvbicpLFxuICAgIHRvWTogcGFyc2VGbG9hdFBhcmFtZXRlcigndG9ZJywgb3B0cy50b1ksICdkcmFnRnJvbVRvRm9yRHVyYXRpb24nKVxuICB9O1xuICBpZiAob3B0cy5lbGVtZW50KSB7XG4gICAgLy8gRHJhZyBlbGVtZW50XG4gICAgY29uc3QgZWwgPSBvcHRzLmVsZW1lbnQuRUxFTUVOVCB8fCBvcHRzLmVsZW1lbnQ7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMucHJveHlDb21tYW5kKGAvd2RhL2VsZW1lbnQvJHtlbH0vZHJhZ2Zyb210b2ZvcmR1cmF0aW9uYCwgJ1BPU1QnLCBwYXJhbXMpO1xuICB9XG4gIC8vIERyYWcgY29vcmRpbmF0ZXNcbiAgcmV0dXJuIGF3YWl0IHRoaXMucHJveHlDb21tYW5kKCcvd2RhL2RyYWdmcm9tdG9mb3JkdXJhdGlvbicsICdQT1NUJywgcGFyYW1zKTtcbn07XG5cbmhlbHBlcnMubW9iaWxlU2VsZWN0UGlja2VyV2hlZWxWYWx1ZSA9IGFzeW5jIGZ1bmN0aW9uIG1vYmlsZVNlbGVjdFBpY2tlcldoZWVsVmFsdWUgKG9wdHMgPSB7fSkge1xuICBpZiAoIW9wdHMuZWxlbWVudCkge1xuICAgIGxvZy5lcnJvckFuZFRocm93KCdFbGVtZW50IGlkIGlzIGV4cGVjdGVkIHRvIGJlIHNldCBmb3Igc2VsZWN0UGlja2VyV2hlZWxWYWx1ZSBtZXRob2QnKTtcbiAgfVxuICBpZiAoIV8uaXNTdHJpbmcob3B0cy5vcmRlcikgfHwgIVsnbmV4dCcsICdwcmV2aW91cyddLmluY2x1ZGVzKG9wdHMub3JkZXIudG9Mb3dlckNhc2UoKSkpIHtcbiAgICBsb2cuZXJyb3JBbmRUaHJvdyhgVGhlIG1hbmRhdG9yeSAnb3JkZXInIHBhcmFtZXRlciBpcyBleHBlY3RlZCB0byBiZSBlcXVhbCBlaXRoZXIgdG8gJ25leHQnIG9yICdwcmV2aW91cycuIGAgK1xuICAgICAgICAgICAgICAgICAgICAgIGAnJHtvcHRzLm9yZGVyfScgaXMgZ2l2ZW4gaW5zdGVhZGApO1xuICB9XG4gIGNvbnN0IGVsID0gb3B0cy5lbGVtZW50LkVMRU1FTlQgfHwgb3B0cy5lbGVtZW50O1xuICBjb25zdCBwYXJhbXMgPSB7b3JkZXI6IG9wdHMub3JkZXJ9O1xuICBpZiAob3B0cy5vZmZzZXQpIHtcbiAgICBwYXJhbXMub2Zmc2V0ID0gcGFyc2VGbG9hdFBhcmFtZXRlcignb2Zmc2V0Jywgb3B0cy5vZmZzZXQsICdzZWxlY3RQaWNrZXJXaGVlbFZhbHVlJyk7XG4gIH1cbiAgcmV0dXJuIGF3YWl0IHRoaXMucHJveHlDb21tYW5kKGAvd2RhL3BpY2tlcndoZWVsLyR7ZWx9L3NlbGVjdGAsICdQT1NUJywgcGFyYW1zKTtcbn07XG5cbmhlbHBlcnMuZ2V0Q29vcmRpbmF0ZXMgPSBhc3luYyBmdW5jdGlvbiBnZXRDb29yZGluYXRlcyAoZ2VzdHVyZSkge1xuICBsZXQgZWwgPSBnZXN0dXJlLm9wdGlvbnMuZWxlbWVudDtcblxuICAvLyBkZWZhdWx0c1xuICBsZXQgY29vcmRpbmF0ZXMgPSB7eDogMCwgeTogMCwgYXJlT2Zmc2V0czogZmFsc2V9O1xuXG4gIGxldCBvcHRpb25YID0gbnVsbDtcbiAgaWYgKGdlc3R1cmUub3B0aW9ucy54KSB7XG4gICAgb3B0aW9uWCA9IHBhcnNlRmxvYXRQYXJhbWV0ZXIoJ3gnLCBnZXN0dXJlLm9wdGlvbnMueCwgJ2dldENvb3JkaW5hdGVzJyk7XG4gIH1cbiAgbGV0IG9wdGlvblkgPSBudWxsO1xuICBpZiAoZ2VzdHVyZS5vcHRpb25zLnkpIHtcbiAgICBvcHRpb25ZID0gcGFyc2VGbG9hdFBhcmFtZXRlcigneScsIGdlc3R1cmUub3B0aW9ucy55LCAnZ2V0Q29vcmRpbmF0ZXMnKTtcbiAgfVxuXG4gIC8vIGZpZ3VyZSBvdXQgdGhlIGVsZW1lbnQgY29vcmRpbmF0ZXMuXG4gIGlmIChlbCkge1xuICAgIGxldCByZWN0ID0gYXdhaXQgdGhpcy5nZXRFbGVtZW50UmVjdChlbCk7XG4gICAgbGV0IHBvcyA9IHt4OiByZWN0LngsIHk6IHJlY3QueX07XG4gICAgbGV0IHNpemUgPSB7dzogcmVjdC53aWR0aCwgaDogcmVjdC5oZWlnaHR9O1xuXG4gICAgLy8gZGVmYXVsdHNcbiAgICBsZXQgb2Zmc2V0WCA9IDA7XG4gICAgbGV0IG9mZnNldFkgPSAwO1xuXG4gICAgLy8gZ2V0IHRoZSByZWFsIG9mZnNldHNcbiAgICBpZiAob3B0aW9uWCB8fCBvcHRpb25ZKSB7XG4gICAgICBvZmZzZXRYID0gKG9wdGlvblggfHwgMCk7XG4gICAgICBvZmZzZXRZID0gKG9wdGlvblkgfHwgMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9mZnNldFggPSAoc2l6ZS53IC8gMik7XG4gICAgICBvZmZzZXRZID0gKHNpemUuaCAvIDIpO1xuICAgIH1cblxuICAgIC8vIGFwcGx5IHRoZSBvZmZzZXRzXG4gICAgY29vcmRpbmF0ZXMueCA9IHBvcy54ICsgb2Zmc2V0WDtcbiAgICBjb29yZGluYXRlcy55ID0gcG9zLnkgKyBvZmZzZXRZO1xuICB9IGVsc2Uge1xuICAgIC8vIG1vdmVUbyBjb29yZGluYXRlcyBhcmUgcGFzc2VkIGluIGFzIG9mZnNldHNcbiAgICBjb29yZGluYXRlcy5hcmVPZmZzZXRzID0gKGdlc3R1cmUuYWN0aW9uID09PSAnbW92ZVRvJyk7XG4gICAgY29vcmRpbmF0ZXMueCA9IChvcHRpb25YIHx8IDApO1xuICAgIGNvb3JkaW5hdGVzLnkgPSAob3B0aW9uWSB8fCAwKTtcbiAgfVxuICByZXR1cm4gY29vcmRpbmF0ZXM7XG59O1xuXG5oZWxwZXJzLmFwcGx5TW92ZVRvT2Zmc2V0ID0gZnVuY3Rpb24gYXBwbHlNb3ZlVG9PZmZzZXQgKGZpcnN0Q29vcmRpbmF0ZXMsIHNlY29uZENvb3JkaW5hdGVzKSB7XG4gIGlmIChzZWNvbmRDb29yZGluYXRlcy5hcmVPZmZzZXRzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IGZpcnN0Q29vcmRpbmF0ZXMueCArIHNlY29uZENvb3JkaW5hdGVzLngsXG4gICAgICB5OiBmaXJzdENvb3JkaW5hdGVzLnkgKyBzZWNvbmRDb29yZGluYXRlcy55LFxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHNlY29uZENvb3JkaW5hdGVzO1xuICB9XG59O1xuXG5PYmplY3QuYXNzaWduKGV4dGVuc2lvbnMsIGhlbHBlcnMsIGNvbW1hbmRzKTtcbmV4cG9ydCB7IGV4dGVuc2lvbnMsIGhlbHBlcnMsIGNvbW1hbmRzLCBnZXN0dXJlc0NoYWluVG9TdHJpbmcgfTtcbmV4cG9ydCBkZWZhdWx0IGV4dGVuc2lvbnM7XG4iXSwiZmlsZSI6ImxpYi9jb21tYW5kcy9nZXN0dXJlLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
