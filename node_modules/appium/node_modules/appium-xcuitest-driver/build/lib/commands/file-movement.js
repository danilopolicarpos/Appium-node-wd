"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAvailableBundleIds = getAvailableBundleIds;
exports.parseContainerPath = parseContainerPath;
exports.default = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

var _path = _interopRequireDefault(require("path"));

var _appiumIosDriver = require("appium-ios-driver");

var _logger = _interopRequireDefault(require("../logger"));

var _teen_process = require("teen_process");

var _nodeSimctl = require("node-simctl");

var _os = require("os");

var _asyncbox = require("asyncbox");

const CONTAINER_PATH_MARKER = '@';
const CONTAINER_PATH_PATTERN = new RegExp(`^${CONTAINER_PATH_MARKER}([^/]+)/(.*)`);
const CONTAINER_TYPE_SEPARATOR = ':';
const IFUSE_CONTAINER_DOCUMENTS = 'documents';
let commands = _appiumIosDriver.iosCommands.file;
exports.commands = commands;

async function verifyIFusePresence() {
  if (!(await _appiumSupport.fs.which('ifuse'))) {
    _logger.default.errorAndThrow(`'ifuse' tool is required to be installed on the machine. ` + `Install it using 'brew cask install osxfuse && brew install ifuse' or check ` + `if it is available in PATH environment variable if the tool is already installed. ` + `Current PATH value: ${process.env.PATH}`);
  }
}

async function mountDevice(device, iFuseArgs) {
  _logger.default.debug(`Starting ifuse with args '${iFuseArgs}'...`);

  try {
    await (0, _teen_process.exec)('ifuse', iFuseArgs);
  } catch (e) {
    const bundleIds = await getAvailableBundleIds(device.udid);

    _logger.default.errorAndThrow(`Cannot mount the media folder of the device with UDID ${device.udid}. ` + `Make sure osxfuse plugin has necessary permissions in System Preferences->Security & Privacy. ` + `${bundleIds} might be able to mount as '@bundleId:documents/'. ` + `Error code: ${e.code}; stderr output: ${e.stderr}`);
  }
}

function verifyIsSubPath(originalPath, root) {
  const normalizedRoot = _path.default.normalize(root);

  const normalizedPath = _path.default.normalize(_path.default.dirname(originalPath));

  if (normalizedRoot !== originalPath && !normalizedPath.startsWith(normalizedRoot)) {
    _logger.default.errorAndThrow(`'${normalizedPath}' is expected to be a subpath of '${normalizedRoot}'`);
  }
}

async function parseContainerPath(remotePath, containerRootSupplier) {
  const match = CONTAINER_PATH_PATTERN.exec(remotePath);

  if (!match) {
    _logger.default.errorAndThrow(`It is expected that package identifier ` + `starts with '${CONTAINER_PATH_MARKER}' and is separated from the ` + `relative path with a single slash. '${remotePath}' is given instead`);
  }

  let [, bundleId, relativePath] = match;
  let containerType = null;
  const typeSeparatorPos = bundleId.indexOf(CONTAINER_TYPE_SEPARATOR);

  if (typeSeparatorPos > 0 && typeSeparatorPos < bundleId.length - 1) {
    containerType = bundleId.substring(typeSeparatorPos + 1);

    _logger.default.debug(`Parsed container type: ${containerType}`);

    bundleId = bundleId.substring(0, typeSeparatorPos);
  }

  const containerRoot = _lodash.default.isFunction(containerRootSupplier) ? await containerRootSupplier(bundleId, containerType) : containerRootSupplier;

  const pathInContainer = _path.default.posix.resolve(containerRoot, relativePath);

  verifyIsSubPath(pathInContainer, containerRoot);
  return {
    bundleId,
    pathInContainer,
    containerType
  };
}

async function pushFileToSimulator(device, remotePath, base64Data) {
  const buffer = Buffer.from(base64Data, 'base64');

  if (CONTAINER_PATH_PATTERN.test(remotePath)) {
    const {
      bundleId,
      pathInContainer: dstPath
    } = await parseContainerPath(remotePath, async (appBundle, containerType) => await (0, _nodeSimctl.getAppContainer)(device.udid, appBundle, null, containerType));

    _logger.default.info(`Parsed bundle identifier '${bundleId}' from '${remotePath}'. ` + `Will put the data into '${dstPath}'`);

    if (!(await _appiumSupport.fs.exists(_path.default.dirname(dstPath)))) {
      _logger.default.debug(`The destination folder '${_path.default.dirname(dstPath)}' does not exist. Creating...`);

      await (0, _appiumSupport.mkdirp)(_path.default.dirname(dstPath));
    }

    await _appiumSupport.fs.writeFile(dstPath, buffer);
    return;
  }

  const dstFolder = await _appiumSupport.tempDir.openDir();

  const dstPath = _path.default.resolve(dstFolder, _path.default.basename(remotePath));

  try {
    await _appiumSupport.fs.writeFile(dstPath, buffer);
    await (0, _nodeSimctl.addMedia)(device.udid, dstPath);
  } finally {
    await _appiumSupport.fs.rimraf(dstFolder);
  }
}

async function pushFileToRealDevice(device, remotePath, base64Data) {
  await verifyIFusePresence();
  const mntRoot = await _appiumSupport.tempDir.openDir();
  let isUnmountSuccessful = true;

  try {
    let dstPath = _path.default.resolve(mntRoot, remotePath);

    let ifuseArgs = ['-u', device.udid, mntRoot];

    if (CONTAINER_PATH_PATTERN.test(remotePath)) {
      const {
        bundleId,
        pathInContainer,
        containerType
      } = await parseContainerPath(remotePath, mntRoot);
      dstPath = pathInContainer;

      _logger.default.info(`Parsed bundle identifier '${bundleId}' from '${remotePath}'. ` + `Will put the data into '${dstPath}'`);

      ifuseArgs = ['-u', device.udid, _lodash.default.toLower(containerType) === IFUSE_CONTAINER_DOCUMENTS ? '--documents' : '--container', bundleId, mntRoot];
    } else {
      verifyIsSubPath(dstPath, mntRoot);
    }

    await mountDevice(device, ifuseArgs);
    isUnmountSuccessful = false;

    try {
      if (!(await _appiumSupport.fs.exists(_path.default.dirname(dstPath)))) {
        _logger.default.debug(`The destination folder '${_path.default.dirname(dstPath)}' does not exist. Creating...`);

        await (0, _appiumSupport.mkdirp)(_path.default.dirname(dstPath));
      }

      await _appiumSupport.fs.writeFile(dstPath, Buffer.from(base64Data, 'base64'));
    } finally {
      (0, _asyncbox.retry)(2, async function () {
        await (0, _teen_process.exec)('umount', [mntRoot]);
      });
      isUnmountSuccessful = true;
    }
  } finally {
    if (isUnmountSuccessful) {
      await _appiumSupport.fs.rimraf(mntRoot);
    } else {
      _logger.default.warn(`Umount has failed, so not removing '${mntRoot}'`);
    }
  }
}

async function pullFromSimulator(device, remotePath, isFile) {
  let pathOnServer;

  if (CONTAINER_PATH_PATTERN.test(remotePath)) {
    const {
      bundleId,
      pathInContainer: dstPath
    } = await parseContainerPath(remotePath, async (appBundle, containerType) => await (0, _nodeSimctl.getAppContainer)(device.udid, appBundle, null, containerType));

    _logger.default.info(`Parsed bundle identifier '${bundleId}' from '${remotePath}'. ` + `Will get the data from '${dstPath}'`);

    pathOnServer = dstPath;
  } else {
    const simRoot = device.getDir();
    pathOnServer = _path.default.posix.join(simRoot, remotePath);
    verifyIsSubPath(pathOnServer, simRoot);

    _logger.default.info(`Got the full item path: ${pathOnServer}`);
  }

  if (!(await _appiumSupport.fs.exists(pathOnServer))) {
    _logger.default.errorAndThrow(`The remote ${isFile ? 'file' : 'folder'} at '${pathOnServer}' does not exist`);
  }

  const buffer = isFile ? await _appiumSupport.fs.readFile(pathOnServer) : await _appiumSupport.zip.toInMemoryZip(pathOnServer);
  return Buffer.from(buffer).toString('base64');
}

async function pullFromRealDevice(device, remotePath, isFile) {
  await verifyIFusePresence();
  const mntRoot = await _appiumSupport.tempDir.openDir();
  let isUnmountSuccessful = true;

  try {
    let dstPath = _path.default.resolve(mntRoot, remotePath);

    let ifuseArgs = ['-u', device.udid, mntRoot];

    if (CONTAINER_PATH_PATTERN.test(remotePath)) {
      const {
        bundleId,
        pathInContainer,
        containerType
      } = await parseContainerPath(remotePath, mntRoot);
      dstPath = pathInContainer;

      _logger.default.info(`Parsed bundle identifier '${bundleId}' from '${remotePath}'. ` + `Will get the data from '${dstPath}'`);

      ifuseArgs = ['-u', device.udid, _lodash.default.toLower(containerType) === IFUSE_CONTAINER_DOCUMENTS ? '--documents' : '--container', bundleId, mntRoot];
    } else {
      verifyIsSubPath(dstPath, mntRoot);
    }

    await mountDevice(device, ifuseArgs);
    isUnmountSuccessful = false;

    try {
      if (!(await _appiumSupport.fs.exists(dstPath))) {
        _logger.default.errorAndThrow(`The remote ${isFile ? 'file' : 'folder'} at '${dstPath}' does not exist`);
      }

      const buffer = isFile ? await _appiumSupport.fs.readFile(dstPath) : await _appiumSupport.zip.toInMemoryZip(dstPath);
      return Buffer.from(buffer).toString('base64');
    } finally {
      (0, _asyncbox.retry)(2, async function () {
        await (0, _teen_process.exec)('umount', [mntRoot]);
      });
      isUnmountSuccessful = true;
    }
  } finally {
    if (isUnmountSuccessful) {
      await _appiumSupport.fs.rimraf(mntRoot);
    } else {
      _logger.default.warn(`Umount has failed, so not removing '${mntRoot}'`);
    }
  }
}

async function getAvailableBundleIds(udid) {
  try {
    const {
      stdout
    } = await (0, _teen_process.exec)('ifuse', ['-u', udid, '--list-apps']);
    return stdout.split(_os.EOL).map(app => app.split(',')[0].trim()).filter(app => !_lodash.default.isEmpty(app));
  } catch (e) {
    _logger.default.warn(`Cannot get a list of bundleIds.` + `Error code: ${e}; stderr output: ${e.stderr}`);
  }

  return [];
}

commands.pushFile = async function pushFile(remotePath, base64Data) {
  if (remotePath.endsWith('/')) {
    _logger.default.errorAndThrow(`It is expected that remote path points to a file and not to a folder. ` + `'${remotePath}' is given instead`);
  }

  if (_lodash.default.isArray(base64Data)) {
    base64Data = Buffer.from(base64Data).toString('utf8');
  }

  return this.isSimulator() ? await pushFileToSimulator(this.opts.device, remotePath, base64Data) : await pushFileToRealDevice(this.opts.device, remotePath, base64Data);
};

commands.pullFile = async function pullFile(remotePath) {
  if (remotePath.endsWith('/')) {
    _logger.default.errorAndThrow(`It is expected that remote path points to a file and not to a folder. ` + `'${remotePath}' is given instead`);
  }

  return this.isSimulator() ? await pullFromSimulator(this.opts.device, remotePath, true) : await pullFromRealDevice(this.opts.device, remotePath, true);
};

commands.getSimFileFullPath = async function getSimFileFullPath(remotePath) {
  let basePath = this.opts.device.getDir();
  let appName = null;

  if (this.opts.app) {
    let appNameRegex = new RegExp(`\\${_path.default.sep}([\\w-]+\\.app)`);
    let appNameMatches = appNameRegex.exec(this.opts.app);

    if (appNameMatches) {
      appName = appNameMatches[1];
    }
  }

  if (_appiumSupport.system.isWindows()) {
    if (remotePath.indexof('://') === 1) {
      remotePath = remotePath.slice(4);
    }
  } else {
    if (remotePath.indexOf('/') === 0) {
      remotePath = remotePath.slice(1);
    }
  }

  if (remotePath.startsWith(appName)) {
    let findPath = basePath;

    if (!this.opts.platformVersion || _appiumSupport.util.compareVersions(this.opts.platformVersion, '>=', '8.0')) {
      findPath = _path.default.resolve(basePath, 'Containers', 'Bundle');
    }

    findPath = findPath.replace(/\s/g, '\\ ');
    let {
      stdout
    } = await (0, _teen_process.exec)('find', [findPath, '-name', appName]);
    let appRoot = stdout.replace(/\n$/, '');
    let subPath = remotePath.substring(appName.length + 1);

    let fullPath = _path.default.resolve(appRoot, subPath);

    _logger.default.debug(`Finding app-relative file: '${fullPath}'`);

    return fullPath;
  }

  let fullPath = _path.default.resolve(basePath, remotePath);

  _logger.default.debug(`Finding sim-relative file: ${fullPath}`);

  return fullPath;
};

commands.pullFolder = async function pullFolder(remotePath) {
  if (!remotePath.endsWith('/')) {
    remotePath = `${remotePath}/`;
  }

  return this.isSimulator() ? await pullFromSimulator(this.opts.device, remotePath, false) : await pullFromRealDevice(this.opts.device, remotePath, false);
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
