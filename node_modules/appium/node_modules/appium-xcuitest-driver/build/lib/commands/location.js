"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

require("source-map-support/register");

var _teen_process = require("teen_process");

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("../logger"));

var _lodash = _interopRequireDefault(require("lodash"));

const IDEVICELOCATION = 'idevicelocation';
const MINUS_MARKER = '--';
let commands = {};
exports.commands = commands;

function formatLocationArg(value) {
  value = `${value}`.trim();
  return value.startsWith('-') ? [MINUS_MARKER, value] : [value];
}

commands.setGeoLocation = async function setGeoLocation(location) {
  let {
    latitude,
    longitude
  } = location;

  if (!_appiumSupport.util.hasValue(latitude) || !_appiumSupport.util.hasValue(longitude)) {
    _logger.default.errorAndThrow(`Both latitude and longitude should be set`);
  }

  if (this.isSimulator()) {
    await this.opts.device.setGeolocation(`${latitude}`, `${longitude}`);
    return;
  }

  try {
    await _appiumSupport.fs.which(IDEVICELOCATION);
  } catch (e) {
    _logger.default.errorAndThrow(`${IDEVICELOCATION} doesn't exist on the host. ` + 'Check https://github.com/JonGabilondoAngulo/idevicelocation on how to install the tool.');
  }

  let args = [];
  args.push(...formatLocationArg(latitude));
  args.push(...formatLocationArg(longitude));

  if (args.includes(MINUS_MARKER) && _lodash.default.countBy(args)[MINUS_MARKER] > 1) {
    args = [MINUS_MARKER, ..._lodash.default.without(args, MINUS_MARKER)];
  }

  args = ['-u', this.opts.udid, ...args];

  _logger.default.debug(`Executing ${IDEVICELOCATION} with args ${JSON.stringify(args)}`);

  try {
    await (0, _teen_process.exec)(IDEVICELOCATION, args);
  } catch (e) {
    _logger.default.errorAndThrow(`Can't set the location on device '${this.opts.udid}'. Original error: ${e.message}`);
  }
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9sb2NhdGlvbi5qcyJdLCJuYW1lcyI6WyJJREVWSUNFTE9DQVRJT04iLCJNSU5VU19NQVJLRVIiLCJjb21tYW5kcyIsImZvcm1hdExvY2F0aW9uQXJnIiwidmFsdWUiLCJ0cmltIiwic3RhcnRzV2l0aCIsInNldEdlb0xvY2F0aW9uIiwibG9jYXRpb24iLCJsYXRpdHVkZSIsImxvbmdpdHVkZSIsInV0aWwiLCJoYXNWYWx1ZSIsImxvZyIsImVycm9yQW5kVGhyb3ciLCJpc1NpbXVsYXRvciIsIm9wdHMiLCJkZXZpY2UiLCJzZXRHZW9sb2NhdGlvbiIsImZzIiwid2hpY2giLCJlIiwiYXJncyIsInB1c2giLCJpbmNsdWRlcyIsIl8iLCJjb3VudEJ5Iiwid2l0aG91dCIsInVkaWQiLCJkZWJ1ZyIsIkpTT04iLCJzdHJpbmdpZnkiLCJtZXNzYWdlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUVBLE1BQU1BLGVBQWUsR0FBRyxpQkFBeEI7QUFDQSxNQUFNQyxZQUFZLEdBQUcsSUFBckI7QUFFQSxJQUFJQyxRQUFRLEdBQUcsRUFBZjs7O0FBRUEsU0FBU0MsaUJBQVQsQ0FBNEJDLEtBQTVCLEVBQW1DO0FBQ2pDQSxFQUFBQSxLQUFLLEdBQUksR0FBRUEsS0FBTSxFQUFULENBQVdDLElBQVgsRUFBUjtBQUVBLFNBQU9ELEtBQUssQ0FBQ0UsVUFBTixDQUFpQixHQUFqQixJQUF3QixDQUFDTCxZQUFELEVBQWVHLEtBQWYsQ0FBeEIsR0FBZ0QsQ0FBQ0EsS0FBRCxDQUF2RDtBQUNEOztBQUVERixRQUFRLENBQUNLLGNBQVQsR0FBMEIsZUFBZUEsY0FBZixDQUErQkMsUUFBL0IsRUFBeUM7QUFDakUsTUFBSTtBQUFDQyxJQUFBQSxRQUFEO0FBQVdDLElBQUFBO0FBQVgsTUFBd0JGLFFBQTVCOztBQUVBLE1BQUksQ0FBQ0csb0JBQUtDLFFBQUwsQ0FBY0gsUUFBZCxDQUFELElBQTRCLENBQUNFLG9CQUFLQyxRQUFMLENBQWNGLFNBQWQsQ0FBakMsRUFBMkQ7QUFDekRHLG9CQUFJQyxhQUFKLENBQW1CLDJDQUFuQjtBQUNEOztBQUVELE1BQUksS0FBS0MsV0FBTCxFQUFKLEVBQXdCO0FBQ3RCLFVBQU0sS0FBS0MsSUFBTCxDQUFVQyxNQUFWLENBQWlCQyxjQUFqQixDQUFpQyxHQUFFVCxRQUFTLEVBQTVDLEVBQWdELEdBQUVDLFNBQVUsRUFBNUQsQ0FBTjtBQUNBO0FBQ0Q7O0FBRUQsTUFBSTtBQUNGLFVBQU1TLGtCQUFHQyxLQUFILENBQVNwQixlQUFULENBQU47QUFDRCxHQUZELENBRUUsT0FBT3FCLENBQVAsRUFBVTtBQUNWUixvQkFBSUMsYUFBSixDQUFtQixHQUFFZCxlQUFnQiw4QkFBbkIsR0FDQSx5RkFEbEI7QUFFRDs7QUFDRCxNQUFJc0IsSUFBSSxHQUFHLEVBQVg7QUFDQUEsRUFBQUEsSUFBSSxDQUFDQyxJQUFMLENBQVUsR0FBR3BCLGlCQUFpQixDQUFDTSxRQUFELENBQTlCO0FBQ0FhLEVBQUFBLElBQUksQ0FBQ0MsSUFBTCxDQUFVLEdBQUdwQixpQkFBaUIsQ0FBQ08sU0FBRCxDQUE5Qjs7QUFDQSxNQUFJWSxJQUFJLENBQUNFLFFBQUwsQ0FBY3ZCLFlBQWQsS0FBK0J3QixnQkFBRUMsT0FBRixDQUFVSixJQUFWLEVBQWdCckIsWUFBaEIsSUFBZ0MsQ0FBbkUsRUFBc0U7QUFFcEVxQixJQUFBQSxJQUFJLEdBQUcsQ0FBQ3JCLFlBQUQsRUFBZSxHQUFJd0IsZ0JBQUVFLE9BQUYsQ0FBVUwsSUFBVixFQUFnQnJCLFlBQWhCLENBQW5CLENBQVA7QUFDRDs7QUFDRHFCLEVBQUFBLElBQUksR0FBRyxDQUFDLElBQUQsRUFBTyxLQUFLTixJQUFMLENBQVVZLElBQWpCLEVBQXVCLEdBQUdOLElBQTFCLENBQVA7O0FBQ0FULGtCQUFJZ0IsS0FBSixDQUFXLGFBQVk3QixlQUFnQixjQUFhOEIsSUFBSSxDQUFDQyxTQUFMLENBQWVULElBQWYsQ0FBcUIsRUFBekU7O0FBQ0EsTUFBSTtBQUNGLFVBQU0sd0JBQUt0QixlQUFMLEVBQXNCc0IsSUFBdEIsQ0FBTjtBQUNELEdBRkQsQ0FFRSxPQUFPRCxDQUFQLEVBQVU7QUFDVlIsb0JBQUlDLGFBQUosQ0FBbUIscUNBQW9DLEtBQUtFLElBQUwsQ0FBVVksSUFBSyxzQkFBcUJQLENBQUMsQ0FBQ1csT0FBUSxFQUFyRztBQUNEO0FBQ0YsQ0FoQ0Q7O2VBbUNlOUIsUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4ZWMgfSBmcm9tICd0ZWVuX3Byb2Nlc3MnO1xuaW1wb3J0IHsgZnMsIHV0aWwgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgbG9nIGZyb20gJy4uL2xvZ2dlcic7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5jb25zdCBJREVWSUNFTE9DQVRJT04gPSAnaWRldmljZWxvY2F0aW9uJztcbmNvbnN0IE1JTlVTX01BUktFUiA9ICctLSc7XG5cbmxldCBjb21tYW5kcyA9IHt9O1xuXG5mdW5jdGlvbiBmb3JtYXRMb2NhdGlvbkFyZyAodmFsdWUpIHtcbiAgdmFsdWUgPSBgJHt2YWx1ZX1gLnRyaW0oKTtcbiAgLy8gTmVnYXRpdmUgY29vcmRpbmF0ZSB2YWx1ZXMgc2hvdWxkIGJlIHByb3Blcmx5IGZvcm1hdHRlZFxuICByZXR1cm4gdmFsdWUuc3RhcnRzV2l0aCgnLScpID8gW01JTlVTX01BUktFUiwgdmFsdWVdIDogW3ZhbHVlXTtcbn1cblxuY29tbWFuZHMuc2V0R2VvTG9jYXRpb24gPSBhc3luYyBmdW5jdGlvbiBzZXRHZW9Mb2NhdGlvbiAobG9jYXRpb24pIHtcbiAgbGV0IHtsYXRpdHVkZSwgbG9uZ2l0dWRlfSA9IGxvY2F0aW9uO1xuXG4gIGlmICghdXRpbC5oYXNWYWx1ZShsYXRpdHVkZSkgfHwgIXV0aWwuaGFzVmFsdWUobG9uZ2l0dWRlKSkge1xuICAgIGxvZy5lcnJvckFuZFRocm93KGBCb3RoIGxhdGl0dWRlIGFuZCBsb25naXR1ZGUgc2hvdWxkIGJlIHNldGApO1xuICB9XG5cbiAgaWYgKHRoaXMuaXNTaW11bGF0b3IoKSkge1xuICAgIGF3YWl0IHRoaXMub3B0cy5kZXZpY2Uuc2V0R2VvbG9jYXRpb24oYCR7bGF0aXR1ZGV9YCwgYCR7bG9uZ2l0dWRlfWApO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRyeSB7XG4gICAgYXdhaXQgZnMud2hpY2goSURFVklDRUxPQ0FUSU9OKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGxvZy5lcnJvckFuZFRocm93KGAke0lERVZJQ0VMT0NBVElPTn0gZG9lc24ndCBleGlzdCBvbiB0aGUgaG9zdC4gYCArXG4gICAgICAgICAgICAgICAgICAgICAgJ0NoZWNrIGh0dHBzOi8vZ2l0aHViLmNvbS9Kb25HYWJpbG9uZG9Bbmd1bG8vaWRldmljZWxvY2F0aW9uIG9uIGhvdyB0byBpbnN0YWxsIHRoZSB0b29sLicpO1xuICB9XG4gIGxldCBhcmdzID0gW107XG4gIGFyZ3MucHVzaCguLi5mb3JtYXRMb2NhdGlvbkFyZyhsYXRpdHVkZSkpO1xuICBhcmdzLnB1c2goLi4uZm9ybWF0TG9jYXRpb25BcmcobG9uZ2l0dWRlKSk7XG4gIGlmIChhcmdzLmluY2x1ZGVzKE1JTlVTX01BUktFUikgJiYgXy5jb3VudEJ5KGFyZ3MpW01JTlVTX01BUktFUl0gPiAxKSB7XG4gICAgLy8gTW92ZSAtLSBtYXJrZXIgYXQgdGhlIHN0YXJ0IG9mIHRoZSBhcmdzIGFycmF5IGlmIHRoZXJlIGlzIG1vcmUgdGhhbiBvbmUgb2NjdXJyZW5jZVxuICAgIGFyZ3MgPSBbTUlOVVNfTUFSS0VSLCAuLi4oXy53aXRob3V0KGFyZ3MsIE1JTlVTX01BUktFUikpXTtcbiAgfVxuICBhcmdzID0gWyctdScsIHRoaXMub3B0cy51ZGlkLCAuLi5hcmdzXTtcbiAgbG9nLmRlYnVnKGBFeGVjdXRpbmcgJHtJREVWSUNFTE9DQVRJT059IHdpdGggYXJncyAke0pTT04uc3RyaW5naWZ5KGFyZ3MpfWApO1xuICB0cnkge1xuICAgIGF3YWl0IGV4ZWMoSURFVklDRUxPQ0FUSU9OLCBhcmdzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGxvZy5lcnJvckFuZFRocm93KGBDYW4ndCBzZXQgdGhlIGxvY2F0aW9uIG9uIGRldmljZSAnJHt0aGlzLm9wdHMudWRpZH0nLiBPcmlnaW5hbCBlcnJvcjogJHtlLm1lc3NhZ2V9YCk7XG4gIH1cbn07XG5cbmV4cG9ydCB7IGNvbW1hbmRzIH07XG5leHBvcnQgZGVmYXVsdCBjb21tYW5kcztcbiJdLCJmaWxlIjoibGliL2NvbW1hbmRzL2xvY2F0aW9uLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
