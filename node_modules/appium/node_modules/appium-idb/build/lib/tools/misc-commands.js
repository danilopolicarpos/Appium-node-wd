"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("../logger.js"));

var _lodash = _interopRequireDefault(require("lodash"));

var _helpers = require("../helpers");

const miscCommands = {};

miscCommands.describeDevice = async function describeDevice() {
  _logger.default.debug(`Describing the device '${this.udid}'`);

  const output = await this.exec(['describe', '--json']);
  return (0, _helpers.fixOutputToObject)(output);
};

miscCommands.focusSimulator = async function focusSimulator() {
  _logger.default.debug(`Focusing Simulator '${this.udid}'`);

  await this.exec(['focus']);
};

miscCommands.openUrl = async function openUrl(url) {
  _logger.default.debug(`Opening URL '${url}' on the device '${this.udid}'`);

  await this.exec(['open', url]);
};

miscCommands.clearKeychain = async function clearKeychain() {
  _logger.default.debug(`Clearing keyvhain on the device '${this.udid}'`);

  await this.exec(['clear-keychain']);
};

miscCommands.setLocation = async function setLocation(latitude, longitude) {
  _logger.default.debug(`Setting location (${latitude}, ${longitude}) on the device '${this.udid}'`);

  await this.exec(['set-location', latitude, longitude]);
};

miscCommands.approve = async function approve(bundleId, permissions) {
  _logger.default.debug(`Approving permissions (${JSON.stringify(permissions)}) for '${bundleId}' ` + `on the device '${this.udid}'`);

  const args = ['approve', bundleId];

  if (_lodash.default.isArray(permissions)) {
    args.push(...permissions);
  } else {
    args.push(permissions);
  }

  await this.exec(args);
};

miscCommands.addContacts = async function addContacts(dbPath) {
  _logger.default.debug(`Adding contacts from (${dbPath}) to the device '${this.udid}'`);

  await this.exec(['contacts', 'update', dbPath]);
};

var _default = miscCommands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi90b29scy9taXNjLWNvbW1hbmRzLmpzIl0sIm5hbWVzIjpbIm1pc2NDb21tYW5kcyIsImRlc2NyaWJlRGV2aWNlIiwibG9nIiwiZGVidWciLCJ1ZGlkIiwib3V0cHV0IiwiZXhlYyIsImZvY3VzU2ltdWxhdG9yIiwib3BlblVybCIsInVybCIsImNsZWFyS2V5Y2hhaW4iLCJzZXRMb2NhdGlvbiIsImxhdGl0dWRlIiwibG9uZ2l0dWRlIiwiYXBwcm92ZSIsImJ1bmRsZUlkIiwicGVybWlzc2lvbnMiLCJKU09OIiwic3RyaW5naWZ5IiwiYXJncyIsIl8iLCJpc0FycmF5IiwicHVzaCIsImFkZENvbnRhY3RzIiwiZGJQYXRoIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUdBLE1BQU1BLFlBQVksR0FBRyxFQUFyQjs7QUFzQkFBLFlBQVksQ0FBQ0MsY0FBYixHQUE4QixlQUFlQSxjQUFmLEdBQWlDO0FBQzdEQyxrQkFBSUMsS0FBSixDQUFXLDBCQUF5QixLQUFLQyxJQUFLLEdBQTlDOztBQUNBLFFBQU1DLE1BQU0sR0FBRyxNQUFNLEtBQUtDLElBQUwsQ0FBVSxDQUFDLFVBQUQsRUFBYSxRQUFiLENBQVYsQ0FBckI7QUFDQSxTQUFPLGdDQUFrQkQsTUFBbEIsQ0FBUDtBQUNELENBSkQ7O0FBU0FMLFlBQVksQ0FBQ08sY0FBYixHQUE4QixlQUFlQSxjQUFmLEdBQWlDO0FBQzdETCxrQkFBSUMsS0FBSixDQUFXLHVCQUFzQixLQUFLQyxJQUFLLEdBQTNDOztBQUNBLFFBQU0sS0FBS0UsSUFBTCxDQUFVLENBQUMsT0FBRCxDQUFWLENBQU47QUFDRCxDQUhEOztBQVdBTixZQUFZLENBQUNRLE9BQWIsR0FBdUIsZUFBZUEsT0FBZixDQUF3QkMsR0FBeEIsRUFBNkI7QUFDbERQLGtCQUFJQyxLQUFKLENBQVcsZ0JBQWVNLEdBQUksb0JBQW1CLEtBQUtMLElBQUssR0FBM0Q7O0FBQ0EsUUFBTSxLQUFLRSxJQUFMLENBQVUsQ0FBQyxNQUFELEVBQVNHLEdBQVQsQ0FBVixDQUFOO0FBQ0QsQ0FIRDs7QUFRQVQsWUFBWSxDQUFDVSxhQUFiLEdBQTZCLGVBQWVBLGFBQWYsR0FBZ0M7QUFDM0RSLGtCQUFJQyxLQUFKLENBQVcsb0NBQW1DLEtBQUtDLElBQUssR0FBeEQ7O0FBQ0EsUUFBTSxLQUFLRSxJQUFMLENBQVUsQ0FBQyxnQkFBRCxDQUFWLENBQU47QUFDRCxDQUhEOztBQVdBTixZQUFZLENBQUNXLFdBQWIsR0FBMkIsZUFBZUEsV0FBZixDQUE0QkMsUUFBNUIsRUFBc0NDLFNBQXRDLEVBQWlEO0FBQzFFWCxrQkFBSUMsS0FBSixDQUFXLHFCQUFvQlMsUUFBUyxLQUFJQyxTQUFVLG9CQUFtQixLQUFLVCxJQUFLLEdBQW5GOztBQUNBLFFBQU0sS0FBS0UsSUFBTCxDQUFVLENBQUMsY0FBRCxFQUFpQk0sUUFBakIsRUFBMkJDLFNBQTNCLENBQVYsQ0FBTjtBQUNELENBSEQ7O0FBWUFiLFlBQVksQ0FBQ2MsT0FBYixHQUF1QixlQUFlQSxPQUFmLENBQXdCQyxRQUF4QixFQUFrQ0MsV0FBbEMsRUFBK0M7QUFDcEVkLGtCQUFJQyxLQUFKLENBQVcsMEJBQXlCYyxJQUFJLENBQUNDLFNBQUwsQ0FBZUYsV0FBZixDQUE0QixVQUFTRCxRQUFTLElBQXhFLEdBQ1Asa0JBQWlCLEtBQUtYLElBQUssR0FEOUI7O0FBRUEsUUFBTWUsSUFBSSxHQUFHLENBQ1gsU0FEVyxFQUNBSixRQURBLENBQWI7O0FBR0EsTUFBSUssZ0JBQUVDLE9BQUYsQ0FBVUwsV0FBVixDQUFKLEVBQTRCO0FBQzFCRyxJQUFBQSxJQUFJLENBQUNHLElBQUwsQ0FBVSxHQUFHTixXQUFiO0FBQ0QsR0FGRCxNQUVPO0FBQ0xHLElBQUFBLElBQUksQ0FBQ0csSUFBTCxDQUFVTixXQUFWO0FBQ0Q7O0FBQ0QsUUFBTSxLQUFLVixJQUFMLENBQVVhLElBQVYsQ0FBTjtBQUNELENBWkQ7O0FBbUJBbkIsWUFBWSxDQUFDdUIsV0FBYixHQUEyQixlQUFlQSxXQUFmLENBQTRCQyxNQUE1QixFQUFvQztBQUM3RHRCLGtCQUFJQyxLQUFKLENBQVcseUJBQXdCcUIsTUFBTyxvQkFBbUIsS0FBS3BCLElBQUssR0FBdkU7O0FBQ0EsUUFBTSxLQUFLRSxJQUFMLENBQVUsQ0FBQyxVQUFELEVBQWEsUUFBYixFQUF1QmtCLE1BQXZCLENBQVYsQ0FBTjtBQUNELENBSEQ7O2VBS2V4QixZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXIuanMnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGZpeE91dHB1dFRvT2JqZWN0IH0gZnJvbSAnLi4vaGVscGVycyc7XG5cblxuY29uc3QgbWlzY0NvbW1hbmRzID0ge307XG5cbi8qKlxuICogUmV0dXJucyBtZXRhZGF0YSBhYm91dCB0aGUgc3BlY2lmaWVkIHRhcmdldC5cbiAqIE91dHB1dCBleGFtcGxlOlxuICogdGFyZ2V0X2Rlc2NyaXB0aW9uIHtcbiAqIHVkaWQ6IFwiMTRFQkRFREUtMEM5RS00NkI0LUIxRkYtMDg4MUYxMUQwRTc1XCJcbiAqIG5hbWU6IFwiaVBob25lIFhcXDMxMlxcMjAwXCJcbiAqIHNjcmVlbl9kaW1lbnNpb25zIHtcbiAqICAgd2lkdGg6IDgyOFxuICogICBoZWlnaHQ6IDE3OTJcbiAqICAgZGVuc2l0eTogMi4wXG4gKiAgIHdpZHRoX3BvaW50czogNDE0XG4gKiAgIGhlaWdodF9wb2ludHM6IDg5NlxuICogfVxuICogc3RhdGU6IFwiYm9vdGVkXCJcbiAqIHRhcmdldF90eXBlOiBcInNpbXVsYXRvclwiXG4gKiBvc192ZXJzaW9uOiBcImlPUyAxMi4yXCJcbiAqIGFyY2hpdGVjdHVyZTogXCJ4ODZfNjRcIlxuICpcbiAqIEByZXR1cm5zIHtvYmplY3R9IFRoZSBjb21tYW5kIG91dHB1dCBwYXJzZWQgdG8gYW4gb2JqZWN0XG4gKi9cbm1pc2NDb21tYW5kcy5kZXNjcmliZURldmljZSA9IGFzeW5jIGZ1bmN0aW9uIGRlc2NyaWJlRGV2aWNlICgpIHtcbiAgbG9nLmRlYnVnKGBEZXNjcmliaW5nIHRoZSBkZXZpY2UgJyR7dGhpcy51ZGlkfSdgKTtcbiAgY29uc3Qgb3V0cHV0ID0gYXdhaXQgdGhpcy5leGVjKFsnZGVzY3JpYmUnLCAnLS1qc29uJ10pO1xuICByZXR1cm4gZml4T3V0cHV0VG9PYmplY3Qob3V0cHV0KTtcbn07XG5cbi8qKlxuICogQnJpbmdzIGEgc2ltdWxhdG9ycyB3aW5kb3cgdG8gdGhlIGZvcmVncm91bmQuXG4gKi9cbm1pc2NDb21tYW5kcy5mb2N1c1NpbXVsYXRvciA9IGFzeW5jIGZ1bmN0aW9uIGZvY3VzU2ltdWxhdG9yICgpIHtcbiAgbG9nLmRlYnVnKGBGb2N1c2luZyBTaW11bGF0b3IgJyR7dGhpcy51ZGlkfSdgKTtcbiAgYXdhaXQgdGhpcy5leGVjKFsnZm9jdXMnXSk7XG59O1xuXG4vKipcbiAqIE9wZW5zIHRoZSBzcGVjaWZpZWQgVVJMIG9uIHRoZSB0YXJnZXQuXG4gKiBUaGlzIHdvcmtzIGJvdGggd2l0aCB3ZWIgYWRkcmVzc2VzIGFuZCBVUkwgc2NoZW1lcyBwcmVzZW50IG9uIHRoZSB0YXJnZXQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgdXJsIHRvIG9wZW5cbiAqL1xubWlzY0NvbW1hbmRzLm9wZW5VcmwgPSBhc3luYyBmdW5jdGlvbiBvcGVuVXJsICh1cmwpIHtcbiAgbG9nLmRlYnVnKGBPcGVuaW5nIFVSTCAnJHt1cmx9JyBvbiB0aGUgZGV2aWNlICcke3RoaXMudWRpZH0nYCk7XG4gIGF3YWl0IHRoaXMuZXhlYyhbJ29wZW4nLCB1cmxdKTtcbn07XG5cbi8qKlxuICogQ2xlYXIgdGhlIGVudGlyZSBrZXljaGFpbiBvbiBTaW11bGF0b3IuXG4gKi9cbm1pc2NDb21tYW5kcy5jbGVhcktleWNoYWluID0gYXN5bmMgZnVuY3Rpb24gY2xlYXJLZXljaGFpbiAoKSB7XG4gIGxvZy5kZWJ1ZyhgQ2xlYXJpbmcga2V5dmhhaW4gb24gdGhlIGRldmljZSAnJHt0aGlzLnVkaWR9J2ApO1xuICBhd2FpdCB0aGlzLmV4ZWMoWydjbGVhci1rZXljaGFpbiddKTtcbn07XG5cbi8qKlxuICogT3ZlcnJpZGVzIGEgc2ltdWxhdG9ycyBsb2NhdGlvblxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gbGF0aXR1ZGUgVGhlIGxhdGl0dWRlIHZhbHVlXG4gKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IGxvbmdpdHVkZSBUaGUgbG9uZ2l0dWRlIHZhbHVlXG4gKi9cbm1pc2NDb21tYW5kcy5zZXRMb2NhdGlvbiA9IGFzeW5jIGZ1bmN0aW9uIHNldExvY2F0aW9uIChsYXRpdHVkZSwgbG9uZ2l0dWRlKSB7XG4gIGxvZy5kZWJ1ZyhgU2V0dGluZyBsb2NhdGlvbiAoJHtsYXRpdHVkZX0sICR7bG9uZ2l0dWRlfSkgb24gdGhlIGRldmljZSAnJHt0aGlzLnVkaWR9J2ApO1xuICBhd2FpdCB0aGlzLmV4ZWMoWydzZXQtbG9jYXRpb24nLCBsYXRpdHVkZSwgbG9uZ2l0dWRlXSk7XG59O1xuXG4vKipcbiAqIFByb2dyYW1tYXRpY2FsbHkgYXBwcm92ZSBwZXJtaXNzaW9uIGZvciBhbiBhcHAgb24gU2ltdWxhdG9yXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJ1bmRsZUlkIEFwcGxpY2F0aW9uIGlkZW50aWZpZXIgdG8gc2V0IHRoZSBwZXJtaXNzaW9ucyBmb3JcbiAqIEBwYXJhbSB7c3RyaW5nfEFycmF5PHN0cmluZz59IHBlcm1pc3Npb25zIFRoZSBwZXJtaXNzaW9uKHMpIHRvIGFwcGx5LiBDYW4gYmVcbiAqIG9uZSBvZiB7cGhvdG9zLGNhbWVyYSxjYW1lcmF9XG4gKi9cbm1pc2NDb21tYW5kcy5hcHByb3ZlID0gYXN5bmMgZnVuY3Rpb24gYXBwcm92ZSAoYnVuZGxlSWQsIHBlcm1pc3Npb25zKSB7XG4gIGxvZy5kZWJ1ZyhgQXBwcm92aW5nIHBlcm1pc3Npb25zICgke0pTT04uc3RyaW5naWZ5KHBlcm1pc3Npb25zKX0pIGZvciAnJHtidW5kbGVJZH0nIGAgK1xuICAgIGBvbiB0aGUgZGV2aWNlICcke3RoaXMudWRpZH0nYCk7XG4gIGNvbnN0IGFyZ3MgPSBbXG4gICAgJ2FwcHJvdmUnLCBidW5kbGVJZCxcbiAgXTtcbiAgaWYgKF8uaXNBcnJheShwZXJtaXNzaW9ucykpIHtcbiAgICBhcmdzLnB1c2goLi4ucGVybWlzc2lvbnMpO1xuICB9IGVsc2Uge1xuICAgIGFyZ3MucHVzaChwZXJtaXNzaW9ucyk7XG4gIH1cbiAgYXdhaXQgdGhpcy5leGVjKGFyZ3MpO1xufTtcblxuLyoqXG4gKiBPdmVyd3JpdGUgdGhlIHNpbXVsYXRvcnMgY29udGFjdHMgZGJcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZGJQYXRoIEZ1bGwgcGF0aCB0byB0aGUgU1FMaXRlIGRiIGNvbnRhaW5pbmcgdGhlIGNvbnRhY3RzXG4gKi9cbm1pc2NDb21tYW5kcy5hZGRDb250YWN0cyA9IGFzeW5jIGZ1bmN0aW9uIGFkZENvbnRhY3RzIChkYlBhdGgpIHtcbiAgbG9nLmRlYnVnKGBBZGRpbmcgY29udGFjdHMgZnJvbSAoJHtkYlBhdGh9KSB0byB0aGUgZGV2aWNlICcke3RoaXMudWRpZH0nYCk7XG4gIGF3YWl0IHRoaXMuZXhlYyhbJ2NvbnRhY3RzJywgJ3VwZGF0ZScsIGRiUGF0aF0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgbWlzY0NvbW1hbmRzO1xuIl0sImZpbGUiOiJsaWIvdG9vbHMvbWlzYy1jb21tYW5kcy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
