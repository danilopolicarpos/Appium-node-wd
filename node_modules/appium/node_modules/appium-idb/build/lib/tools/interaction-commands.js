"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("../logger.js"));

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

const interactionCommands = {};

interactionCommands.tap = async function tap(x, y) {
  _logger.default.debug(`Performing tap at (${x}, ${y}) on the device '${this.udid}'`);

  await this.exec(['ui', 'tap', x, y]);
};

interactionCommands.pressButton = async function pressButton(name) {
  _logger.default.debug(`Performing button press of '${name}' on the device '${this.udid}'`);

  await this.exec(['ui', 'button', name]);
};

interactionCommands.typeText = async function typeText(text) {
  _logger.default.debug(`Typing '${text}' on the device '${this.udid}'`);

  await this.exec(['ui', 'text', text]);
};

interactionCommands.pressKeycode = async function pressKeycode(codes, opts = {}) {
  const {
    duration
  } = opts;

  _logger.default.debug(`Performing key code(s) ${JSON.stringify(codes)} press ` + `on the device '${this.udid}'`);

  const args = ['ui', _lodash.default.isArray(codes) ? 'key-sequence' : 'key'];

  if (_lodash.default.isArray(codes)) {
    args.push(...codes);
  } else {
    args.push(codes);

    if (_appiumSupport.util.hasValue(duration)) {
      args.push('--duration', duration);
    }
  }

  await this.exec(args);
};

var _default = interactionCommands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi90b29scy9pbnRlcmFjdGlvbi1jb21tYW5kcy5qcyJdLCJuYW1lcyI6WyJpbnRlcmFjdGlvbkNvbW1hbmRzIiwidGFwIiwieCIsInkiLCJsb2ciLCJkZWJ1ZyIsInVkaWQiLCJleGVjIiwicHJlc3NCdXR0b24iLCJuYW1lIiwidHlwZVRleHQiLCJ0ZXh0IiwicHJlc3NLZXljb2RlIiwiY29kZXMiLCJvcHRzIiwiZHVyYXRpb24iLCJKU09OIiwic3RyaW5naWZ5IiwiYXJncyIsIl8iLCJpc0FycmF5IiwicHVzaCIsInV0aWwiLCJoYXNWYWx1ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFHQSxNQUFNQSxtQkFBbUIsR0FBRyxFQUE1Qjs7QUFRQUEsbUJBQW1CLENBQUNDLEdBQXBCLEdBQTBCLGVBQWVBLEdBQWYsQ0FBb0JDLENBQXBCLEVBQXVCQyxDQUF2QixFQUEwQjtBQUNsREMsa0JBQUlDLEtBQUosQ0FBVyxzQkFBcUJILENBQUUsS0FBSUMsQ0FBRSxvQkFBbUIsS0FBS0csSUFBSyxHQUFyRTs7QUFDQSxRQUFNLEtBQUtDLElBQUwsQ0FBVSxDQUFDLElBQUQsRUFBTyxLQUFQLEVBQWNMLENBQWQsRUFBaUJDLENBQWpCLENBQVYsQ0FBTjtBQUNELENBSEQ7O0FBVUFILG1CQUFtQixDQUFDUSxXQUFwQixHQUFrQyxlQUFlQSxXQUFmLENBQTRCQyxJQUE1QixFQUFrQztBQUNsRUwsa0JBQUlDLEtBQUosQ0FBVywrQkFBOEJJLElBQUssb0JBQW1CLEtBQUtILElBQUssR0FBM0U7O0FBQ0EsUUFBTSxLQUFLQyxJQUFMLENBQVUsQ0FBQyxJQUFELEVBQU8sUUFBUCxFQUFpQkUsSUFBakIsQ0FBVixDQUFOO0FBQ0QsQ0FIRDs7QUFVQVQsbUJBQW1CLENBQUNVLFFBQXBCLEdBQStCLGVBQWVBLFFBQWYsQ0FBeUJDLElBQXpCLEVBQStCO0FBQzVEUCxrQkFBSUMsS0FBSixDQUFXLFdBQVVNLElBQUssb0JBQW1CLEtBQUtMLElBQUssR0FBdkQ7O0FBQ0EsUUFBTSxLQUFLQyxJQUFMLENBQVUsQ0FBQyxJQUFELEVBQU8sTUFBUCxFQUFlSSxJQUFmLENBQVYsQ0FBTjtBQUNELENBSEQ7O0FBbUJBWCxtQkFBbUIsQ0FBQ1ksWUFBcEIsR0FBbUMsZUFBZUEsWUFBZixDQUE2QkMsS0FBN0IsRUFBb0NDLElBQUksR0FBRyxFQUEzQyxFQUErQztBQUNoRixRQUFNO0FBQ0pDLElBQUFBO0FBREksTUFFRkQsSUFGSjs7QUFHQVYsa0JBQUlDLEtBQUosQ0FBVywwQkFBeUJXLElBQUksQ0FBQ0MsU0FBTCxDQUFlSixLQUFmLENBQXNCLFNBQWhELEdBQ1Asa0JBQWlCLEtBQUtQLElBQUssR0FEOUI7O0FBRUEsUUFBTVksSUFBSSxHQUFHLENBQUMsSUFBRCxFQUFPQyxnQkFBRUMsT0FBRixDQUFVUCxLQUFWLElBQW1CLGNBQW5CLEdBQW9DLEtBQTNDLENBQWI7O0FBQ0EsTUFBSU0sZ0JBQUVDLE9BQUYsQ0FBVVAsS0FBVixDQUFKLEVBQXNCO0FBQ3BCSyxJQUFBQSxJQUFJLENBQUNHLElBQUwsQ0FBVSxHQUFHUixLQUFiO0FBQ0QsR0FGRCxNQUVPO0FBQ0xLLElBQUFBLElBQUksQ0FBQ0csSUFBTCxDQUFVUixLQUFWOztBQUNBLFFBQUlTLG9CQUFLQyxRQUFMLENBQWNSLFFBQWQsQ0FBSixFQUE2QjtBQUMzQkcsTUFBQUEsSUFBSSxDQUFDRyxJQUFMLENBQVUsWUFBVixFQUF3Qk4sUUFBeEI7QUFDRDtBQUNGOztBQUNELFFBQU0sS0FBS1IsSUFBTCxDQUFVVyxJQUFWLENBQU47QUFDRCxDQWhCRDs7ZUFrQmVsQixtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyLmpzJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyB1dGlsIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuXG5cbmNvbnN0IGludGVyYWN0aW9uQ29tbWFuZHMgPSB7fTtcblxuLyoqXG4gKiBUYXBzIGF0IGdpdmVuIGNvb3JkaW5hdGVzXG4gKlxuICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSB4IFRhcCBYIGNvb3JkaW5hdGVcbiAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30geSBUYXAgWSBjb29yZGluYXRlXG4gKi9cbmludGVyYWN0aW9uQ29tbWFuZHMudGFwID0gYXN5bmMgZnVuY3Rpb24gdGFwICh4LCB5KSB7XG4gIGxvZy5kZWJ1ZyhgUGVyZm9ybWluZyB0YXAgYXQgKCR7eH0sICR7eX0pIG9uIHRoZSBkZXZpY2UgJyR7dGhpcy51ZGlkfSdgKTtcbiAgYXdhaXQgdGhpcy5leGVjKFsndWknLCAndGFwJywgeCwgeV0pO1xufTtcblxuLyoqXG4gKiBQcmVzc2VzIGEgaGFyZHdhcmUgYnV0dG9uIG9uIGRldmljZSB1bmRlciB0ZXN0XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgT25lIG9mIHtBUFBMRV9QQVksSE9NRSxMT0NLLFNJREVfQlVUVE9OLFNJUkl9XG4gKi9cbmludGVyYWN0aW9uQ29tbWFuZHMucHJlc3NCdXR0b24gPSBhc3luYyBmdW5jdGlvbiBwcmVzc0J1dHRvbiAobmFtZSkge1xuICBsb2cuZGVidWcoYFBlcmZvcm1pbmcgYnV0dG9uIHByZXNzIG9mICcke25hbWV9JyBvbiB0aGUgZGV2aWNlICcke3RoaXMudWRpZH0nYCk7XG4gIGF3YWl0IHRoaXMuZXhlYyhbJ3VpJywgJ2J1dHRvbicsIG5hbWVdKTtcbn07XG5cbi8qKlxuICogVHlwZXMgdGhlIGdpdmVuIHRleHQgb24gdGhlIGRldmljZSB1bmRlciB0ZXN0XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQgVGhlIHRleHQgdG8gdHlwZVxuICovXG5pbnRlcmFjdGlvbkNvbW1hbmRzLnR5cGVUZXh0ID0gYXN5bmMgZnVuY3Rpb24gdHlwZVRleHQgKHRleHQpIHtcbiAgbG9nLmRlYnVnKGBUeXBpbmcgJyR7dGV4dH0nIG9uIHRoZSBkZXZpY2UgJyR7dGhpcy51ZGlkfSdgKTtcbiAgYXdhaXQgdGhpcy5leGVjKFsndWknLCAndGV4dCcsIHRleHRdKTtcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gS2V5Y29kZU9wdHNcbiAqXG4gKiBAcHJvcGVydHkge251bWJlcnxzdHJpbmd9IGR1cmF0aW9uIC0gVGhlIGtleSBwcmVzcyBkdXJhdGlvbiBpbiBmbG9hdCBzZWNvbmRzLlxuICogVGhlIG9wdGlvbiBpcyBpZ25vcmVkIGlmIG11bHRpcGxlIGtleSBjb2RlcyBhcmUgc2V0LlxuICovXG5cbi8qKlxuICogU2VuZCBhIGtleWNvZGUgb3Iga2V5IGNvZGVzIHNlcXVlbmNlIHRvIHRoZSBkZXZpY2UgdW5kZXIgdGVzdFxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ3xBcnJheTxzdHJpbmc+fEFycmF5PG51bWJlcj59IGNvZGVzIFNpbmdsZSBrZXkgY29kZVxuICogb3IgYXJyYXkgb2YgY29kZXNcbiAqIEBwYXJhbSB7S2V5Y29kZU9wdHN9IG9wdHNcbiAqL1xuaW50ZXJhY3Rpb25Db21tYW5kcy5wcmVzc0tleWNvZGUgPSBhc3luYyBmdW5jdGlvbiBwcmVzc0tleWNvZGUgKGNvZGVzLCBvcHRzID0ge30pIHtcbiAgY29uc3Qge1xuICAgIGR1cmF0aW9uLFxuICB9ID0gb3B0cztcbiAgbG9nLmRlYnVnKGBQZXJmb3JtaW5nIGtleSBjb2RlKHMpICR7SlNPTi5zdHJpbmdpZnkoY29kZXMpfSBwcmVzcyBgICtcbiAgICBgb24gdGhlIGRldmljZSAnJHt0aGlzLnVkaWR9J2ApO1xuICBjb25zdCBhcmdzID0gWyd1aScsIF8uaXNBcnJheShjb2RlcykgPyAna2V5LXNlcXVlbmNlJyA6ICdrZXknXTtcbiAgaWYgKF8uaXNBcnJheShjb2RlcykpIHtcbiAgICBhcmdzLnB1c2goLi4uY29kZXMpO1xuICB9IGVsc2Uge1xuICAgIGFyZ3MucHVzaChjb2Rlcyk7XG4gICAgaWYgKHV0aWwuaGFzVmFsdWUoZHVyYXRpb24pKSB7XG4gICAgICBhcmdzLnB1c2goJy0tZHVyYXRpb24nLCBkdXJhdGlvbik7XG4gICAgfVxuICB9XG4gIGF3YWl0IHRoaXMuZXhlYyhhcmdzKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGludGVyYWN0aW9uQ29tbWFuZHM7XG4iXSwiZmlsZSI6ImxpYi90b29scy9pbnRlcmFjdGlvbi1jb21tYW5kcy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
