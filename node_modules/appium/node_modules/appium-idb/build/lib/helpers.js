"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPids = getPids;
exports.fixOutputToArray = fixOutputToArray;
exports.fixOutputToObject = fixOutputToObject;
exports.DEFAULT_COMPANION_GRPC_PORT = exports.DEFAULT_COMPANION_PORT = exports.DEFAULT_IDB_PORT = exports.IDB_COMPANION_EXECUTABLE = exports.IDB_EXECUTABLE = exports.DEFAULT_IDB_EXEC_TIMEOUT = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _teen_process = require("teen_process");

const DEFAULT_IDB_EXEC_TIMEOUT = 20000;
exports.DEFAULT_IDB_EXEC_TIMEOUT = DEFAULT_IDB_EXEC_TIMEOUT;
const DEFAULT_IDB_PORT = 9889;
exports.DEFAULT_IDB_PORT = DEFAULT_IDB_PORT;
const IDB_EXECUTABLE = 'idb';
exports.IDB_EXECUTABLE = IDB_EXECUTABLE;
const IDB_COMPANION_EXECUTABLE = 'idb_companion';
exports.IDB_COMPANION_EXECUTABLE = IDB_COMPANION_EXECUTABLE;
const DEFAULT_COMPANION_PORT = 10880;
exports.DEFAULT_COMPANION_PORT = DEFAULT_COMPANION_PORT;
const DEFAULT_COMPANION_GRPC_PORT = 10882;
exports.DEFAULT_COMPANION_GRPC_PORT = DEFAULT_COMPANION_GRPC_PORT;

async function getPids(pattern, opts = {}) {
  const {
    multi = true,
    ignoreCase = true
  } = opts;
  const args = [`-${ignoreCase ? 'i' : ''}f${multi ? '' : 'n'}`, pattern];

  try {
    const {
      stdout
    } = await (0, _teen_process.exec)('pgrep', args);
    const result = stdout.split('\n').filter(Number).map(x => `${x}`);
    return multi ? result : _lodash.default.isEmpty(result) ? [] : _lodash.default.first(result);
  } catch (err) {
    return [];
  }
}

function fixOutputToArray(output) {
  if (!_lodash.default.trim(output)) {
    return [];
  }

  return output.split('\n').reduce((acc, x) => {
    try {
      return [...acc, JSON.parse(x)];
    } catch (e) {
      return acc;
    }
  }, []);
}

function fixOutputToObject(output) {
  if (!_lodash.default.trim(output)) {
    return {};
  }

  const result = {};
  const lines = output.split('\n');

  const getLeftIndent = line => line.length - _lodash.default.trimStart(line).length;

  let lineIdx = 0;

  do {
    if (!_lodash.default.trim(lines[lineIdx])) {
      lineIdx++;
      continue;
    }

    const objectMatch = /(\S+)\s+{/.exec(lines[lineIdx]);

    if (objectMatch) {
      const currentIndent = getLeftIndent(lines[lineIdx]);
      const startLine = lineIdx;

      do {
        lineIdx++;
      } while (lineIdx < lines.length && currentIndent < getLeftIndent(lines[lineIdx]));

      const objectName = objectMatch[1];
      const objectContent = lines.slice(startLine + 1, lineIdx).join('\n');
      result[objectName] = fixOutputToObject(objectContent);
    }

    const propertyMatch = /(\S+):\s+([^\n]+)/.exec(lines[lineIdx]);

    if (propertyMatch) {
      const propertyName = propertyMatch[1];
      const propertyValue = propertyMatch[2].trim();
      result[propertyName] = propertyValue.startsWith('"') ? _lodash.default.trim(propertyValue, '"') : Number(propertyValue);
    }

    lineIdx++;
  } while (lineIdx < lines.length);

  return result;
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9oZWxwZXJzLmpzIl0sIm5hbWVzIjpbIkRFRkFVTFRfSURCX0VYRUNfVElNRU9VVCIsIkRFRkFVTFRfSURCX1BPUlQiLCJJREJfRVhFQ1VUQUJMRSIsIklEQl9DT01QQU5JT05fRVhFQ1VUQUJMRSIsIkRFRkFVTFRfQ09NUEFOSU9OX1BPUlQiLCJERUZBVUxUX0NPTVBBTklPTl9HUlBDX1BPUlQiLCJnZXRQaWRzIiwicGF0dGVybiIsIm9wdHMiLCJtdWx0aSIsImlnbm9yZUNhc2UiLCJhcmdzIiwic3Rkb3V0IiwicmVzdWx0Iiwic3BsaXQiLCJmaWx0ZXIiLCJOdW1iZXIiLCJtYXAiLCJ4IiwiXyIsImlzRW1wdHkiLCJmaXJzdCIsImVyciIsImZpeE91dHB1dFRvQXJyYXkiLCJvdXRwdXQiLCJ0cmltIiwicmVkdWNlIiwiYWNjIiwiSlNPTiIsInBhcnNlIiwiZSIsImZpeE91dHB1dFRvT2JqZWN0IiwibGluZXMiLCJnZXRMZWZ0SW5kZW50IiwibGluZSIsImxlbmd0aCIsInRyaW1TdGFydCIsImxpbmVJZHgiLCJvYmplY3RNYXRjaCIsImV4ZWMiLCJjdXJyZW50SW5kZW50Iiwic3RhcnRMaW5lIiwib2JqZWN0TmFtZSIsIm9iamVjdENvbnRlbnQiLCJzbGljZSIsImpvaW4iLCJwcm9wZXJ0eU1hdGNoIiwicHJvcGVydHlOYW1lIiwicHJvcGVydHlWYWx1ZSIsInN0YXJ0c1dpdGgiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUEsTUFBTUEsd0JBQXdCLEdBQUcsS0FBakM7O0FBQ0EsTUFBTUMsZ0JBQWdCLEdBQUcsSUFBekI7O0FBQ0EsTUFBTUMsY0FBYyxHQUFHLEtBQXZCOztBQUNBLE1BQU1DLHdCQUF3QixHQUFHLGVBQWpDOztBQUNBLE1BQU1DLHNCQUFzQixHQUFHLEtBQS9COztBQUNBLE1BQU1DLDJCQUEyQixHQUFHLEtBQXBDOzs7QUFxQkEsZUFBZUMsT0FBZixDQUF3QkMsT0FBeEIsRUFBaUNDLElBQUksR0FB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QUFDNkIsVUFBRCxDQUFOLEdBQXFCWCxpQkFBaUIsQ0FBQ1ksYUFBRCxDQUF0QztBQUNEOztBQUVELFVBQU1HLGFBQWEsR0FBRyxvQkFBb0JQLElBQXBCLENBQXlCUCxLQUFLLENBQUNLLE9BQUQsQ0FBOUIsQ0FBdEI7O0FBQ0EsUUFBSVMsYUFBSixFQUFtQjtBQUNqQixZQUFNQyxZQUFZLEdBQUdELGFBQWEsQ0FBQyxDQUFELENBQWxDO0FBQ0EsWUFBTUUsYUFBYSxHQUFHRixhQUFhLENBQUMsQ0FBRCxDQUFiLENBQWlCckIsSUFBakIsRUFBdEI7QUFDQVosTUFBQUEsTUFBTSxDQUFDa0MsWUFBRCxDQUFOLEdBQXVCQyxhQUFhLENBQUNDLFVBQWQsQ0FBeUIsR0FBekIsSUFDbkI5QixnQkFBRU0sSUFBRixDQUFPdUIsYUFBUCxFQUFzQixHQUF0QixDQURtQixHQUVuQmhDLE1BQU0sQ0FBQ2dDLGFBQUQsQ0FGVjtBQUdEOztBQUVEWCxJQUFBQSxPQUFPO0FBQ1IsR0E1QkQsUUE0QlNBLE9BQU8sR0FBR0wsS0FBSyxDQUFDRyxNQTVCekI7O0FBNkJBLFNBQU90QixNQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgZXhlYyB9IGZyb20gJ3RlZW5fcHJvY2Vzcyc7XG5cbmNvbnN0IERFRkFVTFRfSURCX0VYRUNfVElNRU9VVCA9IDIwMDAwOyAvLyBpbiBtaWxsaXNlY29uZHNcbmNvbnN0IERFRkFVTFRfSURCX1BPUlQgPSA5ODg5O1xuY29uc3QgSURCX0VYRUNVVEFCTEUgPSAnaWRiJztcbmNvbnN0IElEQl9DT01QQU5JT05fRVhFQ1VUQUJMRSA9ICdpZGJfY29tcGFuaW9uJztcbmNvbnN0IERFRkFVTFRfQ09NUEFOSU9OX1BPUlQgPSAxMDg4MDtcbmNvbnN0IERFRkFVTFRfQ09NUEFOSU9OX0dSUENfUE9SVCA9IDEwODgyO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFBpZExvb2t1cE9wdGlvbnNcbiAqXG4gKiBAcHJvcGVydHkgez9ib29sZWFufSBtdWx0aSBbdHJ1ZV0gLSBTZXQgaXQgdG8gdHJ1ZSBpZiBtdWx0aXBsZSBtYXRjaGluZ1xuICogcGlkcyBhcmUgZXhwZWN0ZWQgdG8gYmUgZm91bmQuIE9ubHkgdGhlIG5ld2VzdCBwcm9jZXNzIGlkIGlzIGdvaW5nIHRvXG4gKiBiZSByZXR1cm5lZCBpbnN0ZWFkXG4gKiBAcHJvcGVydHkgez9ib29sZWFufSBpZ25vcmVDYXNlIFt0cnVlXSAtIFNldCBpdCB0byBmYWxzZSB0byBtYWtlIHRoZSBzZWFyY2hcbiAqIGNhc2Utc2Vuc2l0aXZlXG4gKi9cblxuLyoqXG4gKiBHZXQgdGhlIHByb2Nlc3MgaWQgb2YgdGhlIG1vc3QgcmVjZW50IHJ1bm5pbmcgYXBwbGljYXRpb25cbiAqIGhhdmluZyB0aGUgcGFydGljdWxhciBjb21tYW5kIGxpbmUgcGF0dGVybi5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0dGVybiAtIHBncmVwLWNvbXBhdGlibGUgc2VhcmNoIHBhdHRlcm4uXG4gKiBAcGFyYW0gez9QaWRMb29rdXBPcHRpb25zfSBvcHRzXG4gKiBAcmV0dXJuIHtBcnJheTxzdHJpbmc+fSBBbiBhcnJheSBvZiBwcm9jZXNzIGlkcyBhcyBzdHJpbmdzXG4gKiBvciBhbiBlbXB0eSBhcnJheVxuICovXG5hc3luYyBmdW5jdGlvbiBnZXRQaWRzIChwYXR0ZXJuLCBvcHRzID0ge30pIHtcbiAgY29uc3Qge1xuICAgIG11bHRpID0gdHJ1ZSxcbiAgICBpZ25vcmVDYXNlID0gdHJ1ZSxcbiAgfSA9IG9wdHM7XG4gIGNvbnN0IGFyZ3MgPSBbYC0ke2lnbm9yZUNhc2UgPyAnaScgOiAnJ31mJHttdWx0aSA/ICcnIDogJ24nfWAsIHBhdHRlcm5dO1xuICB0cnkge1xuICAgIGNvbnN0IHtzdGRvdXR9ID0gYXdhaXQgZXhlYygncGdyZXAnLCBhcmdzKTtcbiAgICBjb25zdCByZXN1bHQgPSBzdGRvdXQuc3BsaXQoJ1xcbicpXG4gICAgICAuZmlsdGVyKE51bWJlcilcbiAgICAgIC5tYXAoKHgpID0+IGAke3h9YCk7XG4gICAgcmV0dXJuIG11bHRpID8gcmVzdWx0IDogKF8uaXNFbXB0eShyZXN1bHQpID8gW10gOiBfLmZpcnN0KHJlc3VsdCkpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbn1cblxuLyoqXG4gKiBTb21lIGlkYiBjb21tYW5kcyBkb24ndCBwcm9wZXJseSBmb3JtYXQgdGhlaXJcbiAqIG91dHB1dCBpZiBgLS1qc29uYCBhcmd1bWVudCBpcyBwcm92aWRlZC4gVGhpcyBoZWxwZXJcbiAqIGZpeGVzIHRoZSBvcmlnaW5hbCBvdXRwdXQsIHNvIGl0IGNhbiBiZSByZXByZXNlbnRlZCBhc1xuICogYSB2YWxpZCBhcnJheS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gb3V0cHV0IFRoZSBvcmlnaW5hbCBjb21tYW5kIG91dHB1dFxuICogQHJldHVybnMge0FycmF5PG9iamVjdD59IEFycmF5IG9mIG9iamVjdHMgb3IgYW4gZW1wdHkgYXJyYXlcbiAqL1xuZnVuY3Rpb24gZml4T3V0cHV0VG9BcnJheSAob3V0cHV0KSB7XG4gIGlmICghXy50cmltKG91dHB1dCkpIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICByZXR1cm4gb3V0cHV0LnNwbGl0KCdcXG4nKVxuICAgIC5yZWR1Y2UoKGFjYywgeCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIFsuLi5hY2MsIEpTT04ucGFyc2UoeCldO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfVxuICAgIH0sIFtdKTtcbn1cblxuLyoqXG4gKiBTb21lIGlkYiBjb21tYW5kcyBkb24ndCBwcm9wZXJseSBmb3JtYXQgdGhlaXJcbiAqIG91dHB1dCBpZiBgLS1qc29uYCBhcmd1bWVudCBpcyBwcm92aWRlZC4gVGhpcyBoZWxwZXJcbiAqIGZpeGVzIHRoZSBvcmlnaW5hbCBvdXRwdXQsIHNvIGl0IGNhbiBiZSByZXByZXNlbnRlZCBhc1xuICogYSB2YWxpZCBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG91dHB1dCBUaGUgb3JpZ2luYWwgY29tbWFuZCBvdXRwdXRcbiAqIEByZXR1cm5zIHtvYmplY3R9IFRoZSBwYXJzZWQgb2JqZWN0IG9yIGFuIGVtcHR5IG9iamVjdFxuICovXG5mdW5jdGlvbiBmaXhPdXRwdXRUb09iamVjdCAob3V0cHV0KSB7XG4gIGlmICghXy50cmltKG91dHB1dCkpIHtcbiAgICByZXR1cm4ge307XG4gIH1cblxuICBjb25zdCByZXN1bHQgPSB7fTtcbiAgY29uc3QgbGluZXMgPSBvdXRwdXQuc3BsaXQoJ1xcbicpO1xuICBjb25zdCBnZXRMZWZ0SW5kZW50ID0gKGxpbmUpID0+IGxpbmUubGVuZ3RoIC0gXy50cmltU3RhcnQobGluZSkubGVuZ3RoO1xuICBsZXQgbGluZUlkeCA9IDA7XG4gIGRvIHtcbiAgICBpZiAoIV8udHJpbShsaW5lc1tsaW5lSWR4XSkpIHtcbiAgICAgIGxpbmVJZHgrKztcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGNvbnN0IG9iamVjdE1hdGNoID0gLyhcXFMrKVxccyt7Ly5leGVjKGxpbmVzW2xpbmVJZHhdKTtcbiAgICBpZiAob2JqZWN0TWF0Y2gpIHtcbiAgICAgIGNvbnN0IGN1cnJlbnRJbmRlbnQgPSBnZXRMZWZ0SW5kZW50KGxpbmVzW2xpbmVJZHhdKTtcbiAgICAgIGNvbnN0IHN0YXJ0TGluZSA9IGxpbmVJZHg7XG4gICAgICBkbyB7XG4gICAgICAgIGxpbmVJZHgrKztcbiAgICAgIH0gd2hpbGUgKGxpbmVJZHggPCBsaW5lcy5sZW5ndGggJiYgY3VycmVudEluZGVudCA8IGdldExlZnRJbmRlbnQobGluZXNbbGluZUlkeF0pKTtcbiAgICAgIGNvbnN0IG9iamVjdE5hbWUgPSBvYmplY3RNYXRjaFsxXTtcbiAgICAgIGNvbnN0IG9iamVjdENvbnRlbnQgPSBsaW5lcy5zbGljZShzdGFydExpbmUgKyAxLCBsaW5lSWR4KS5qb2luKCdcXG4nKTtcbiAgICAgIHJlc3VsdFtvYmplY3ROYW1lXSA9IGZpeE91dHB1dFRvT2JqZWN0KG9iamVjdENvbnRlbnQpO1xuICAgIH1cblxuICAgIGNvbnN0IHByb3BlcnR5TWF0Y2ggPSAvKFxcUyspOlxccysoW15cXG5dKykvLmV4ZWMobGluZXNbbGluZUlkeF0pO1xuICAgIGlmIChwcm9wZXJ0eU1hdGNoKSB7XG4gICAgICBjb25zdCBwcm9wZXJ0eU5hbWUgPSBwcm9wZXJ0eU1hdGNoWzFdO1xuICAgICAgY29uc3QgcHJvcGVydHlWYWx1ZSA9IHByb3BlcnR5TWF0Y2hbMl0udHJpbSgpO1xuICAgICAgcmVzdWx0W3Byb3BlcnR5TmFtZV0gPSBwcm9wZXJ0eVZhbHVlLnN0YXJ0c1dpdGgoJ1wiJylcbiAgICAgICAgPyBfLnRyaW0ocHJvcGVydHlWYWx1ZSwgJ1wiJylcbiAgICAgICAgOiBOdW1iZXIocHJvcGVydHlWYWx1ZSk7XG4gICAgfVxuXG4gICAgbGluZUlkeCsrO1xuICB9IHdoaWxlIChsaW5lSWR4IDwgbGluZXMubGVuZ3RoKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IHtcbiAgREVGQVVMVF9JREJfRVhFQ19USU1FT1VULCBnZXRQaWRzLCBJREJfRVhFQ1VUQUJMRSxcbiAgSURCX0NPTVBBTklPTl9FWEVDVVRBQkxFLCBERUZBVUxUX0lEQl9QT1JULFxuICBERUZBVUxUX0NPTVBBTklPTl9QT1JULCBERUZBVUxUX0NPTVBBTklPTl9HUlBDX1BPUlQsXG4gIGZpeE91dHB1dFRvQXJyYXksIGZpeE91dHB1dFRvT2JqZWN0LFxufTtcbiJdLCJmaWxlIjoibGliL2hlbHBlcnMuanMiLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
