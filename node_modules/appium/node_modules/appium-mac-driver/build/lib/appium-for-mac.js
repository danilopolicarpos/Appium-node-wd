"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.DEFAULT_A4M_PORT = exports.DEFAULT_A4M_HOST = exports.AppiumForMac = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _appiumBaseDriver = require("appium-base-driver");

var _logger = _interopRequireDefault(require("./logger"));

var _teen_process = require("teen_process");

var _appiumSupport = require("appium-support");

var _path = _interopRequireDefault(require("path"));

const DEFAULT_A4M_HOST = '127.0.0.1';
exports.DEFAULT_A4M_HOST = DEFAULT_A4M_HOST;
const DEFAULT_A4M_PORT = 4622;
exports.DEFAULT_A4M_PORT = DEFAULT_A4M_PORT;

const REQ_A4M_APP_PATH = _path.default.resolve('/Applications', 'AppiumForMac.app');

const a4mLog = _appiumSupport.logger.getLogger('Appium4Mac');

class AppiumForMac {
  constructor() {
    this.proxyHost = DEFAULT_A4M_HOST;
    this.proxyPort = DEFAULT_A4M_PORT;
    this.proc = null;
    this.jwproxy = new _appiumBaseDriver.JWProxy({
      server: this.proxyHost,
      port: this.proxyPort
    });
  }

  start() {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      if (!(yield _appiumSupport.fs.exists(REQ_A4M_APP_PATH))) {
        throw new Error("Could not verify AppiumForMacDriver install; please install to your /Applications folder");
      }

      const startDetector = (stdout, stderr) => {
        return stderr.indexOf("Started HTTP server") !== -1;
      };

      let processIsAlive = false;

      try {
        yield _this.killAll();

        const a4mBinary = _path.default.resolve(REQ_A4M_APP_PATH, "Contents", "MacOS", "AppiumForMac");

        _this.proc = new _teen_process.SubProcess(a4mBinary, []);
        processIsAlive = true;
        var _arr = ['STDOUT', 'STDERR'];

        for (var _i = 0; _i < _arr.length; _i++) {
          let stream = _arr[_i];

          _this.proc.on(`lines-${stream.toLowerCase()}`, lines => {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (var _iterator = lines[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                let l = _step.value;
                a4mLog.info(`[${stream}] ${l.trim()}`);
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                  _iterator.return();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }
          });
        }

        _this.proc.on('exit', (code, signal) => {
          processIsAlive = false;
          let msg = `AppiumForMac exited unexpectedly with code ${code}, ` + `signal ${signal}`;

          _logger.default.error(msg);
        });

        _logger.default.info(`Spawning AppiumForMac with: ${_this.appium4macdriver}`);

        yield _this.proc.start(startDetector);
        yield _this.waitForOnline();
      } catch (e) {
        _this.emit(AppiumForMac.EVENT_ERROR, e);

        if (processIsAlive) {
          yield _this.proc.stop();
        }

        _logger.default.errorAndThrow(e);
      }
    })();
  }

  sessionId() {
    if (this.state !== AppiumForMac.STATE_ONLINE) {
      return null;
    }

    return this.jwproxy.sessionId;
  }

  waitForOnline() {
    return (0, _asyncToGenerator2.default)(function* () {
      return true;
    })();
  }

  getStatus() {
    var _this2 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      return yield _this2.sendCommand('/status', 'GET');
    })();
  }

  startSession(caps) {
    var _this3 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _this3.proxyReqRes = _this3.jwproxy.proxyReqRes.bind(_this3.jwproxy);
      yield _this3.sendCommand('/session', 'POST', {
        desiredCapabilities: caps
      });
    })();
  }

  stop() {
    var _this4 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      try {
        if (_this4.proc) {
          yield _this4.proc.stop();
        }
      } catch (e) {
        _logger.default.error(e);
      }
    })();
  }

  sendCommand(url, method, body) {
    var _this5 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      let res;

      try {
        res = yield _this5.jwproxy.command(url, method, body);
      } catch (e) {
        if (e.message.indexOf("Did not get a valid response object") === -1 || e.message.indexOf("value") !== -1) {
          throw e;
        }
      }

      return res;
    })();
  }

  proxyReq(req, res) {
    var _this6 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      return yield _this6.jwproxy.proxyReqRes(req, res);
    })();
  }

  killAll() {
    return (0, _asyncToGenerator2.default)(function* () {
      const processName = "AppiumForMac";

      _logger.default.info(`Killing any old AppiumForMac`);

      yield _appiumSupport.process.killProcess(processName);

      _logger.default.info("Successfully cleaned up old Appium4Mac servers");
    })();
  }

  deleteSession() {
    var _this7 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.debug('Deleting AppiumForMac server session');

      try {
        yield _this7.sendCommand('/', 'DELETE');
      } catch (err) {
        _logger.default.warn(`Did not get confirmation AppiumForMac deleteSession worked; ` + `Error was: ${err}`);
      }
    })();
  }

}

exports.AppiumForMac = AppiumForMac;
var _default = AppiumForMac;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
