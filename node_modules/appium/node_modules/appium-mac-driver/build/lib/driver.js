"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.MacDriver = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _appiumBaseDriver = require("appium-base-driver");

var _appiumSupport = require("appium-support");

var _appiumForMac = require("./appium-for-mac");

var _logger = _interopRequireDefault(require("./logger"));

class MacDriver extends _appiumBaseDriver.BaseDriver {
  constructor(opts = {}, shouldValidateCaps = true) {
    super(opts, shouldValidateCaps);
    this.jwpProxyActive = false;
    this.opts.address = opts.address || _appiumForMac.DEFAULT_A4M_HOST;
  }

  createSession(...args) {
    var _this = this,
        _superprop_callCreateSession = (..._args) => super.createSession(..._args);

    return (0, _asyncToGenerator2.default)(function* () {
      if (!_appiumSupport.system.isMac()) {
        throw new Error("AppiumForMac tests only run on the Mac");
      }

      try {
        let _ref = yield _superprop_callCreateSession(...args),
            _ref2 = (0, _slicedToArray2.default)(_ref, 2),
            sessionId = _ref2[0],
            caps = _ref2[1];

        yield _this.startAppiumForMacSession();

        if (caps.app) {
          _logger.default.info(`Automatically navigating to app '${caps.app}'`);

          yield _this.a4mDriver.sendCommand('/url', 'POST', {
            url: caps.app
          });
        }

        return [sessionId, caps];
      } catch (e) {
        yield _this.deleteSession();
        throw e;
      }
    })();
  }

  startAppiumForMacSession() {
    var _this2 = this;

    return (0, _asyncToGenerator2.default)(function* () {
      _this2.a4mDriver = new _appiumForMac.AppiumForMac();
      yield _this2.a4mDriver.start();
      yield _this2.a4mDriver.startSession(_this2.caps);
      _this2.proxyReqRes = _this2.a4mDriver.proxyReqRes.bind(_this2.a4mDriver);
      _this2.jwpProxyActive = true;
    })();
  }

  deleteSession() {
    var _this3 = this,
        _superprop_callDeleteSession = (..._args2) => super.deleteSession(..._args2);

    return (0, _asyncToGenerator2.default)(function* () {
      _logger.default.debug('Deleting AppiumForMac session');

      if (_this3.a4mDriver && _this3.jwpProxyActive) {
        yield _this3.a4mDriver.deleteSession();
        yield _this3.a4mDriver.stop();
        _this3.a4mDriver = null;
      }

      _this3.jwpProxyActive = false;
      yield _superprop_callDeleteSession();
    })();
  }

  proxyActive() {
    return true;
  }

  canProxy() {
    return true;
  }

  get driverData() {
    return {
      A4MPort: this.opts.port
    };
  }

}

exports.MacDriver = MacDriver;
var _default = MacDriver;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9kcml2ZXIuanMiXSwibmFtZXMiOlsiTWFjRHJpdmVyIiwiQmFzZURyaXZlciIsImNvbnN0cnVjdG9yIiwib3B0cyIsInNob3VsZFZhbGlkYXRlQ2FwcyIsImp3cFByb3h5QWN0aXZlIiwiYWRkcmVzcyIsIkRFRkFVTFRfQTRNX0hPU1QiLCJjcmVhdGVTZXNzaW9uIiwiYXJncyIsInN5c3RlbSIsImlzTWFjIiwiRXJyb3IiLCJzZXNzaW9uSWQiLCJjYXBzIiwic3RhcnRBcHBpdW1Gb3JNYWNTZXNzaW9uIiwiYXBwIiwibG9nZ2VyIiwiaW5mbyIsImE0bURyaXZlciIsInNlbmRDb21tYW5kIiwidXJsIiwiZSIsImRlbGV0ZVNlc3Npb24iLCJBcHBpdW1Gb3JNYWMiLCJzdGFydCIsInN0YXJ0U2Vzc2lvbiIsInByb3h5UmVxUmVzIiwiYmluZCIsImRlYnVnIiwic3RvcCIsInByb3h5QWN0aXZlIiwiY2FuUHJveHkiLCJkcml2ZXJEYXRhIiwiQTRNUG9ydCIsInBvcnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFHQSxNQUFNQSxTQUFOLFNBQXdCQyw0QkFBeEIsQ0FBbUM7QUFDakNDLEVBQUFBLFdBQVcsQ0FBRUMsSUFBSSxHQUFHLEVBQVQsRUFBYUMsa0JBQWtCLEdBQUcsSUFBbEMsRUFBd0M7QUFDakQsVUFBTUQsSUFBTixFQUFZQyxrQkFBWjtBQUNBLFNBQUtDLGNBQUwsR0FBc0IsS0FBdEI7QUFDQSxTQUFLRixJQUFMLENBQVVHLE9BQVYsR0FBb0JILElBQUksQ0FBQ0csT0FBTCxJQUFnQkMsOEJBQXBDO0FBQ0Q7O0FBRUtDLEVBQUFBLGFBQU4sQ0FBcUIsR0FBR0MsSUFBeEIsRUFBOEI7QUFBQTtBQUFBOztBQUFBO0FBQzVCLFVBQUksQ0FBQ0Msc0JBQU9DLEtBQVAsRUFBTCxFQUFxQjtBQUNuQixjQUFNLElBQUlDLEtBQUosQ0FBVSx3Q0FBVixDQUFOO0FBQ0Q7O0FBQ0QsVUFBSTtBQUFBLHlCQUM0Qiw2QkFBb0IsR0FBR0gsSUFBdkIsQ0FENUI7QUFBQTtBQUFBLFlBQ0dJLFNBREg7QUFBQSxZQUNjQyxJQURkOztBQUVGLGNBQU0sS0FBSSxDQUFDQyx3QkFBTCxFQUFOOztBQUNBLFlBQUlELElBQUksQ0FBQ0UsR0FBVCxFQUFjO0FBQ1pDLDBCQUFPQyxJQUFQLENBQWEsb0NBQW1DSixJQUFJLENBQUNFLEdBQUksR0FBekQ7O0FBQ0EsZ0JBQU0sS0FBSSxDQUFDRyxTQUFMLENBQWVDLFdBQWYsQ0FBMkIsTUFBM0IsRUFBbUMsTUFBbkMsRUFBMkM7QUFBQ0MsWUFBQUEsR0FBRyxFQUFFUCxJQUFJLENBQUNFO0FBQVgsV0FBM0MsQ0FBTjtBQUNEOztBQUNELGVBQU8sQ0FBQ0gsU0FBRCxFQUFZQyxJQUFaLENBQVA7QUFDRCxPQVJELENBUUUsT0FBT1EsQ0FBUCxFQUFVO0FBQ1YsY0FBTSxLQUFJLENBQUNDLGFBQUwsRUFBTjtBQUNBLGNBQU1ELENBQU47QUFDRDtBQWYyQjtBQWdCN0I7O0FBRUtQLEVBQUFBLHdCQUFOLEdBQWtDO0FBQUE7O0FBQUE7QUFDaEMsTUFBQSxNQUFJLENBQUNJLFNBQUwsR0FBaUIsSUFBSUssMEJBQUosRUFBakI7QUFFQSxZQUFNLE1BQUksQ0FBQ0wsU0FBTCxDQUFlTSxLQUFmLEVBQU47QUFDQSxZQUFNLE1BQUksQ0FBQ04sU0FBTCxDQUFlTyxZQUFmLENBQTRCLE1BQUksQ0FBQ1osSUFBakMsQ0FBTjtBQUNBLE1BQUEsTUFBSSxDQUFDYSxXQUFMLEdBQW1CLE1BQUksQ0FBQ1IsU0FBTCxDQUFlUSxXQUFmLENBQTJCQyxJQUEzQixDQUFnQyxNQUFJLENBQUNULFNBQXJDLENBQW5CO0FBR0EsTUFBQSxNQUFJLENBQUNkLGNBQUwsR0FBc0IsSUFBdEI7QUFSZ0M7QUFTakM7O0FBRUtrQixFQUFBQSxhQUFOLEdBQXVCO0FBQUE7QUFBQTs7QUFBQTtBQUNyQk4sc0JBQU9ZLEtBQVAsQ0FBYSwrQkFBYjs7QUFFQSxVQUFJLE1BQUksQ0FBQ1YsU0FBTCxJQUFrQixNQUFJLENBQUNkLGNBQTNCLEVBQTJDO0FBQ3pDLGNBQU0sTUFBSSxDQUFDYyxTQUFMLENBQWVJLGFBQWYsRUFBTjtBQUNBLGNBQU0sTUFBSSxDQUFDSixTQUFMLENBQWVXLElBQWYsRUFBTjtBQUNBLFFBQUEsTUFBSSxDQUFDWCxTQUFMLEdBQWlCLElBQWpCO0FBQ0Q7O0FBQ0QsTUFBQSxNQUFJLENBQUNkLGNBQUwsR0FBc0IsS0FBdEI7QUFDQSxZQUFNLDhCQUFOO0FBVHFCO0FBVXRCOztBQUVEMEIsRUFBQUEsV0FBVyxHQUFJO0FBRWIsV0FBTyxJQUFQO0FBQ0Q7O0FBRURDLEVBQUFBLFFBQVEsR0FBSTtBQUVWLFdBQU8sSUFBUDtBQUNEOztBQUVELE1BQUlDLFVBQUosR0FBa0I7QUFDaEIsV0FBTztBQUFDQyxNQUFBQSxPQUFPLEVBQUUsS0FBSy9CLElBQUwsQ0FBVWdDO0FBQXBCLEtBQVA7QUFDRDs7QUE1RGdDOzs7ZUFnRXBCbkMsUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VEcml2ZXIgfSBmcm9tICdhcHBpdW0tYmFzZS1kcml2ZXInO1xuaW1wb3J0IHsgc3lzdGVtIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuaW1wb3J0IHsgQXBwaXVtRm9yTWFjLCBERUZBVUxUX0E0TV9IT1NUfSBmcm9tICcuL2FwcGl1bS1mb3ItbWFjJztcbmltcG9ydCBsb2dnZXIgZnJvbSAnLi9sb2dnZXInO1xuXG4vLyBBcHBpdW0gaW5zdGFudGlhdGVzIHRoaXMgY2xhc3NcbmNsYXNzIE1hY0RyaXZlciBleHRlbmRzIEJhc2VEcml2ZXIge1xuICBjb25zdHJ1Y3RvciAob3B0cyA9IHt9LCBzaG91bGRWYWxpZGF0ZUNhcHMgPSB0cnVlKSB7XG4gICAgc3VwZXIob3B0cywgc2hvdWxkVmFsaWRhdGVDYXBzKTtcbiAgICB0aGlzLmp3cFByb3h5QWN0aXZlID0gZmFsc2U7XG4gICAgdGhpcy5vcHRzLmFkZHJlc3MgPSBvcHRzLmFkZHJlc3MgfHwgREVGQVVMVF9BNE1fSE9TVDtcbiAgfVxuXG4gIGFzeW5jIGNyZWF0ZVNlc3Npb24gKC4uLmFyZ3MpIHtcbiAgICBpZiAoIXN5c3RlbS5pc01hYygpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBcHBpdW1Gb3JNYWMgdGVzdHMgb25seSBydW4gb24gdGhlIE1hY1wiKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGxldCBbc2Vzc2lvbklkLCBjYXBzXSA9IGF3YWl0IHN1cGVyLmNyZWF0ZVNlc3Npb24oLi4uYXJncyk7XG4gICAgICBhd2FpdCB0aGlzLnN0YXJ0QXBwaXVtRm9yTWFjU2Vzc2lvbigpO1xuICAgICAgaWYgKGNhcHMuYXBwKSB7XG4gICAgICAgIGxvZ2dlci5pbmZvKGBBdXRvbWF0aWNhbGx5IG5hdmlnYXRpbmcgdG8gYXBwICcke2NhcHMuYXBwfSdgKTtcbiAgICAgICAgYXdhaXQgdGhpcy5hNG1Ecml2ZXIuc2VuZENvbW1hbmQoJy91cmwnLCAnUE9TVCcsIHt1cmw6IGNhcHMuYXBwfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gW3Nlc3Npb25JZCwgY2Fwc107XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgYXdhaXQgdGhpcy5kZWxldGVTZXNzaW9uKCk7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHN0YXJ0QXBwaXVtRm9yTWFjU2Vzc2lvbiAoKSB7XG4gICAgdGhpcy5hNG1Ecml2ZXIgPSBuZXcgQXBwaXVtRm9yTWFjKCk7XG5cbiAgICBhd2FpdCB0aGlzLmE0bURyaXZlci5zdGFydCgpO1xuICAgIGF3YWl0IHRoaXMuYTRtRHJpdmVyLnN0YXJ0U2Vzc2lvbih0aGlzLmNhcHMpO1xuICAgIHRoaXMucHJveHlSZXFSZXMgPSB0aGlzLmE0bURyaXZlci5wcm94eVJlcVJlcy5iaW5kKHRoaXMuYTRtRHJpdmVyKTtcbiAgICAvLyBub3cgdGhhdCBldmVyeXRoaW5nIGhhcyBzdGFydGVkIHN1Y2Nlc3NmdWxseSwgdHVybiBvbiBwcm94eWluZyBzbyBhbGxcbiAgICAvLyBzdWJzZXF1ZW50IHNlc3Npb24gcmVxdWVzdHMgZ28gc3RyYWlnaHQgdG8vZnJvbSBBcHBpdW1Gb3JNYWNcbiAgICB0aGlzLmp3cFByb3h5QWN0aXZlID0gdHJ1ZTtcbiAgfVxuXG4gIGFzeW5jIGRlbGV0ZVNlc3Npb24gKCkge1xuICAgIGxvZ2dlci5kZWJ1ZygnRGVsZXRpbmcgQXBwaXVtRm9yTWFjIHNlc3Npb24nKTtcblxuICAgIGlmICh0aGlzLmE0bURyaXZlciAmJiB0aGlzLmp3cFByb3h5QWN0aXZlKSB7XG4gICAgICBhd2FpdCB0aGlzLmE0bURyaXZlci5kZWxldGVTZXNzaW9uKCk7XG4gICAgICBhd2FpdCB0aGlzLmE0bURyaXZlci5zdG9wKCk7XG4gICAgICB0aGlzLmE0bURyaXZlciA9IG51bGw7XG4gICAgfVxuICAgIHRoaXMuandwUHJveHlBY3RpdmUgPSBmYWxzZTtcbiAgICBhd2FpdCBzdXBlci5kZWxldGVTZXNzaW9uKCk7XG4gIH1cblxuICBwcm94eUFjdGl2ZSAoKSB7XG4gICAgLy8gd2UgYWx3YXlzIGhhdmUgYW4gYWN0aXZlIHByb3h5IHRvIHRoZSBBcHBpdW1Gb3JNYWMgc2VydmVyXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBjYW5Qcm94eSAoKSB7XG4gICAgLy8gd2UgY2FuIGFsd2F5cyBwcm94eSB0byB0aGUgQXBwaXVtRm9yTWFjIHNlcnZlclxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZ2V0IGRyaXZlckRhdGEgKCkge1xuICAgIHJldHVybiB7QTRNUG9ydDogdGhpcy5vcHRzLnBvcnR9O1xuICB9XG59XG5cbmV4cG9ydCB7IE1hY0RyaXZlciB9O1xuZXhwb3J0IGRlZmF1bHQgTWFjRHJpdmVyO1xuIl0sImZpbGUiOiJsaWIvZHJpdmVyLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIn0=
