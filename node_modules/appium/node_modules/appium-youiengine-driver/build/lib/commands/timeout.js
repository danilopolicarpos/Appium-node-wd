"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("../logger"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _appiumSupport = require("appium-support");

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

commands.implicitWait = function (ms) {
  this.implicitWaitMs = parseInt(ms, 10);

  _logger.default.debug(`Set implicit wait to ${ms}ms`);
};

commands.timeouts = async function (name, duration) {
  if (name === 'command') {
    this.newCommandTimeoutMs = duration;
  }
};

helpers.clearNewCommandTimeout = function () {
  if (this.noCommandTimer) {
    this.noCommandTimer.cancel();
    this.noCommandTimer = null;
  }
};

helpers.startNewCommandTimeout = function (cmd) {
  this.clearNewCommandTimeout();

  if (!this.newCommandTimeoutMs) {
    return;
  }

  this.noCommandTimer = _appiumSupport.util.cancellableDelay(this.newCommandTimeoutMs);
  this.noCommandTimer.then(async () => {
    _logger.default.warn(`Shutting down because we waited ` + `${this.newCommandTimeoutMs / 1000} seconds for a command`);

    await this.startUnexpectedShutdown(new Error(`Command ${cmd} timed out!`));
  }).catch(_bluebird.default.CancellationError, () => {});
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy90aW1lb3V0LmpzIl0sIm5hbWVzIjpbImNvbW1hbmRzIiwiaGVscGVycyIsImV4dGVuc2lvbnMiLCJpbXBsaWNpdFdhaXQiLCJtcyIsImltcGxpY2l0V2FpdE1zIiwicGFyc2VJbnQiLCJsb2ciLCJkZWJ1ZyIsInRpbWVvdXRzIiwibmFtZSIsImR1cmF0aW9uIiwibmV3Q29tbWFuZFRpbWVvdXRNcyIsImNsZWFyTmV3Q29tbWFuZFRpbWVvdXQiLCJub0NvbW1hbmRUaW1lciIsImNhbmNlbCIsInN0YXJ0TmV3Q29tbWFuZFRpbWVvdXQiLCJjbWQiLCJ1dGlsIiwiY2FuY2VsbGFibGVEZWxheSIsInRoZW4iLCJ3YXJuIiwic3RhcnRVbmV4cGVjdGVkU2h1dGRvd24iLCJFcnJvciIsImNhdGNoIiwiQiIsIkNhbmNlbGxhdGlvbkVycm9yIiwiT2JqZWN0IiwiYXNzaWduIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUdBLElBQUlBLFFBQVEsR0FBRyxFQUFmO0FBQUEsSUFBbUJDLE9BQU8sR0FBRyxFQUE3QjtBQUFBLElBQWlDQyxVQUFVLEdBQUcsRUFBOUM7Ozs7QUFFQUYsUUFBUSxDQUFDRyxZQUFULEdBQXdCLFVBQVVDLEVBQVYsRUFBYztBQUNwQyxPQUFLQyxjQUFMLEdBQXNCQyxRQUFRLENBQUNGLEVBQUQsRUFBSyxFQUFMLENBQTlCOztBQUNBRyxrQkFBSUMsS0FBSixDQUFXLHdCQUF1QkosRUFBRyxJQUFyQztBQUNELENBSEQ7O0FBS0FKLFFBQVEsQ0FBQ1MsUUFBVCxHQUFvQixnQkFBZ0JDLElBQWhCLEVBQXNCQyxRQUF0QixFQUFnQztBQUNsRCxNQUFJRCxJQUFJLEtBQUssU0FBYixFQUF3QjtBQUN0QixTQUFLRSxtQkFBTCxHQUEyQkQsUUFBM0I7QUFDRDtBQUNGLENBSkQ7O0FBTUFWLE9BQU8sQ0FBQ1ksc0JBQVIsR0FBaUMsWUFBWTtBQUMzQyxNQUFJLEtBQUtDLGNBQVQsRUFBeUI7QUFDdkIsU0FBS0EsY0FBTCxDQUFvQkMsTUFBcEI7QUFDQSxTQUFLRCxjQUFMLEdBQXNCLElBQXRCO0FBQ0Q7QUFDRixDQUxEOztBQU9BYixPQUFPLENBQUNlLHNCQUFSLEdBQWlDLFVBQVVDLEdBQVYsRUFBZTtBQUU5QyxPQUFLSixzQkFBTDs7QUFHQSxNQUFJLENBQUMsS0FBS0QsbUJBQVYsRUFBK0I7QUFDN0I7QUFDRDs7QUFFRCxPQUFLRSxjQUFMLEdBQXNCSSxvQkFBS0MsZ0JBQUwsQ0FBc0IsS0FBS1AsbUJBQTNCLENBQXRCO0FBQ0EsT0FBS0UsY0FBTCxDQUNHTSxJQURILENBQ1EsWUFBWTtBQUNoQmIsb0JBQUljLElBQUosQ0FBVSxrQ0FBRCxHQUNDLEdBQUUsS0FBS1QsbUJBQUwsR0FBMkIsSUFBSyx3QkFENUM7O0FBRUEsVUFBTSxLQUFLVSx1QkFBTCxDQUE2QixJQUFJQyxLQUFKLENBQVcsV0FBVU4sR0FBSSxhQUF6QixDQUE3QixDQUFOO0FBQ0QsR0FMSCxFQU1HTyxLQU5ILENBTVNDLGtCQUFFQyxpQkFOWCxFQU04QixNQUFhLENBRXhDLENBUkg7QUFTRCxDQW5CRDs7QUFxQkFDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjMUIsVUFBZCxFQUEwQkYsUUFBMUIsRUFBb0NDLE9BQXBDO2VBRWVDLFUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbG9nIGZyb20gJy4uL2xvZ2dlcic7XG5pbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgeyB1dGlsIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuXG5cbmxldCBjb21tYW5kcyA9IHt9LCBoZWxwZXJzID0ge30sIGV4dGVuc2lvbnMgPSB7fTtcblxuY29tbWFuZHMuaW1wbGljaXRXYWl0ID0gZnVuY3Rpb24gKG1zKSB7XG4gIHRoaXMuaW1wbGljaXRXYWl0TXMgPSBwYXJzZUludChtcywgMTApO1xuICBsb2cuZGVidWcoYFNldCBpbXBsaWNpdCB3YWl0IHRvICR7bXN9bXNgKTtcbn07XG5cbmNvbW1hbmRzLnRpbWVvdXRzID0gYXN5bmMgZnVuY3Rpb24gKG5hbWUsIGR1cmF0aW9uKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1hd2FpdFxuICBpZiAobmFtZSA9PT0gJ2NvbW1hbmQnKSB7XG4gICAgdGhpcy5uZXdDb21tYW5kVGltZW91dE1zID0gZHVyYXRpb247XG4gIH1cbn07XG5cbmhlbHBlcnMuY2xlYXJOZXdDb21tYW5kVGltZW91dCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMubm9Db21tYW5kVGltZXIpIHtcbiAgICB0aGlzLm5vQ29tbWFuZFRpbWVyLmNhbmNlbCgpO1xuICAgIHRoaXMubm9Db21tYW5kVGltZXIgPSBudWxsO1xuICB9XG59O1xuXG5oZWxwZXJzLnN0YXJ0TmV3Q29tbWFuZFRpbWVvdXQgPSBmdW5jdGlvbiAoY21kKSB7XG4gIC8vIG1ha2Ugc3VyZSB0aGVyZSBhcmUgbm8gcm9ndWUgdGltZW91dHNcbiAgdGhpcy5jbGVhck5ld0NvbW1hbmRUaW1lb3V0KCk7XG5cbiAgLy8gaWYgY29tbWFuZCB0aW1lb3V0IGlzIDAsIGl0IGlzIGRpc2FibGVkXG4gIGlmICghdGhpcy5uZXdDb21tYW5kVGltZW91dE1zKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5ub0NvbW1hbmRUaW1lciA9IHV0aWwuY2FuY2VsbGFibGVEZWxheSh0aGlzLm5ld0NvbW1hbmRUaW1lb3V0TXMpO1xuICB0aGlzLm5vQ29tbWFuZFRpbWVyXG4gICAgLnRoZW4oYXN5bmMgKCkgPT4geyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHByb21pc2UvcHJlZmVyLWF3YWl0LXRvLXRoZW5cbiAgICAgIGxvZy53YXJuKGBTaHV0dGluZyBkb3duIGJlY2F1c2Ugd2Ugd2FpdGVkIGAgK1xuICAgICAgICAgICAgICAgYCR7dGhpcy5uZXdDb21tYW5kVGltZW91dE1zIC8gMTAwMH0gc2Vjb25kcyBmb3IgYSBjb21tYW5kYCk7XG4gICAgICBhd2FpdCB0aGlzLnN0YXJ0VW5leHBlY3RlZFNodXRkb3duKG5ldyBFcnJvcihgQ29tbWFuZCAke2NtZH0gdGltZWQgb3V0IWApKTtcbiAgICB9KVxuICAgIC5jYXRjaChCLkNhbmNlbGxhdGlvbkVycm9yLCAoLyplcnIqLykgPT4ge1xuICAgICAgLy8gaWdub3JlXG4gICAgfSk7XG59O1xuXG5PYmplY3QuYXNzaWduKGV4dGVuc2lvbnMsIGNvbW1hbmRzLCBoZWxwZXJzKTtcbmV4cG9ydCB7IGNvbW1hbmRzLCBoZWxwZXJzIH07XG5leHBvcnQgZGVmYXVsdCBleHRlbnNpb25zO1xuIl0sImZpbGUiOiJsaWIvY29tbWFuZHMvdGltZW91dC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
