"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _appiumBaseDriver = require("appium-base-driver");

var _logger = _interopRequireDefault(require("../logger"));

var _utils = require("../utils");

let commands = {};

commands.updateSettings = async function (newSettings) {
  if (!this.settings) {
    _logger.default.errorAndThrow('Cannot update settings; settings object not found');
  }

  return await this.settings.update(newSettings);
};

commands.getSettings = async function () {
  if (!this.settings) {
    _logger.default.errorAndThrow('Cannot get settings; settings object not found');
  }

  return this.settings.getSettings();
};

commands.setTimeDilation = async function (factor) {
  let commandObject = {
    name: `setTimeDilation`,
    args: [`${factor}`]
  };
  let commandJSON = JSON.stringify(commandObject);
  let data = await this.executeSocketCommand(commandJSON);
  let result;

  try {
    result = JSON.parse(data);
  } catch (e) {
    throw new Error('Bad response from setValue');
  }

  if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_UNKNOWN_COMMAND) {
    throw new _appiumBaseDriver.errors.UnknownCommandError('argument must be numeric and larger than zero');
  }

  return result.value;
};

commands.setSourceTreeFilter = async function (filter) {
  let commandObject = {
    name: `setSourceTreeFilter`,
    args: [`${filter}`]
  };
  let commandJSON = JSON.stringify(commandObject);
  let data = await this.executeSocketCommand(commandJSON);
  let result;

  try {
    result = JSON.parse(data);
  } catch (e) {
    throw new Error('Bad response from setValue');
  }

  if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_UNKNOWN_COMMAND) {
    throw new _appiumBaseDriver.errors.UnknownCommandError('argument must be numeric and larger than zero');
  }

  if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_INVALID_SELECTOR) {
    throw new _appiumBaseDriver.errors.InvalidSelectorError("Attribute filter should have following format: [@attributeType='attributeValue'] or '' to reset. ('' is supported in You.i Engine 5.3+)");
  }

  return result.value;
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9zZXR0aW5ncy5qcyJdLCJuYW1lcyI6WyJjb21tYW5kcyIsInVwZGF0ZVNldHRpbmdzIiwibmV3U2V0dGluZ3MiLCJzZXR0aW5ncyIsImxvZyIsImVycm9yQW5kVGhyb3ciLCJ1cGRhdGUiLCJnZXRTZXR0aW5ncyIsInNldFRpbWVEaWxhdGlvbiIsImZhY3RvciIsImNvbW1hbmRPYmplY3QiLCJuYW1lIiwiYXJncyIsImNvbW1hbmRKU09OIiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJleGVjdXRlU29ja2V0Q29tbWFuZCIsInJlc3VsdCIsInBhcnNlIiwiZSIsIkVycm9yIiwic3RhdHVzIiwieW91aUVuZ2luZURyaXZlclJldHVyblZhbHVlcyIsIldFQkRSSVZFUl9VTktOT1dOX0NPTU1BTkQiLCJlcnJvcnMiLCJVbmtub3duQ29tbWFuZEVycm9yIiwidmFsdWUiLCJzZXRTb3VyY2VUcmVlRmlsdGVyIiwiZmlsdGVyIiwiV0VCRFJJVkVSX0lOVkFMSURfU0VMRUNUT1IiLCJJbnZhbGlkU2VsZWN0b3JFcnJvciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFFQSxJQUFJQSxRQUFRLEdBQUcsRUFBZjs7QUFFQUEsUUFBUSxDQUFDQyxjQUFULEdBQTBCLGdCQUFnQkMsV0FBaEIsRUFBNkI7QUFDckQsTUFBSSxDQUFDLEtBQUtDLFFBQVYsRUFBb0I7QUFDbEJDLG9CQUFJQyxhQUFKLENBQWtCLG1EQUFsQjtBQUNEOztBQUNELFNBQU8sTUFBTSxLQUFLRixRQUFMLENBQWNHLE1BQWQsQ0FBcUJKLFdBQXJCLENBQWI7QUFDRCxDQUxEOztBQU9BRixRQUFRLENBQUNPLFdBQVQsR0FBdUIsa0JBQWtCO0FBQ3ZDLE1BQUksQ0FBQyxLQUFLSixRQUFWLEVBQW9CO0FBQ2xCQyxvQkFBSUMsYUFBSixDQUFrQixnREFBbEI7QUFDRDs7QUFDRCxTQUFPLEtBQUtGLFFBQUwsQ0FBY0ksV0FBZCxFQUFQO0FBQ0QsQ0FMRDs7QUFZQVAsUUFBUSxDQUFDUSxlQUFULEdBQTJCLGdCQUFnQkMsTUFBaEIsRUFBd0I7QUFDakQsTUFBSUMsYUFBYSxHQUFHO0FBQ2xCQyxJQUFBQSxJQUFJLEVBQUcsaUJBRFc7QUFFbEJDLElBQUFBLElBQUksRUFBRSxDQUFFLEdBQUVILE1BQU8sRUFBWDtBQUZZLEdBQXBCO0FBSUEsTUFBSUksV0FBVyxHQUFHQyxJQUFJLENBQUNDLFNBQUwsQ0FBZUwsYUFBZixDQUFsQjtBQUNBLE1BQUlNLElBQUksR0FBRyxNQUFNLEtBQUtDLG9CQUFMLENBQTBCSixXQUExQixDQUFqQjtBQUVBLE1BQUlLLE1BQUo7O0FBQ0EsTUFBSTtBQUNGQSxJQUFBQSxNQUFNLEdBQUdKLElBQUksQ0FBQ0ssS0FBTCxDQUFXSCxJQUFYLENBQVQ7QUFDRCxHQUZELENBRUUsT0FBT0ksQ0FBUCxFQUFVO0FBQ1YsVUFBTSxJQUFJQyxLQUFKLENBQVUsNEJBQVYsQ0FBTjtBQUNEOztBQUVELE1BQUlILE1BQU0sQ0FBQ0ksTUFBUCxLQUFrQkMsb0NBQTZCQyx5QkFBbkQsRUFBOEU7QUFDNUUsVUFBTSxJQUFJQyx5QkFBT0MsbUJBQVgsQ0FBK0IsK0NBQS9CLENBQU47QUFDRDs7QUFFRCxTQUFPUixNQUFNLENBQUNTLEtBQWQ7QUFDRCxDQXBCRDs7QUEwQkEzQixRQUFRLENBQUM0QixtQkFBVCxHQUErQixnQkFBZ0JDLE1BQWhCLEVBQXdCO0FBQ3JELE1BQUluQixhQUFhLEdBQUc7QUFDbEJDLElBQUFBLElBQUksRUFBRyxxQkFEVztBQUVsQkMsSUFBQUEsSUFBSSxFQUFFLENBQUUsR0FBRWlCLE1BQU8sRUFBWDtBQUZZLEdBQXBCO0FBSUEsTUFBSWhCLFdBQVcsR0FBR0MsSUFBSSxDQUFDQyxTQUFMLENBQWVMLGFBQWYsQ0FBbEI7QUFDQSxNQUFJTSxJQUFJLEdBQUcsTUFBTSxLQUFLQyxvQkFBTCxDQUEwQkosV0FBMUIsQ0FBakI7QUFFQSxNQUFJSyxNQUFKOztBQUNBLE1BQUk7QUFDRkEsSUFBQUEsTUFBTSxHQUFHSixJQUFJLENBQUNLLEtBQUwsQ0FBV0gsSUFBWCxDQUFUO0FBQ0QsR0FGRCxDQUVFLE9BQU9JLENBQVAsRUFBVTtBQUNWLFVBQU0sSUFBSUMsS0FBSixDQUFVLDRCQUFWLENBQU47QUFDRDs7QUFFRCxNQUFJSCxNQUFNLENBQUNJLE1BQVAsS0FBa0JDLG9DQUE2QkMseUJBQW5ELEVBQThFO0FBQzVFLFVBQU0sSUFBSUMseUJBQU9DLG1CQUFYLENBQStCLCtDQUEvQixDQUFOO0FBQ0Q7O0FBQ0QsTUFBSVIsTUFBTSxDQUFDSSxNQUFQLEtBQWtCQyxvQ0FBNkJPLDBCQUFuRCxFQUErRTtBQUM3RSxVQUFNLElBQUlMLHlCQUFPTSxvQkFBWCxDQUFnQyx5SUFBaEMsQ0FBTjtBQUNEOztBQUNELFNBQU9iLE1BQU0sQ0FBQ1MsS0FBZDtBQUNELENBdEJEOztlQXlCZTNCLFEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlcnJvcnMgfSBmcm9tICdhcHBpdW0tYmFzZS1kcml2ZXInO1xuaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXInO1xuaW1wb3J0IHsgeW91aUVuZ2luZURyaXZlclJldHVyblZhbHVlcyB9IGZyb20gJy4uL3V0aWxzJztcblxubGV0IGNvbW1hbmRzID0ge307XG5cbmNvbW1hbmRzLnVwZGF0ZVNldHRpbmdzID0gYXN5bmMgZnVuY3Rpb24gKG5ld1NldHRpbmdzKSB7XG4gIGlmICghdGhpcy5zZXR0aW5ncykge1xuICAgIGxvZy5lcnJvckFuZFRocm93KCdDYW5ub3QgdXBkYXRlIHNldHRpbmdzOyBzZXR0aW5ncyBvYmplY3Qgbm90IGZvdW5kJyk7XG4gIH1cbiAgcmV0dXJuIGF3YWl0IHRoaXMuc2V0dGluZ3MudXBkYXRlKG5ld1NldHRpbmdzKTtcbn07XG5cbmNvbW1hbmRzLmdldFNldHRpbmdzID0gYXN5bmMgZnVuY3Rpb24gKCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtYXdhaXRcbiAgaWYgKCF0aGlzLnNldHRpbmdzKSB7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coJ0Nhbm5vdCBnZXQgc2V0dGluZ3M7IHNldHRpbmdzIG9iamVjdCBub3QgZm91bmQnKTtcbiAgfVxuICByZXR1cm4gdGhpcy5zZXR0aW5ncy5nZXRTZXR0aW5ncygpO1xufTtcblxuLy8gQW1wbGlmaWVzIHRpbWUgb24gdGhlIGRldmljZSBieSBhIGZhY3RvclxuLy8gZXhhbXBsZXM6XG4vLyAyID0gdHdpY2UgdGhlIHNwZWVkXG4vLyAxID0gbm9ybWFsIHNwZWVkXG4vLyAwLjUgPSBoYWxmIHRoZSBzcGVlZFxuY29tbWFuZHMuc2V0VGltZURpbGF0aW9uID0gYXN5bmMgZnVuY3Rpb24gKGZhY3Rvcikge1xuICBsZXQgY29tbWFuZE9iamVjdCA9IHtcbiAgICBuYW1lOiBgc2V0VGltZURpbGF0aW9uYCxcbiAgICBhcmdzOiBbYCR7ZmFjdG9yfWBdXG4gIH07XG4gIGxldCBjb21tYW5kSlNPTiA9IEpTT04uc3RyaW5naWZ5KGNvbW1hbmRPYmplY3QpO1xuICBsZXQgZGF0YSA9IGF3YWl0IHRoaXMuZXhlY3V0ZVNvY2tldENvbW1hbmQoY29tbWFuZEpTT04pO1xuXG4gIGxldCByZXN1bHQ7XG4gIHRyeSB7XG4gICAgcmVzdWx0ID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignQmFkIHJlc3BvbnNlIGZyb20gc2V0VmFsdWUnKTtcbiAgfVxuXG4gIGlmIChyZXN1bHQuc3RhdHVzID09PSB5b3VpRW5naW5lRHJpdmVyUmV0dXJuVmFsdWVzLldFQkRSSVZFUl9VTktOT1dOX0NPTU1BTkQpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLlVua25vd25Db21tYW5kRXJyb3IoJ2FyZ3VtZW50IG11c3QgYmUgbnVtZXJpYyBhbmQgbGFyZ2VyIHRoYW4gemVybycpO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdC52YWx1ZTtcbn07XG5cblxuLy8gU2V0cyB0aGUgYXR0cmlidXRlIHR5cGUvdmFsdWUgdG8gZmlsdGVyIHRoZSBzb3VyY2UgdHJlZVxuLy8gZm9ybWF0OlxuLy8gU291cmNlVHJlZUZpbHRlcjogXCJbQGF0dHJpYnV0ZVR5cGU9J2F0dHJpYnV0ZVZhbHVlJ11cIlxuY29tbWFuZHMuc2V0U291cmNlVHJlZUZpbHRlciA9IGFzeW5jIGZ1bmN0aW9uIChmaWx0ZXIpIHtcbiAgbGV0IGNvbW1hbmRPYmplY3QgPSB7XG4gICAgbmFtZTogYHNldFNvdXJjZVRyZWVGaWx0ZXJgLFxuICAgIGFyZ3M6IFtgJHtmaWx0ZXJ9YF1cbiAgfTtcbiAgbGV0IGNvbW1hbmRKU09OID0gSlNPTi5zdHJpbmdpZnkoY29tbWFuZE9iamVjdCk7XG4gIGxldCBkYXRhID0gYXdhaXQgdGhpcy5leGVjdXRlU29ja2V0Q29tbWFuZChjb21tYW5kSlNPTik7XG5cbiAgbGV0IHJlc3VsdDtcbiAgdHJ5IHtcbiAgICByZXN1bHQgPSBKU09OLnBhcnNlKGRhdGEpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdCYWQgcmVzcG9uc2UgZnJvbSBzZXRWYWx1ZScpO1xuICB9XG5cbiAgaWYgKHJlc3VsdC5zdGF0dXMgPT09IHlvdWlFbmdpbmVEcml2ZXJSZXR1cm5WYWx1ZXMuV0VCRFJJVkVSX1VOS05PV05fQ09NTUFORCkge1xuICAgIHRocm93IG5ldyBlcnJvcnMuVW5rbm93bkNvbW1hbmRFcnJvcignYXJndW1lbnQgbXVzdCBiZSBudW1lcmljIGFuZCBsYXJnZXIgdGhhbiB6ZXJvJyk7XG4gIH1cbiAgaWYgKHJlc3VsdC5zdGF0dXMgPT09IHlvdWlFbmdpbmVEcml2ZXJSZXR1cm5WYWx1ZXMuV0VCRFJJVkVSX0lOVkFMSURfU0VMRUNUT1IpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRTZWxlY3RvckVycm9yKFwiQXR0cmlidXRlIGZpbHRlciBzaG91bGQgaGF2ZSBmb2xsb3dpbmcgZm9ybWF0OiBbQGF0dHJpYnV0ZVR5cGU9J2F0dHJpYnV0ZVZhbHVlJ10gb3IgJycgdG8gcmVzZXQuICgnJyBpcyBzdXBwb3J0ZWQgaW4gWW91LmkgRW5naW5lIDUuMyspXCIpO1xuICB9XG4gIHJldHVybiByZXN1bHQudmFsdWU7XG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNvbW1hbmRzO1xuIl0sImZpbGUiOiJsaWIvY29tbWFuZHMvc2V0dGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
