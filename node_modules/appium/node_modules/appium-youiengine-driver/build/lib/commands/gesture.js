"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _appiumBaseDriver = require("appium-base-driver");

var _utils = require("../utils");

let commands = {};

commands.click = async function (el) {
  let retVal = await this.tapEl(el);
  return retVal;
};

commands.tapEl = async function (el, longPress) {
  el = (0, _utils.unwrapEl)(el);
  let commandName = 'tap';

  if (longPress) {
    commandName = 'longpress';
  }

  let commandObject = {
    name: commandName,
    args: [`${el}`]
  };
  let commandJSON = JSON.stringify(commandObject);
  let data = await this.executeSocketCommand(commandJSON);
  let result;

  try {
    result = JSON.parse(data);
  } catch (e) {
    throw new Error('Bad response from click');
  }

  if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_STALE_ELEMENT) {
    throw new _appiumBaseDriver.errors.StaleElementReferenceError(result.value);
  }

  return result.value;
};

commands.tapElXY = async function (el, x, y, longPress) {
  el = (0, _utils.unwrapEl)(el);
  let commandName = 'tap';

  if (longPress) {
    commandName = 'longpress';
  }

  let commandObject = {
    name: commandName,
    args: [`${el}`, `${x}`, `${y}`]
  };
  let commandJSON = JSON.stringify(commandObject);
  let data = await this.executeSocketCommand(commandJSON);
  let result;

  try {
    result = JSON.parse(data);
  } catch (e) {
    throw new Error('Bad response from tapElXY');
  }

  if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_UNKNOWN_COMMAND) {
    throw new _appiumBaseDriver.errors.UnknownCommandError(result.value);
  } else if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_NO_SUCH_ELEMENT) {
    throw new _appiumBaseDriver.errors.NoSuchElementError(result.value);
  } else if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_STALE_ELEMENT) {
    throw new _appiumBaseDriver.errors.StaleElementReferenceError(result.value);
  }

  return result.value;
};

commands.tapXY = async function (x, y, longPress) {
  let commandName = 'tap';

  if (longPress === true) {
    commandName = 'longpress';
  }

  let commandObject = {
    name: commandName,
    args: [`${x}`, `${y}`]
  };
  let commandJSON = JSON.stringify(commandObject);
  let data = await this.executeSocketCommand(commandJSON);
  let result;

  try {
    result = JSON.parse(data);
  } catch (e) {
    throw new Error('Bad response from tapXY');
  }

  if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_STALE_ELEMENT) {
    throw new _appiumBaseDriver.errors.StaleElementReferenceError(result.value);
  }

  return result.value;
};

commands.tap = async function (gestures, longPress) {
  let elementId = gestures[0].options.element;
  let x = gestures[0].options.x;
  let y = gestures[0].options.y;

  if (elementId) {
    if (x && y) {
      await this.tapElXY(elementId, x, y, longPress);
    } else {
      await this.tapEl(elementId, longPress);
    }
  } else {
    await this.tapXY(x, y, longPress);
  }
};

commands.doSwipe = async function (gestures, longPress) {
  let press = gestures[0];
  let moveTo = gestures[1];
  let startX = press.options.x || 0,
      startY = press.options.y || 0,
      deltaX = moveTo.options.x || 0,
      deltaY = moveTo.options.y || 0;

  if (press.options.element) {
    let {
      x,
      y
    } = await this.getLocation(press.options.element);
    let {
      width,
      height
    } = await this.getSize(press.options.element);

    if (!press.options.x && !press.options.y && width && height) {
      startX += width / 2;
      startY += height / 2;
    }

    startX += x || 0;
    startY += y || 0;
  }

  if (moveTo.options.element) {
    let {
      x,
      y
    } = await this.getLocation(moveTo.options.element);
    let {
      width,
      height
    } = await this.getSize(moveTo.options.element);
    deltaX += x || 0;
    deltaY += y || 0;

    if (!moveTo.options.x && !moveTo.options.y && width && height) {
      deltaX += width / 2;
      deltaY += height / 2;
    }
  }

  let commandName = 'swipe';

  if (longPress === true) {
    commandName = 'longpressswipe';
  }

  let commandObject = {
    name: commandName,
    args: [`${startX}`, `${startY}`, `${deltaX}`, `${deltaY}`]
  };
  let commandJSON = JSON.stringify(commandObject);
  let data = await this.executeSocketCommand(commandJSON);
  let result;

  try {
    result = JSON.parse(data);
  } catch (e) {
    throw new Error('Bad response from doSwipe');
  }

  if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_STALE_ELEMENT) {
    throw new _appiumBaseDriver.errors.StaleElementReferenceError(result.value);
  }

  return result.value;
};

commands.performTouch = async function (gestures) {
  if (gestures.length === 3) {
    if (gestures[0].action === 'press' && gestures[1].action === 'moveTo' && gestures[2].action === 'release') {
      return await this.doSwipe(gestures, false);
    } else if (gestures[0].action === 'longPress' && gestures[1].action === 'moveTo' && gestures[2].action === 'release') {
      return await this.doSwipe(gestures, true);
    }
  } else if (gestures.length === 2) {
    if (gestures[0].action === 'press' && gestures[1].action === 'release') {
      return await this.tap(gestures, false);
    } else if (gestures[0].action === 'longPress' && gestures[1].action === 'release') {
      return await this.tap(gestures, true);
    }
  } else if (gestures.length === 1) {
    if (gestures[0].action === 'tap') {
      return await this.tap(gestures, false);
    }
  }
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
