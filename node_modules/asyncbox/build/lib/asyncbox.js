"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sleep = sleep;
exports.retry = retry;
exports.nodeify = nodeify;
exports.nodeifyAll = nodeifyAll;
exports.retryInterval = retryInterval;
exports.asyncify = asyncify;
exports.parallel = parallel;
exports.asyncmap = asyncmap;
exports.asyncfilter = asyncfilter;
exports.waitForCondition = waitForCondition;

require("source-map-support/register");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _es6Mapify = require("es6-mapify");

var _lodash = _interopRequireDefault(require("lodash"));

async function sleep(ms) {
  return await _bluebird.default.delay(ms);
}

async function retry(times, fn, ...args) {
  let tries = 0;
  let done = false;
  let res = null;

  while (!done && tries < times) {
    tries++;

    try {
      res = await fn(...args);
      done = true;
    } catch (err) {
      if (tries >= times) {
        throw err;
      }
    }
  }

  return res;
}

async function retryInterval(times, sleepMs, fn, ...args) {
  let count = 0;

  let wrapped = async () => {
    count++;
    let res;

    try {
      res = await fn(...args);
    } catch (e) {
      if (count !== times) {
        await sleep(sleepMs);
      }

      throw e;
    }

    return res;
  };

  return await retry(times, wrapped);
}

async function parallel(promises) {
  return await _bluebird.default.all(promises);
}

function nodeify(promisey, cb) {
  return _bluebird.default.resolve(promisey).nodeify(cb);
}

function nodeifyAll(promiseyMap) {
  let cbMap = {};

  for (const [name, fn] of (0, _es6Mapify.mapify)(promiseyMap)) {
    cbMap[name] = function (...args) {
      const _cb = args.slice(-1)[0];
      args = args.slice(0, -1);
      nodeify(fn(...args), _cb);
    };
  }

  return cbMap;
}

function asyncify(fn, ...args) {
  _bluebird.default.resolve(fn(...args)).done();
}

async function asyncmap(coll, mapper, runInParallel = true) {
  if (runInParallel) {
    return parallel(coll.map(mapper));
  }

  let newColl = [];

  for (let item of coll) {
    newColl.push((await mapper(item)));
  }

  return newColl;
}

async function asyncfilter(coll, filter, runInParallel = true) {
  let newColl = [];

  if (runInParallel) {
    let bools = await parallel(coll.map(filter));

    for (let i = 0; i < coll.length; i++) {
      if (bools[i]) {
        newColl.push(coll[i]);
      }
    }
  } else {
    for (let item of coll) {
      if (await filter(item)) {
        newColl.push(item);
      }
    }
  }

  return newColl;
}

async function waitForCondition(condFn, opts = {}) {
  _lodash.default.defaults(opts, {
    waitMs: 5000,
    intervalMs: 500
  });

  let debug = opts.logger ? opts.logger.debug.bind(opts.logger) : _lodash.default.noop;
  let begunAt = Date.now();
  let endAt = begunAt + opts.waitMs;

  let spin = async () => {
    const result = await condFn();

    if (result) {
      return result;
    }

    let now = Date.now();
    let waited = now - begunAt;

    if (now < endAt) {
      debug(`Waited for ${waited} ms so far`);
      await _bluebird.default.delay(opts.intervalMs);
      return await spin();
    }

    throw new Error(`Condition unmet after ${waited} ms. Timing out.`);
  };

  return await spin();
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
