"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.AndroidSdkExists = exports.BinaryIsInPathCheck = void 0;

require("source-map-support/register");

var _doctor = require("./doctor");

var _utils = require("./utils");

var _appiumSupport = require("appium-support");

var _path = _interopRequireDefault(require("path"));

require("colors");

let checks = [];

class BinaryIsInPathCheck extends _doctor.DoctorCheck {
  constructor(binary) {
    super();
    this.binary = binary;
  }

  async diagnose() {
    const resolvedPath = await (0, _utils.resolveExecutablePath)(this.binary);

    if (!resolvedPath) {
      return (0, _utils.nok)(`${this.binary} is MISSING in PATH: ${process.env.PATH}`);
    }

    return (0, _utils.ok)(`${this.binary} was found at ${resolvedPath}`);
  }

  fix() {
    return `Manually install the ${this.binary.bold} binary and add it to ${'PATH'.bold}.`;
  }

}

exports.BinaryIsInPathCheck = BinaryIsInPathCheck;
checks.push(new BinaryIsInPathCheck(_appiumSupport.system.isWindows() ? 'mvn.bat' : 'mvn'));
checks.push(new BinaryIsInPathCheck(_appiumSupport.system.isWindows() ? 'ant.bat' : 'ant'));
checks.push(new BinaryIsInPathCheck(_appiumSupport.system.isWindows() ? 'adb.exe' : 'adb'));

class AndroidSdkExists extends _doctor.DoctorCheck {
  constructor(sdk) {
    super();
    this.sdk = sdk;
  }

  async diagnose() {
    if (typeof process.env.ANDROID_HOME === 'undefined') {
      return (0, _utils.nok)(`${this.sdk} could not be found because ANDROID_HOME is NOT set!`);
    }

    let sdkPath = _path.default.resolve(process.env.ANDROID_HOME, _path.default.join('platforms', this.sdk));

    return (await _appiumSupport.fs.exists(sdkPath)) ? (0, _utils.ok)(`${this.sdk} was found at: ${sdkPath}`) : (0, _utils.nok)(`${this.sdk} could NOT be found at '${sdkPath}'!`);
  }

  fix() {
    if (typeof process.env.ANDROID_HOME === 'undefined') {
      return `Manually configure ${'ANDROID_HOME'.bold}.`;
    }

    return `Manually install the ${this.sdk.bold} sdk.`;
  }

}

exports.AndroidSdkExists = AndroidSdkExists;
checks.push(new AndroidSdkExists('android-16'));
checks.push(new AndroidSdkExists('android-19'));
var _default = checks;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9kZXYuanMiXSwibmFtZXMiOlsiY2hlY2tzIiwiQmluYXJ5SXNJblBhdGhDaGVjayIsIkRvY3RvckNoZWNrIiwiY29uc3RydWN0b3IiLCJiaW5hcnkiLCJkaWFnbm9zZSIsInJlc29sdmVkUGF0aCIsInByb2Nlc3MiLCJlbnYiLCJQQVRIIiwiZml4IiwiYm9sZCIsInB1c2giLCJzeXN0ZW0iLCJpc1dpbmRvd3MiLCJBbmRyb2lkU2RrRXhpc3RzIiwic2RrIiwiQU5EUk9JRF9IT01FIiwic2RrUGF0aCIsInBhdGgiLCJyZXNvbHZlIiwiam9pbiIsImZzIiwiZXhpc3RzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBLElBQUlBLE1BQU0sR0FBRyxFQUFiOztBQUdBLE1BQU1DLG1CQUFOLFNBQWtDQyxtQkFBbEMsQ0FBOEM7QUFDNUNDLEVBQUFBLFdBQVcsQ0FBRUMsTUFBRixFQUFVO0FBQ25CO0FBQ0EsU0FBS0EsTUFBTCxHQUFjQSxNQUFkO0FBQ0Q7O0FBRUQsUUFBTUMsUUFBTixHQUFrQjtBQUNoQixVQUFNQyxZQUFZLEdBQUcsTUFBTSxrQ0FBc0IsS0FBS0YsTUFBM0IsQ0FBM0I7O0FBQ0EsUUFBSSxDQUFDRSxZQUFMLEVBQW1CO0FBQ2pCLGFBQU8sZ0JBQUssR0FBRSxLQUFLRixNQUFPLHdCQUF1QkcsT0FBTyxDQUFDQyxHQUFSLENBQVlDLElBQUssRUFBM0QsQ0FBUDtBQUNEOztBQUVELFdBQU8sZUFBSSxHQUFFLEtBQUtMLE1BQU8saUJBQWdCRSxZQUFhLEVBQS9DLENBQVA7QUFDRDs7QUFFREksRUFBQUEsR0FBRyxHQUFJO0FBQ0wsV0FBUSx3QkFBdUIsS0FBS04sTUFBTCxDQUFZTyxJQUFLLHlCQUF3QixPQUFPQSxJQUFLLEdBQXBGO0FBQ0Q7O0FBakIyQzs7O0FBb0I5Q1gsTUFBTSxDQUFDWSxJQUFQLENBQVksSUFBSVgsbUJBQUosQ0FBd0JZLHNCQUFPQyxTQUFQLEtBQXFCLFNBQXJCLEdBQWlDLEtBQXpELENBQVo7QUFDQWQsTUFBTSxDQUFDWSxJQUFQLENBQVksSUFBSVgsbUJBQUosQ0FBd0JZLHNCQUFPQyxTQUFQLEtBQXFCLFNBQXJCLEdBQWlDLEtBQXpELENBQVo7QUFDQWQsTUFBTSxDQUFDWSxJQUFQLENBQVksSUFBSVgsbUJBQUosQ0FBd0JZLHNCQUFPQyxTQUFQLEtBQXFCLFNBQXJCLEdBQWlDLEtBQXpELENBQVo7O0FBR0EsTUFBTUMsZ0JBQU4sU0FBK0JiLG1CQUEvQixDQUEyQztBQUN6Q0MsRUFBQUEsV0FBVyxDQUFFYSxHQUFGLEVBQU87QUFDaEI7QUFDQSxTQUFLQSxHQUFMLEdBQVdBLEdBQVg7QUFDRDs7QUFFRCxRQUFNWCxRQUFOLEdBQWtCO0FBQ2hCLFFBQUksT0FBT0UsT0FBTyxDQUFDQyxHQUFSLENBQVlTLFlBQW5CLEtBQW9DLFdBQXhDLEVBQXFEO0FBQ25ELGFBQU8sZ0JBQUssR0FBRSxLQUFLRCxHQUFJLHNEQUFoQixDQUFQO0FBQ0Q7O0FBQ0QsUUFBSUUsT0FBTyxHQUFHQyxjQUFLQyxPQUFMLENBQWFiLE9BQU8sQ0FBQ0MsR0FBUixDQUFZUyxZQUF6QixFQUF1Q0UsY0FBS0UsSUFBTCxDQUFVLFdBQVYsRUFBdUIsS0FBS0wsR0FBNUIsQ0FBdkMsQ0FBZDs7QUFDQSxXQUFPLE9BQU1NLGtCQUFHQyxNQUFILENBQVVMLE9BQVYsQ0FBTixJQUEyQixlQUFJLEdBQUUsS0FBS0YsR0FBSSxrQkFBaUJFLE9BQVEsRUFBeEMsQ0FBM0IsR0FDTCxnQkFBSyxHQUFFLEtBQUtGLEdBQUksMkJBQTBCRSxPQUFRLElBQWxELENBREY7QUFFRDs7QUFFRFIsRUFBQUEsR0FBRyxHQUFJO0FBQ0wsUUFBSSxPQUFPSCxPQUFPLENBQUNDLEdBQVIsQ0FBWVMsWUFBbkIsS0FBb0MsV0FBeEMsRUFBcUQ7QUFDbkQsYUFBUSxzQkFBcUIsZUFBZU4sSUFBSyxHQUFqRDtBQUNEOztBQUNELFdBQVEsd0JBQXVCLEtBQUtLLEdBQUwsQ0FBU0wsSUFBSyxPQUE3QztBQUNEOztBQXBCd0M7OztBQXVCM0NYLE1BQU0sQ0FBQ1ksSUFBUCxDQUFZLElBQUlHLGdCQUFKLENBQXFCLFlBQXJCLENBQVo7QUFDQWYsTUFBTSxDQUFDWSxJQUFQLENBQVksSUFBSUcsZ0JBQUosQ0FBcUIsWUFBckIsQ0FBWjtlQUdlZixNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRG9jdG9yQ2hlY2sgfSBmcm9tICcuL2RvY3Rvcic7XG5pbXBvcnQgeyBvaywgbm9rLCByZXNvbHZlRXhlY3V0YWJsZVBhdGggfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IGZzLCBzeXN0ZW0gfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCAnY29sb3JzJztcblxubGV0IGNoZWNrcyA9IFtdO1xuXG4vLyBDaGVjayBQQVRIIGJpbmFyaWVzXG5jbGFzcyBCaW5hcnlJc0luUGF0aENoZWNrIGV4dGVuZHMgRG9jdG9yQ2hlY2sge1xuICBjb25zdHJ1Y3RvciAoYmluYXJ5KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmJpbmFyeSA9IGJpbmFyeTtcbiAgfVxuXG4gIGFzeW5jIGRpYWdub3NlICgpIHtcbiAgICBjb25zdCByZXNvbHZlZFBhdGggPSBhd2FpdCByZXNvbHZlRXhlY3V0YWJsZVBhdGgodGhpcy5iaW5hcnkpO1xuICAgIGlmICghcmVzb2x2ZWRQYXRoKSB7XG4gICAgICByZXR1cm4gbm9rKGAke3RoaXMuYmluYXJ5fSBpcyBNSVNTSU5HIGluIFBBVEg6ICR7cHJvY2Vzcy5lbnYuUEFUSH1gKTtcbiAgICB9XG5cbiAgICByZXR1cm4gb2soYCR7dGhpcy5iaW5hcnl9IHdhcyBmb3VuZCBhdCAke3Jlc29sdmVkUGF0aH1gKTtcbiAgfVxuXG4gIGZpeCAoKSB7XG4gICAgcmV0dXJuIGBNYW51YWxseSBpbnN0YWxsIHRoZSAke3RoaXMuYmluYXJ5LmJvbGR9IGJpbmFyeSBhbmQgYWRkIGl0IHRvICR7J1BBVEgnLmJvbGR9LmA7XG4gIH1cbn1cblxuY2hlY2tzLnB1c2gobmV3IEJpbmFyeUlzSW5QYXRoQ2hlY2soc3lzdGVtLmlzV2luZG93cygpID8gJ212bi5iYXQnIDogJ212bicpKTtcbmNoZWNrcy5wdXNoKG5ldyBCaW5hcnlJc0luUGF0aENoZWNrKHN5c3RlbS5pc1dpbmRvd3MoKSA/ICdhbnQuYmF0JyA6ICdhbnQnKSk7XG5jaGVja3MucHVzaChuZXcgQmluYXJ5SXNJblBhdGhDaGVjayhzeXN0ZW0uaXNXaW5kb3dzKCkgPyAnYWRiLmV4ZScgOiAnYWRiJykpO1xuXG4vLyBDaGVjayBBbmRyb2lkIFNES3NcbmNsYXNzIEFuZHJvaWRTZGtFeGlzdHMgZXh0ZW5kcyBEb2N0b3JDaGVjayB7XG4gIGNvbnN0cnVjdG9yIChzZGspIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuc2RrID0gc2RrO1xuICB9XG5cbiAgYXN5bmMgZGlhZ25vc2UgKCkge1xuICAgIGlmICh0eXBlb2YgcHJvY2Vzcy5lbnYuQU5EUk9JRF9IT01FID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIG5vayhgJHt0aGlzLnNka30gY291bGQgbm90IGJlIGZvdW5kIGJlY2F1c2UgQU5EUk9JRF9IT01FIGlzIE5PVCBzZXQhYCk7XG4gICAgfVxuICAgIGxldCBzZGtQYXRoID0gcGF0aC5yZXNvbHZlKHByb2Nlc3MuZW52LkFORFJPSURfSE9NRSwgcGF0aC5qb2luKCdwbGF0Zm9ybXMnLCB0aGlzLnNkaykpO1xuICAgIHJldHVybiBhd2FpdCBmcy5leGlzdHMoc2RrUGF0aCkgPyBvayhgJHt0aGlzLnNka30gd2FzIGZvdW5kIGF0OiAke3Nka1BhdGh9YCkgOlxuICAgICAgbm9rKGAke3RoaXMuc2RrfSBjb3VsZCBOT1QgYmUgZm91bmQgYXQgJyR7c2RrUGF0aH0nIWApO1xuICB9XG5cbiAgZml4ICgpIHtcbiAgICBpZiAodHlwZW9mIHByb2Nlc3MuZW52LkFORFJPSURfSE9NRSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiBgTWFudWFsbHkgY29uZmlndXJlICR7J0FORFJPSURfSE9NRScuYm9sZH0uYDtcbiAgICB9XG4gICAgcmV0dXJuIGBNYW51YWxseSBpbnN0YWxsIHRoZSAke3RoaXMuc2RrLmJvbGR9IHNkay5gO1xuICB9XG59XG5cbmNoZWNrcy5wdXNoKG5ldyBBbmRyb2lkU2RrRXhpc3RzKCdhbmRyb2lkLTE2JykpO1xuY2hlY2tzLnB1c2gobmV3IEFuZHJvaWRTZGtFeGlzdHMoJ2FuZHJvaWQtMTknKSk7XG5cbmV4cG9ydCB7IEJpbmFyeUlzSW5QYXRoQ2hlY2ssIEFuZHJvaWRTZGtFeGlzdHMgfTtcbmV4cG9ydCBkZWZhdWx0IGNoZWNrcztcbiJdLCJmaWxlIjoibGliL2Rldi5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiJ9
