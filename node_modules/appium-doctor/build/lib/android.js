"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "EnvVarAndPathCheck", {
  enumerable: true,
  get: function () {
    return _env.default;
  }
});
exports.default = exports.OptionalAppBundleCheck = exports.JavaOnPathCheck = exports.AndroidToolCheck = void 0;

require("source-map-support/register");

var _doctor = require("./doctor");

var _utils = require("./utils");

var _appiumSupport = require("appium-support");

var _path = _interopRequireDefault(require("path"));

var _env = _interopRequireDefault(require("./env"));

require("colors");

let checks = [];
let javaHome = _appiumSupport.system.isWindows() ? '%JAVA_HOME%' : '$JAVA_HOME';
checks.push(new _env.default('ANDROID_HOME'));
checks.push(new _env.default('JAVA_HOME'));

class JavaOnPathCheck extends _doctor.DoctorCheck {
  async diagnose() {
    if (process.env.JAVA_HOME) {
      let javaHomeBin = _path.default.resolve(process.env.JAVA_HOME, 'bin');

      if (process.env.PATH.indexOf(javaHomeBin) + 1) {
        return (0, _utils.ok)(`Bin directory of ${javaHome} is set`);
      }
    }

    return (0, _utils.nok)(`Bin directory for ${javaHome} is not set`);
  }

  fix() {
    return `Add ${`'${javaHome}${_path.default.sep}bin'`.bold} to your ${'PATH'.bold} environment`;
  }

}

exports.JavaOnPathCheck = JavaOnPathCheck;

class AndroidToolCheck extends _doctor.DoctorCheck {
  constructor(toolName, toolPath) {
    super();
    this.toolName = toolName;
    this.toolPath = toolPath;
  }

  async diagnose() {
    if (typeof process.env.ANDROID_HOME === 'undefined') {
      return (0, _utils.nok)(`${this.toolName} could not be found because ANDROID_HOME is NOT set!`);
    }

    let fullPath = _path.default.resolve(process.env.ANDROID_HOME, this.toolPath);

    return (await _appiumSupport.fs.exists(fullPath)) ? (0, _utils.ok)(`${this.toolName} exists at: ${fullPath}`) : (0, _utils.nok)(`${this.toolName} could NOT be found at '${fullPath}'!`);
  }

  fix() {
    if (typeof process.env.ANDROID_HOME === 'undefined') {
      return `Manually configure ${'ANDROID_HOME'.bold} and run appium-doctor again.`;
    }

    return `Manually install ${this.toolName.bold} and add it to ${'PATH'.bold}.`;
  }

}

exports.AndroidToolCheck = AndroidToolCheck;
checks.push(new AndroidToolCheck('adb', _path.default.join('platform-tools', _appiumSupport.system.isWindows() ? 'adb.exe' : 'adb')));
checks.push(new AndroidToolCheck('android', _path.default.join('tools', _appiumSupport.system.isWindows() ? 'android.bat' : 'android')));
checks.push(new AndroidToolCheck('emulator', _path.default.join('tools', _appiumSupport.system.isWindows() ? 'emulator.exe' : 'emulator')));
checks.push(new JavaOnPathCheck());

class OptionalAppBundleCheck extends _doctor.DoctorCheck {
  async diagnose() {
    const bundletoolPath = await (0, _utils.resolveExecutablePath)('bundletool.jar');
    return bundletoolPath ? (0, _utils.okOptional)(`bundletool.jar is installed at: ${bundletoolPath}`) : (0, _utils.nokOptional)('bundletool.jar cannot be found');
  }

  async fix() {
    return `${'bundletool.jar'.bold} is used to handle Android App Bundle. Please read http://appium.io/docs/en/writing-running-appium/android/android-appbundle/ to install it` + `${_appiumSupport.system.isWindows() ? '. Also consider adding the ".jar" extension into your PATHEXT environment variable in order to fix the problem for Windows' : ''}`;
  }

}

exports.OptionalAppBundleCheck = OptionalAppBundleCheck;
checks.push(new OptionalAppBundleCheck());
var _default = checks;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9hbmRyb2lkLmpzIl0sIm5hbWVzIjpbImNoZWNrcyIsImphdmFIb21lIiwic3lzdGVtIiwiaXNXaW5kb3dzIiwicHVzaCIsIkVudlZhckFuZFBhdGhDaGVjayIsIkphdmFPblBhdGhDaGVjayIsIkRvY3RvckNoZWNrIiwiZGlhZ25vc2UiLCJwcm9jZXNzIiwiZW52IiwiSkFWQV9IT01FIiwiamF2YUhvbWVCaW4iLCJwYXRoIiwicmVzb2x2ZSIsIlBBVEgiLCJpbmRleE9mIiwiZml4Iiwic2VwIiwiYm9sZCIsIkFuZHJvaWRUb29sQ2hlY2siLCJjb25zdHJ1Y3RvciIsInRvb2xOYW1lIiwidG9vbFBhdGgiLCJBTkRST0lEX0hPTUUiLCJmdWxsUGF0aCIsImZzIiwiZXhpc3RzIiwiam9pbiIsIk9wdGlvbmFsQXBwQnVuZGxlQ2hlY2siLCJidW5kbGV0b29sUGF0aCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQSxJQUFJQSxNQUFNLEdBQUcsRUFBYjtBQUVBLElBQUlDLFFBQVEsR0FBR0Msc0JBQU9DLFNBQVAsS0FBcUIsYUFBckIsR0FBcUMsWUFBcEQ7QUFFQUgsTUFBTSxDQUFDSSxJQUFQLENBQVksSUFBSUMsWUFBSixDQUF1QixjQUF2QixDQUFaO0FBQ0FMLE1BQU0sQ0FBQ0ksSUFBUCxDQUFZLElBQUlDLFlBQUosQ0FBdUIsV0FBdkIsQ0FBWjs7QUFHQSxNQUFNQyxlQUFOLFNBQThCQyxtQkFBOUIsQ0FBMEM7QUFDeEMsUUFBTUMsUUFBTixHQUFrQjtBQUNoQixRQUFJQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsU0FBaEIsRUFBMkI7QUFDekIsVUFBSUMsV0FBVyxHQUFHQyxjQUFLQyxPQUFMLENBQWFMLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxTQUF6QixFQUFvQyxLQUFwQyxDQUFsQjs7QUFDQSxVQUFJRixPQUFPLENBQUNDLEdBQVIsQ0FBWUssSUFBWixDQUFpQkMs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WjtlQUdlN0IsTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERvY3RvckNoZWNrIH0gZnJvbSAnLi9kb2N0b3InO1xuaW1wb3J0IHsgb2ssIG5vaywgb2tPcHRpb25hbCwgbm9rT3B0aW9uYWwsIHJlc29sdmVFeGVjdXRhYmxlUGF0aCB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgZnMsIHN5c3RlbSB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IEVudlZhckFuZFBhdGhDaGVjayBmcm9tICcuL2Vudic7XG5pbXBvcnQgJ2NvbG9ycyc7XG5cbmxldCBjaGVja3MgPSBbXTtcblxubGV0IGphdmFIb21lID0gc3lzdGVtLmlzV2luZG93cygpID8gJyVKQVZBX0hPTUUlJyA6ICckSkFWQV9IT01FJztcblxuY2hlY2tzLnB1c2gobmV3IEVudlZhckFuZFBhdGhDaGVjaygnQU5EUk9JRF9IT01FJykpO1xuY2hlY2tzLnB1c2gobmV3IEVudlZhckFuZFBhdGhDaGVjaygnSkFWQV9IT01FJykpO1xuXG4vLyBDaGVjayB0aGF0IHRoZSBQQVRIIGluY2x1ZGVzIHRoZSBqZGsncyBiaW4gZGlyZWN0b3J5XG5jbGFzcyBKYXZhT25QYXRoQ2hlY2sgZXh0ZW5kcyBEb2N0b3JDaGVjayB7XG4gIGFzeW5jIGRpYWdub3NlICgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWF3YWl0XG4gICAgaWYgKHByb2Nlc3MuZW52LkpBVkFfSE9NRSkge1xuICAgICAgbGV0IGphdmFIb21lQmluID0gcGF0aC5yZXNvbHZlKHByb2Nlc3MuZW52LkpBVkFfSE9NRSwgJ2JpbicpO1xuICAgICAgaWYgKHByb2Nlc3MuZW52LlBBVEguaW5kZXhPZihqYXZhSG9tZUJpbikgKyAxKSB7XG4gICAgICAgIHJldHVybiBvayhgQmluIGRpcmVjdG9yeSBvZiAke2phdmFIb21lfSBpcyBzZXRgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5vayhgQmluIGRpcmVjdG9yeSBmb3IgJHtqYXZhSG9tZX0gaXMgbm90IHNldGApO1xuICB9XG5cbiAgZml4ICgpIHtcbiAgICByZXR1cm4gYEFkZCAke2AnJHtqYXZhSG9tZX0ke3BhdGguc2VwfWJpbidgLmJvbGR9IHRvIHlvdXIgJHsnUEFUSCcuYm9sZH0gZW52aXJvbm1lbnRgO1xuICB9XG59XG5cbi8vIENoZWNrIHRvb2xzXG5jbGFzcyBBbmRyb2lkVG9vbENoZWNrIGV4dGVuZHMgRG9jdG9yQ2hlY2sge1xuICBjb25zdHJ1Y3RvciAodG9vbE5hbWUsIHRvb2xQYXRoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnRvb2xOYW1lID0gdG9vbE5hbWU7XG4gICAgdGhpcy50b29sUGF0aCA9IHRvb2xQYXRoO1xuICB9XG5cbiAgYXN5bmMgZGlhZ25vc2UgKCkge1xuICAgIGlmICh0eXBlb2YgcHJvY2Vzcy5lbnYuQU5EUk9JRF9IT01FID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIG5vayhgJHt0aGlzLnRvb2xOYW1lfSBjb3VsZCBub3QgYmUgZm91bmQgYmVjYXVzZSBBTkRST0lEX0hPTUUgaXMgTk9UIHNldCFgKTtcbiAgICB9XG4gICAgbGV0IGZ1bGxQYXRoID0gcGF0aC5yZXNvbHZlKHByb2Nlc3MuZW52LkFORFJPSURfSE9NRSwgdGhpcy50b29sUGF0aCk7XG4gICAgcmV0dXJuIGF3YWl0IGZzLmV4aXN0cyhmdWxsUGF0aCkgPyBvayhgJHt0aGlzLnRvb2xOYW1lfSBleGlzdHMgYXQ6ICR7ZnVsbFBhdGh9YCkgOlxuICAgICAgbm9rKGAke3RoaXMudG9vbE5hbWV9IGNvdWxkIE5PVCBiZSBmb3VuZCBhdCAnJHtmdWxsUGF0aH0nIWApO1xuICB9XG5cbiAgZml4ICgpIHtcbiAgICBpZiAodHlwZW9mIHByb2Nlc3MuZW52LkFORFJPSURfSE9NRSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiBgTWFudWFsbHkgY29uZmlndXJlICR7J0FORFJPSURfSE9NRScuYm9sZH0gYW5kIHJ1biBhcHBpdW0tZG9jdG9yIGFnYWluLmA7XG4gICAgfVxuICAgIHJldHVybiBgTWFudWFsbHkgaW5zdGFsbCAke3RoaXMudG9vbE5hbWUuYm9sZH0gYW5kIGFkZCBpdCB0byAkeydQQVRIJy5ib2xkfS5gO1xuICB9XG59XG5jaGVja3MucHVzaChuZXcgQW5kcm9pZFRvb2xDaGVjaygnYWRiJyxcbiAgcGF0aC5qb2luKCdwbGF0Zm9ybS10b29scycsIHN5c3RlbS5pc1dpbmRvd3MoKSA/ICdhZGIuZXhlJyA6ICdhZGInKSkpO1xuY2hlY2tzLnB1c2gobmV3IEFuZHJvaWRUb29sQ2hlY2soJ2FuZHJvaWQnLFxuICBwYXRoLmpvaW4oJ3Rvb2xzJywgc3lzdGVtLmlzV2luZG93cygpID8gJ2FuZHJvaWQuYmF0JyA6ICdhbmRyb2lkJykpKTtcbmNoZWNrcy5wdXNoKG5ldyBBbmRyb2lkVG9vbENoZWNrKCdlbXVsYXRvcicsXG4gIHBhdGguam9pbigndG9vbHMnLCBzeXN0ZW0uaXNXaW5kb3dzKCkgPyAnZW11bGF0b3IuZXhlJyA6ICdlbXVsYXRvcicpKSk7XG5jaGVja3MucHVzaChuZXcgSmF2YU9uUGF0aENoZWNrKCkpO1xuXG5jbGFzcyBPcHRpb25hbEFwcEJ1bmRsZUNoZWNrIGV4dGVuZHMgRG9jdG9yQ2hlY2sge1xuICBhc3luYyBkaWFnbm9zZSAoKSB7XG4gICAgY29uc3QgYnVuZGxldG9vbFBhdGggPSBhd2FpdCByZXNvbHZlRXhlY3V0YWJsZVBhdGgoJ2J1bmRsZXRvb2wuamFyJyk7XG4gICAgcmV0dXJuIGJ1bmRsZXRvb2xQYXRoXG4gICAgICA/IG9rT3B0aW9uYWwoYGJ1bmRsZXRvb2wuamFyIGlzIGluc3RhbGxlZCBhdDogJHtidW5kbGV0b29sUGF0aH1gKVxuICAgICAgOiBub2tPcHRpb25hbCgnYnVuZGxldG9vbC5qYXIgY2Fubm90IGJlIGZvdW5kJyk7XG4gIH1cblxuICBhc3luYyBmaXggKCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtYXdhaXRcbiAgICByZXR1cm4gYCR7J2J1bmRsZXRvb2wuamFyJy5ib2xkfSBpcyB1c2VkIHRvIGhhbmRsZSBBbmRyb2lkIEFwcCBCdW5kbGUuIFBsZWFzZSByZWFkIGh0dHA6Ly9hcHBpdW0uaW8vZG9jcy9lbi93cml0aW5nLXJ1bm5pbmctYXBwaXVtL2FuZHJvaWQvYW5kcm9pZC1hcHBidW5kbGUvIHRvIGluc3RhbGwgaXRgICtcbiAgICAgIGAke3N5c3RlbS5pc1dpbmRvd3MoKSA/ICcuIEFsc28gY29uc2lkZXIgYWRkaW5nIHRoZSBcIi5qYXJcIiBleHRlbnNpb24gaW50byB5b3VyIFBBVEhFWFQgZW52aXJvbm1lbnQgdmFyaWFibGUgaW4gb3JkZXIgdG8gZml4IHRoZSBwcm9ibGVtIGZvciBXaW5kb3dzJyA6ICcnfWA7XG4gIH1cbn1cbmNoZWNrcy5wdXNoKG5ldyBPcHRpb25hbEFwcEJ1bmRsZUNoZWNrKCkpO1xuXG5leHBvcnQgeyBFbnZWYXJBbmRQYXRoQ2hlY2ssIEFuZHJvaWRUb29sQ2hlY2ssIEphdmFPblBhdGhDaGVjaywgT3B0aW9uYWxBcHBCdW5kbGVDaGVjayB9O1xuZXhwb3J0IGRlZmF1bHQgY2hlY2tzO1xuIl0sImZpbGUiOiJsaWIvYW5kcm9pZC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiJ9
